/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.9.0-rc.9
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CreateDocumentRequest } from '../model/models';
import { Document } from '../model/models';
import { PageDocument } from '../model/models';
import { PageDocumentSummary } from '../model/models';
import { UpdateDocumentRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface DefaultServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create a new document
     * 
     * @param createDocumentRequest 
     */
    createDocument(createDocumentRequest: CreateDocumentRequest, extraHttpRequestParams?: any): Observable<Document>;

    /**
     * Delete a document and all its versions
     * 
     * @param id 
     */
    deleteDocument(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete document versions after specified timestamp
     * 
     * @param id 
     * @param after 
     */
    deleteVersionsAfterTimestamp(id: string, after: string, extraHttpRequestParams?: any): Observable<Array<Document>>;

    /**
     * Get latest version of a document
     * 
     * @param id 
     */
    getDocument(id: string, extraHttpRequestParams?: any): Observable<Document>;

    /**
     * Get specific version of a document by version number
     * 
     * @param id 
     * @param versionNumber 
     */
    getDocumentVersion(id: string, versionNumber: number, extraHttpRequestParams?: any): Observable<Document>;

    /**
     * Get all versions of a document
     * 
     * @param id 
     * @param page 
     * @param size 
     */
    getDocumentVersions(id: string, page?: number, size?: number, extraHttpRequestParams?: any): Observable<PageDocument>;

    /**
     * Get all user documents (latest versions only)
     * 
     * @param page 
     * @param size 
     * @param sortBy 
     * @param sortDir 
     */
    getUserDocuments(page?: number, size?: number, sortBy?: string, sortDir?: string, extraHttpRequestParams?: any): Observable<PageDocumentSummary>;

    /**
     * Update a document (creates new version)
     * 
     * @param id 
     * @param updateDocumentRequest 
     */
    updateDocument(id: string, updateDocumentRequest: UpdateDocumentRequest, extraHttpRequestParams?: any): Observable<Document>;

}
