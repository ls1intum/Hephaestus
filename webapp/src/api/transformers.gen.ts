// This file is auto-generated by @hey-api/openapi-ts

import type { GetActivityByUserResponse, GetLeaderboardResponse, PostMentorChatMessagesByMessageIdVoteResponse, GetMentorDocumentsResponse, PostMentorDocumentsResponse, GetMentorDocumentsByIdResponse, PutMentorDocumentsByIdResponse, DeleteMentorDocumentsByIdVersionsResponse, GetMentorDocumentsByIdVersionsResponse, GetMentorDocumentsByIdVersionsByVersionNumberResponse, GetMentorThreadsByThreadIdResponse, GetMetaDataResponse, GetAllTeamsResponse, GetUserProfileResponse, RemoveLabelFromTeamResponse, AddLabelToTeamResponse, GetUsersWithTeamsResponse } from './types.gen';

const repositoryInfoSchemaResponseTransformer = (data: any) => {
    if (data.labels) {
        data.labels = data.labels.map((item: any) => {
            return labelInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const labelInfoSchemaResponseTransformer = (data: any) => {
    if (data.repository) {
        data.repository = repositoryInfoSchemaResponseTransformer(data.repository);
    }
    return data;
};

const pullRequestWithBadPracticesSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.labels = data.labels.map((item: any) => {
        return labelInfoSchemaResponseTransformer(item);
    });
    data.repository = repositoryInfoSchemaResponseTransformer(data.repository);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

const activitySchemaResponseTransformer = (data: any) => {
    data.pullRequests = data.pullRequests.map((item: any) => {
        return pullRequestWithBadPracticesSchemaResponseTransformer(item);
    });
    return data;
};

export const getActivityByUserResponseTransformer = async (data: any): Promise<GetActivityByUserResponse> => {
    data = activitySchemaResponseTransformer(data);
    return data;
};

const pullRequestInfoSchemaResponseTransformer = (data: any) => {
    if (data.closedAt) {
        data.closedAt = new Date(data.closedAt);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.labels) {
        data.labels = data.labels.map((item: any) => {
            return labelInfoSchemaResponseTransformer(item);
        });
    }
    if (data.mergedAt) {
        data.mergedAt = new Date(data.mergedAt);
    }
    if (data.repository) {
        data.repository = repositoryInfoSchemaResponseTransformer(data.repository);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

const leaderboardEntrySchemaResponseTransformer = (data: any) => {
    data.reviewedPullRequests = data.reviewedPullRequests.map((item: any) => {
        return pullRequestInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getLeaderboardResponseTransformer = async (data: any): Promise<GetLeaderboardResponse> => {
    data = data.map((item: any) => {
        return leaderboardEntrySchemaResponseTransformer(item);
    });
    return data;
};

const chatMessageVoteSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const postMentorChatMessagesByMessageIdVoteResponseTransformer = async (data: any): Promise<PostMentorChatMessagesByMessageIdVoteResponse> => {
    data = chatMessageVoteSchemaResponseTransformer(data);
    return data;
};

const documentSummarySchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getMentorDocumentsResponseTransformer = async (data: any): Promise<GetMentorDocumentsResponse> => {
    data = data.map((item: any) => {
        return documentSummarySchemaResponseTransformer(item);
    });
    return data;
};

const documentSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const postMentorDocumentsResponseTransformer = async (data: any): Promise<PostMentorDocumentsResponse> => {
    data = documentSchemaResponseTransformer(data);
    return data;
};

export const getMentorDocumentsByIdResponseTransformer = async (data: any): Promise<GetMentorDocumentsByIdResponse> => {
    data = documentSchemaResponseTransformer(data);
    return data;
};

export const putMentorDocumentsByIdResponseTransformer = async (data: any): Promise<PutMentorDocumentsByIdResponse> => {
    data = documentSchemaResponseTransformer(data);
    return data;
};

export const deleteMentorDocumentsByIdVersionsResponseTransformer = async (data: any): Promise<DeleteMentorDocumentsByIdVersionsResponse> => {
    data = data.map((item: any) => {
        return documentSchemaResponseTransformer(item);
    });
    return data;
};

export const getMentorDocumentsByIdVersionsResponseTransformer = async (data: any): Promise<GetMentorDocumentsByIdVersionsResponse> => {
    data = data.map((item: any) => {
        return documentSchemaResponseTransformer(item);
    });
    return data;
};

export const getMentorDocumentsByIdVersionsByVersionNumberResponseTransformer = async (data: any): Promise<GetMentorDocumentsByIdVersionsByVersionNumberResponse> => {
    data = documentSchemaResponseTransformer(data);
    return data;
};

export const getMentorThreadsByThreadIdResponseTransformer = async (data: any): Promise<GetMentorThreadsByThreadIdResponse> => {
    data.messages = data.messages.map((item: any) => {
        if (item.createdAt) {
            item.createdAt = new Date(item.createdAt);
        }
        return item;
    });
    return data;
};

const teamInfoSchemaResponseTransformer = (data: any) => {
    data.labels = data.labels.map((item: any) => {
        return labelInfoSchemaResponseTransformer(item);
    });
    data.repositories = data.repositories.map((item: any) => {
        return repositoryInfoSchemaResponseTransformer(item);
    });
    return data;
};

const metaDataSchemaResponseTransformer = (data: any) => {
    data.teams = data.teams.map((item: any) => {
        return teamInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getMetaDataResponseTransformer = async (data: any): Promise<GetMetaDataResponse> => {
    data = metaDataSchemaResponseTransformer(data);
    return data;
};

export const getAllTeamsResponseTransformer = async (data: any): Promise<GetAllTeamsResponse> => {
    data = data.map((item: any) => {
        return teamInfoSchemaResponseTransformer(item);
    });
    return data;
};

const pullRequestBaseInfoSchemaResponseTransformer = (data: any) => {
    if (data.repository) {
        data.repository = repositoryInfoSchemaResponseTransformer(data.repository);
    }
    return data;
};

const pullRequestReviewInfoSchemaResponseTransformer = (data: any) => {
    if (data.pullRequest) {
        data.pullRequest = pullRequestBaseInfoSchemaResponseTransformer(data.pullRequest);
    }
    if (data.submittedAt) {
        data.submittedAt = new Date(data.submittedAt);
    }
    return data;
};

const userProfileSchemaResponseTransformer = (data: any) => {
    data.contributedRepositories = data.contributedRepositories.map((item: any) => {
        return repositoryInfoSchemaResponseTransformer(item);
    });
    data.firstContribution = new Date(data.firstContribution);
    if (data.openPullRequests) {
        data.openPullRequests = data.openPullRequests.map((item: any) => {
            return pullRequestInfoSchemaResponseTransformer(item);
        });
    }
    if (data.reviewActivity) {
        data.reviewActivity = data.reviewActivity.map((item: any) => {
            return pullRequestReviewInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUserProfileResponseTransformer = async (data: any): Promise<GetUserProfileResponse> => {
    data = userProfileSchemaResponseTransformer(data);
    return data;
};

export const removeLabelFromTeamResponseTransformer = async (data: any): Promise<RemoveLabelFromTeamResponse> => {
    data = teamInfoSchemaResponseTransformer(data);
    return data;
};

export const addLabelToTeamResponseTransformer = async (data: any): Promise<AddLabelToTeamResponse> => {
    data = teamInfoSchemaResponseTransformer(data);
    return data;
};

const userTeamsSchemaResponseTransformer = (data: any) => {
    data.teams = data.teams.map((item: any) => {
        return teamInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getUsersWithTeamsResponseTransformer = async (data: any): Promise<GetUsersWithTeamsResponse> => {
    data = data.map((item: any) => {
        return userTeamsSchemaResponseTransformer(item);
    });
    return data;
};