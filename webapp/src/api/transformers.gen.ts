// This file is auto-generated by @hey-api/openapi-ts

import type { GetActivityByUserResponse, VoteMessageResponse, GetUserDocumentsResponse, CreateDocumentResponse, GetDocumentResponse, UpdateDocumentResponse, DeleteVersionsAfterTimestampResponse, GetDocumentVersionsResponse, GetDocumentVersionResponse, GetAllResponse, GetByIdResponse, GetLeaderboardResponse, GetThreadResponse, GetThreadsResponse, GetGroupedThreadsResponse, GetTeamLeaderboardResponse, GetAllTimeTeamLeaderboardResponse, GetUserProfileResponse } from './types.gen';

const pullRequestWithBadPracticesSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

const activitySchemaResponseTransformer = (data: any) => {
    data.pullRequests = data.pullRequests.map((item: any) => {
        return pullRequestWithBadPracticesSchemaResponseTransformer(item);
    });
    return data;
};

export const getActivityByUserResponseTransformer = async (data: any): Promise<GetActivityByUserResponse> => {
    data = activitySchemaResponseTransformer(data);
    return data;
};

const chatMessageVoteSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const voteMessageResponseTransformer = async (data: any): Promise<VoteMessageResponse> => {
    data = chatMessageVoteSchemaResponseTransformer(data);
    return data;
};

const documentSummarySchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

const pageDocumentSummarySchemaResponseTransformer = (data: any) => {
    if (data.content) {
        data.content = data.content.map((item: any) => {
            return documentSummarySchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUserDocumentsResponseTransformer = async (data: any): Promise<GetUserDocumentsResponse> => {
    data = pageDocumentSummarySchemaResponseTransformer(data);
    return data;
};

const documentSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const createDocumentResponseTransformer = async (data: any): Promise<CreateDocumentResponse> => {
    data = documentSchemaResponseTransformer(data);
    return data;
};

export const getDocumentResponseTransformer = async (data: any): Promise<GetDocumentResponse> => {
    data = documentSchemaResponseTransformer(data);
    return data;
};

export const updateDocumentResponseTransformer = async (data: any): Promise<UpdateDocumentResponse> => {
    data = documentSchemaResponseTransformer(data);
    return data;
};

export const deleteVersionsAfterTimestampResponseTransformer = async (data: any): Promise<DeleteVersionsAfterTimestampResponse> => {
    data = data.map((item: any) => {
        return documentSchemaResponseTransformer(item);
    });
    return data;
};

const pageDocumentSchemaResponseTransformer = (data: any) => {
    if (data.content) {
        data.content = data.content.map((item: any) => {
            return documentSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getDocumentVersionsResponseTransformer = async (data: any): Promise<GetDocumentVersionsResponse> => {
    data = pageDocumentSchemaResponseTransformer(data);
    return data;
};

export const getDocumentVersionResponseTransformer = async (data: any): Promise<GetDocumentVersionResponse> => {
    data = documentSchemaResponseTransformer(data);
    return data;
};

const teamV2InfoSchemaResponseTransformer = (data: any) => {
    if (data.lastSyncedAt) {
        data.lastSyncedAt = new Date(data.lastSyncedAt);
    }
    return data;
};

export const getAllResponseTransformer = async (data: any): Promise<GetAllResponse> => {
    data = data.map((item: any) => {
        return teamV2InfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getByIdResponseTransformer = async (data: any): Promise<GetByIdResponse> => {
    data = teamV2InfoSchemaResponseTransformer(data);
    return data;
};

const pullRequestInfoSchemaResponseTransformer = (data: any) => {
    if (data.closedAt) {
        data.closedAt = new Date(data.closedAt);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.mergedAt) {
        data.mergedAt = new Date(data.mergedAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

const leaderboardEntrySchemaResponseTransformer = (data: any) => {
    data.reviewedPullRequests = data.reviewedPullRequests.map((item: any) => {
        return pullRequestInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getLeaderboardResponseTransformer = async (data: any): Promise<GetLeaderboardResponse> => {
    data = data.map((item: any) => {
        return leaderboardEntrySchemaResponseTransformer(item);
    });
    return data;
};

const chatThreadDetailSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.votes) {
        data.votes = data.votes.map((item: any) => {
            return chatMessageVoteSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getThreadResponseTransformer = async (data: any): Promise<GetThreadResponse> => {
    data = chatThreadDetailSchemaResponseTransformer(data);
    return data;
};

const chatThreadSummarySchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getThreadsResponseTransformer = async (data: any): Promise<GetThreadsResponse> => {
    data = data.map((item: any) => {
        return chatThreadSummarySchemaResponseTransformer(item);
    });
    return data;
};

const chatThreadGroupSchemaResponseTransformer = (data: any) => {
    data.threads = data.threads.map((item: any) => {
        return chatThreadSummarySchemaResponseTransformer(item);
    });
    return data;
};

export const getGroupedThreadsResponseTransformer = async (data: any): Promise<GetGroupedThreadsResponse> => {
    data = data.map((item: any) => {
        return chatThreadGroupSchemaResponseTransformer(item);
    });
    return data;
};

const teamLeaderboardEntrySchemaResponseTransformer = (data: any) => {
    data.reviewedPullRequests = data.reviewedPullRequests.map((item: any) => {
        return pullRequestInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getTeamLeaderboardResponseTransformer = async (data: any): Promise<GetTeamLeaderboardResponse> => {
    data = data.map((item: any) => {
        return teamLeaderboardEntrySchemaResponseTransformer(item);
    });
    return data;
};

export const getAllTimeTeamLeaderboardResponseTransformer = async (data: any): Promise<GetAllTimeTeamLeaderboardResponse> => {
    data = data.map((item: any) => {
        return teamLeaderboardEntrySchemaResponseTransformer(item);
    });
    return data;
};

const pullRequestReviewInfoSchemaResponseTransformer = (data: any) => {
    if (data.submittedAt) {
        data.submittedAt = new Date(data.submittedAt);
    }
    return data;
};

const userProfileSchemaResponseTransformer = (data: any) => {
    data.firstContribution = new Date(data.firstContribution);
    if (data.openPullRequests) {
        data.openPullRequests = data.openPullRequests.map((item: any) => {
            return pullRequestInfoSchemaResponseTransformer(item);
        });
    }
    if (data.reviewActivity) {
        data.reviewActivity = data.reviewActivity.map((item: any) => {
            return pullRequestReviewInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUserProfileResponseTransformer = async (data: any): Promise<GetUserProfileResponse> => {
    data = userProfileSchemaResponseTransformer(data);
    return data;
};