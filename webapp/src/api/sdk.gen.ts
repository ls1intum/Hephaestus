// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import { client as _heyApiClient } from './client.gen';
import type { AddLabelToTeamData, AddLabelToTeamResponses, AddRepositoryToMonitorData, AddRepositoryToMonitorResponses, CreateDocumentData, CreateDocumentErrors, CreateDocumentResponses, DeleteDocumentData, DeleteDocumentErrors, DeleteDocumentResponses, DeleteUserData, DeleteUserResponses, DeleteVersionsAfterTimestampData, DeleteVersionsAfterTimestampErrors, DeleteVersionsAfterTimestampResponses, DetectBadPracticesByUserData, DetectBadPracticesByUserResponses, DetectBadPracticesForPullRequestData, DetectBadPracticesForPullRequestResponses, GetActivityByUserData, GetActivityByUserResponses, GetAllTeamsData, GetAllTeamsResponses, GetContributorsData, GetContributorsResponses, GetDocumentData, GetDocumentErrors, GetDocumentResponses, GetDocumentVersionData, GetDocumentVersionErrors, GetDocumentVersionResponses, GetDocumentVersionsData, GetDocumentVersionsErrors, GetDocumentVersionsResponses, GetGroupedThreadsData, GetGroupedThreadsErrors, GetGroupedThreadsResponses, GetLeaderboardData, GetLeaderboardResponses, GetMetaDataData, GetMetaDataResponses, GetRepositoriesToMonitorData, GetRepositoriesToMonitorResponses, GetThreadData, GetThreadErrors, GetThreadResponses, GetThreadsData, GetThreadsErrors, GetThreadsResponses, GetUserDocumentsData, GetUserDocumentsResponses, GetUserLeagueStatsData, GetUserLeagueStatsResponses, GetUserProfileData, GetUserProfileResponses, GetUserSettingsData, GetUserSettingsResponses, GetUsersWithTeamsData, GetUsersWithTeamsResponses, ProvideFeedbackForBadPracticeData, ProvideFeedbackForBadPracticeResponses, RemoveLabelFromTeamData, RemoveLabelFromTeamResponses, RemoveRepositoryToMonitorData, RemoveRepositoryToMonitorResponses, ResetAndRecalculateLeaguesData, ResetAndRecalculateLeaguesResponses, ResolveBadPracticeData, ResolveBadPracticeResponses, UpdateDocumentData, UpdateDocumentErrors, UpdateDocumentResponses, UpdateTeamVisibilityData, UpdateTeamVisibilityResponses, UpdateUserSettingsData, UpdateUserSettingsResponses, VoteMessageData, VoteMessageErrors, VoteMessageResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const provideFeedbackForBadPractice = <ThrowOnError extends boolean = false>(options: Options<ProvideFeedbackForBadPracticeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProvideFeedbackForBadPracticeResponses, unknown, ThrowOnError>({
        url: '/activity/badpractice/{badPracticeId}/feedback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const resolveBadPractice = <ThrowOnError extends boolean = false>(options: Options<ResolveBadPracticeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResolveBadPracticeResponses, unknown, ThrowOnError>({
        url: '/activity/badpractice/{badPracticeId}/resolve',
        ...options
    });
};

export const detectBadPracticesForPullRequest = <ThrowOnError extends boolean = false>(options: Options<DetectBadPracticesForPullRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DetectBadPracticesForPullRequestResponses, unknown, ThrowOnError>({
        url: '/activity/pullrequest/{pullRequestId}/badpractices',
        ...options
    });
};

export const detectBadPracticesByUser = <ThrowOnError extends boolean = false>(options: Options<DetectBadPracticesByUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DetectBadPracticesByUserResponses, unknown, ThrowOnError>({
        url: '/activity/user/{login}/badpractices',
        ...options
    });
};

export const getActivityByUser = <ThrowOnError extends boolean = false>(options: Options<GetActivityByUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActivityByUserResponses, unknown, ThrowOnError>({
        url: '/activity/{login}',
        ...options
    });
};

/**
 * Vote on a message
 * Cast an upvote or downvote on a chat message
 */
export const voteMessage = <ThrowOnError extends boolean = false>(options: Options<VoteMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VoteMessageResponses, VoteMessageErrors, ThrowOnError>({
        url: '/api/chat/messages/{messageId}/vote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all user documents (latest versions only)
 */
export const getUserDocuments = <ThrowOnError extends boolean = false>(options?: Options<GetUserDocumentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserDocumentsResponses, unknown, ThrowOnError>({
        url: '/api/documents',
        ...options
    });
};

/**
 * Create a new document
 */
export const createDocument = <ThrowOnError extends boolean = false>(options: Options<CreateDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDocumentResponses, CreateDocumentErrors, ThrowOnError>({
        url: '/api/documents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a document and all its versions
 */
export const deleteDocument = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentResponses, DeleteDocumentErrors, ThrowOnError>({
        url: '/api/documents/{id}',
        ...options
    });
};

/**
 * Get latest version of a document
 */
export const getDocument = <ThrowOnError extends boolean = false>(options: Options<GetDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentResponses, GetDocumentErrors, ThrowOnError>({
        url: '/api/documents/{id}',
        ...options
    });
};

/**
 * Update a document (creates new version)
 */
export const updateDocument = <ThrowOnError extends boolean = false>(options: Options<UpdateDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateDocumentResponses, UpdateDocumentErrors, ThrowOnError>({
        url: '/api/documents/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete document versions after specified timestamp
 */
export const deleteVersionsAfterTimestamp = <ThrowOnError extends boolean = false>(options: Options<DeleteVersionsAfterTimestampData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVersionsAfterTimestampResponses, DeleteVersionsAfterTimestampErrors, ThrowOnError>({
        url: '/api/documents/{id}/versions',
        ...options
    });
};

/**
 * Get all versions of a document
 */
export const getDocumentVersions = <ThrowOnError extends boolean = false>(options: Options<GetDocumentVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentVersionsResponses, GetDocumentVersionsErrors, ThrowOnError>({
        url: '/api/documents/{id}/versions',
        ...options
    });
};

/**
 * Get specific version of a document by version number
 */
export const getDocumentVersion = <ThrowOnError extends boolean = false>(options: Options<GetDocumentVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentVersionResponses, GetDocumentVersionErrors, ThrowOnError>({
        url: '/api/documents/{id}/versions/{versionNumber}',
        ...options
    });
};

export const getLeaderboard = <ThrowOnError extends boolean = false>(options: Options<GetLeaderboardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLeaderboardResponses, unknown, ThrowOnError>({
        url: '/leaderboard',
        ...options
    });
};

export const getUserLeagueStats = <ThrowOnError extends boolean = false>(options: Options<GetUserLeagueStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetUserLeagueStatsResponses, unknown, ThrowOnError>({
        url: '/leaderboard',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get chat thread detail
 * Retrieve a specific chat thread with all messages
 */
export const getThread = <ThrowOnError extends boolean = false>(options: Options<GetThreadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetThreadResponses, GetThreadErrors, ThrowOnError>({
        url: '/mentor/thread/{threadId}',
        ...options
    });
};

/**
 * Get user's chat threads
 * Retrieve all chat threads for the authenticated user
 */
export const getThreads = <ThrowOnError extends boolean = false>(options?: Options<GetThreadsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetThreadsResponses, GetThreadsErrors, ThrowOnError>({
        url: '/mentor/threads',
        ...options
    });
};

/**
 * Get user's grouped chat threads
 * Retrieve all chat threads for the authenticated user grouped by time periods
 */
export const getGroupedThreads = <ThrowOnError extends boolean = false>(options?: Options<GetGroupedThreadsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGroupedThreadsResponses, GetGroupedThreadsErrors, ThrowOnError>({
        url: '/mentor/threads/grouped',
        ...options
    });
};

export const getMetaData = <ThrowOnError extends boolean = false>(options?: Options<GetMetaDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMetaDataResponses, unknown, ThrowOnError>({
        url: '/meta',
        ...options
    });
};

export const getContributors = <ThrowOnError extends boolean = false>(options?: Options<GetContributorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetContributorsResponses, unknown, ThrowOnError>({
        url: '/meta/contributors',
        ...options
    });
};

export const getAllTeams = <ThrowOnError extends boolean = false>(options?: Options<GetAllTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllTeamsResponses, unknown, ThrowOnError>({
        url: '/team',
        ...options
    });
};

export const updateTeamVisibility = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamVisibilityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTeamVisibilityResponses, unknown, ThrowOnError>({
        url: '/team/{id}/visibility',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserResponses, unknown, ThrowOnError>({
        url: '/user',
        ...options
    });
};

export const getUserSettings = <ThrowOnError extends boolean = false>(options?: Options<GetUserSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSettingsResponses, unknown, ThrowOnError>({
        url: '/user/settings',
        ...options
    });
};

export const updateUserSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateUserSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateUserSettingsResponses, unknown, ThrowOnError>({
        url: '/user/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUserProfile = <ThrowOnError extends boolean = false>(options: Options<GetUserProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserProfileResponses, unknown, ThrowOnError>({
        url: '/user/{login}/profile',
        ...options
    });
};

export const resetAndRecalculateLeagues = <ThrowOnError extends boolean = false>(options?: Options<ResetAndRecalculateLeaguesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ResetAndRecalculateLeaguesResponses, unknown, ThrowOnError>({
        url: '/workspace/league/reset',
        ...options
    });
};

export const getRepositoriesToMonitor = <ThrowOnError extends boolean = false>(options?: Options<GetRepositoriesToMonitorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRepositoriesToMonitorResponses, unknown, ThrowOnError>({
        url: '/workspace/repositories',
        ...options
    });
};

export const removeRepositoryToMonitor = <ThrowOnError extends boolean = false>(options: Options<RemoveRepositoryToMonitorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveRepositoryToMonitorResponses, unknown, ThrowOnError>({
        url: '/workspace/repositories/{owner}/{name}',
        ...options
    });
};

export const addRepositoryToMonitor = <ThrowOnError extends boolean = false>(options: Options<AddRepositoryToMonitorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddRepositoryToMonitorResponses, unknown, ThrowOnError>({
        url: '/workspace/repositories/{owner}/{name}',
        ...options
    });
};

export const removeLabelFromTeam = <ThrowOnError extends boolean = false>(options: Options<RemoveLabelFromTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveLabelFromTeamResponses, unknown, ThrowOnError>({
        url: '/workspace/team/{teamId}/label/{labelId}',
        ...options
    });
};

export const addLabelToTeam = <ThrowOnError extends boolean = false>(options: Options<AddLabelToTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddLabelToTeamResponses, unknown, ThrowOnError>({
        url: '/workspace/team/{teamId}/label/{repositoryId}/{label}',
        ...options
    });
};

export const getUsersWithTeams = <ThrowOnError extends boolean = false>(options?: Options<GetUsersWithTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersWithTeamsResponses, unknown, ThrowOnError>({
        url: '/workspace/users',
        ...options
    });
};