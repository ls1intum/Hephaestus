// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ProvideFeedbackForBadPracticeData, ProvideFeedbackForBadPracticeResponses, ResolveBadPracticeData, ResolveBadPracticeResponses, DetectBadPracticesForPullRequestData, DetectBadPracticesForPullRequestResponses, DetectBadPracticesByUserData, DetectBadPracticesByUserResponses, GetActivityByUserData, GetActivityByUserResponses, GetLeaderboardData, GetLeaderboardResponses, GetUserLeagueStatsData, GetUserLeagueStatsResponses, PostMentorChatData, PostMentorChatResponses, PostMentorChatMessagesByMessageIdVoteData, PostMentorChatMessagesByMessageIdVoteResponses, PostMentorChatMessagesByMessageIdVoteErrors, GetMentorDocumentsData, GetMentorDocumentsResponses, GetMentorDocumentsErrors, PostMentorDocumentsData, PostMentorDocumentsResponses, PostMentorDocumentsErrors, DeleteMentorDocumentsByIdData, DeleteMentorDocumentsByIdResponses, DeleteMentorDocumentsByIdErrors, GetMentorDocumentsByIdData, GetMentorDocumentsByIdResponses, GetMentorDocumentsByIdErrors, PutMentorDocumentsByIdData, PutMentorDocumentsByIdResponses, PutMentorDocumentsByIdErrors, DeleteMentorDocumentsByIdVersionsData, DeleteMentorDocumentsByIdVersionsResponses, DeleteMentorDocumentsByIdVersionsErrors, GetMentorDocumentsByIdVersionsData, GetMentorDocumentsByIdVersionsResponses, GetMentorDocumentsByIdVersionsErrors, GetMentorDocumentsByIdVersionsByVersionNumberData, GetMentorDocumentsByIdVersionsByVersionNumberResponses, GetMentorDocumentsByIdVersionsByVersionNumberErrors, GetMentorThreadsByThreadIdData, GetMentorThreadsByThreadIdResponses, GetMentorThreadsByThreadIdErrors, GetMetaDataData, GetMetaDataResponses, GetContributorsData, GetContributorsResponses, GetAllTeamsData, GetAllTeamsResponses, UpdateTeamVisibilityData, UpdateTeamVisibilityResponses, DeleteUserData, DeleteUserResponses, GetUserSettingsData, GetUserSettingsResponses, UpdateUserSettingsData, UpdateUserSettingsResponses, GetUserProfileData, GetUserProfileResponses, ResetAndRecalculateLeaguesData, ResetAndRecalculateLeaguesResponses, GetRepositoriesToMonitorData, GetRepositoriesToMonitorResponses, RemoveRepositoryToMonitorData, RemoveRepositoryToMonitorResponses, AddRepositoryToMonitorData, AddRepositoryToMonitorResponses, RemoveLabelFromTeamData, RemoveLabelFromTeamResponses, AddLabelToTeamData, AddLabelToTeamResponses, GetUsersWithTeamsData, GetUsersWithTeamsResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const provideFeedbackForBadPractice = <ThrowOnError extends boolean = false>(options: Options<ProvideFeedbackForBadPracticeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProvideFeedbackForBadPracticeResponses, unknown, ThrowOnError>({
        url: '/activity/badpractice/{badPracticeId}/feedback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const resolveBadPractice = <ThrowOnError extends boolean = false>(options: Options<ResolveBadPracticeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResolveBadPracticeResponses, unknown, ThrowOnError>({
        url: '/activity/badpractice/{badPracticeId}/resolve',
        ...options
    });
};

export const detectBadPracticesForPullRequest = <ThrowOnError extends boolean = false>(options: Options<DetectBadPracticesForPullRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DetectBadPracticesForPullRequestResponses, unknown, ThrowOnError>({
        url: '/activity/pullrequest/{pullRequestId}/badpractices',
        ...options
    });
};

export const detectBadPracticesByUser = <ThrowOnError extends boolean = false>(options: Options<DetectBadPracticesByUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DetectBadPracticesByUserResponses, unknown, ThrowOnError>({
        url: '/activity/user/{login}/badpractices',
        ...options
    });
};

export const getActivityByUser = <ThrowOnError extends boolean = false>(options: Options<GetActivityByUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActivityByUserResponses, unknown, ThrowOnError>({
        url: '/activity/{login}',
        ...options
    });
};

export const getLeaderboard = <ThrowOnError extends boolean = false>(options: Options<GetLeaderboardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLeaderboardResponses, unknown, ThrowOnError>({
        url: '/leaderboard',
        ...options
    });
};

export const getUserLeagueStats = <ThrowOnError extends boolean = false>(options: Options<GetUserLeagueStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetUserLeagueStatsResponses, unknown, ThrowOnError>({
        url: '/leaderboard',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Handle mentor chat
 */
export const postMentorChat = <ThrowOnError extends boolean = false>(options: Options<PostMentorChatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMentorChatResponses, unknown, ThrowOnError>({
        url: '/mentor/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Vote on a chat message (upvote/downvote)
 */
export const postMentorChatMessagesByMessageIdVote = <ThrowOnError extends boolean = false>(options: Options<PostMentorChatMessagesByMessageIdVoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMentorChatMessagesByMessageIdVoteResponses, PostMentorChatMessagesByMessageIdVoteErrors, ThrowOnError>({
        url: '/mentor/chat/messages/{messageId}/vote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List latest version of documents (no auth; all users)
 */
export const getMentorDocuments = <ThrowOnError extends boolean = false>(options?: Options<GetMentorDocumentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMentorDocumentsResponses, GetMentorDocumentsErrors, ThrowOnError>({
        url: '/mentor/documents',
        ...options
    });
};

/**
 * Create a new document
 */
export const postMentorDocuments = <ThrowOnError extends boolean = false>(options: Options<PostMentorDocumentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMentorDocumentsResponses, PostMentorDocumentsErrors, ThrowOnError>({
        url: '/mentor/documents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a document and all versions
 */
export const deleteMentorDocumentsById = <ThrowOnError extends boolean = false>(options: Options<DeleteMentorDocumentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMentorDocumentsByIdResponses, DeleteMentorDocumentsByIdErrors, ThrowOnError>({
        url: '/mentor/documents/{id}',
        ...options
    });
};

/**
 * Get latest version of a document
 */
export const getMentorDocumentsById = <ThrowOnError extends boolean = false>(options: Options<GetMentorDocumentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMentorDocumentsByIdResponses, GetMentorDocumentsByIdErrors, ThrowOnError>({
        url: '/mentor/documents/{id}',
        ...options
    });
};

/**
 * Update a document (creates new version)
 */
export const putMentorDocumentsById = <ThrowOnError extends boolean = false>(options: Options<PutMentorDocumentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMentorDocumentsByIdResponses, PutMentorDocumentsByIdErrors, ThrowOnError>({
        url: '/mentor/documents/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete versions after timestamp
 */
export const deleteMentorDocumentsByIdVersions = <ThrowOnError extends boolean = false>(options: Options<DeleteMentorDocumentsByIdVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMentorDocumentsByIdVersionsResponses, DeleteMentorDocumentsByIdVersionsErrors, ThrowOnError>({
        url: '/mentor/documents/{id}/versions',
        ...options
    });
};

/**
 * List versions of a document
 */
export const getMentorDocumentsByIdVersions = <ThrowOnError extends boolean = false>(options: Options<GetMentorDocumentsByIdVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMentorDocumentsByIdVersionsResponses, GetMentorDocumentsByIdVersionsErrors, ThrowOnError>({
        url: '/mentor/documents/{id}/versions',
        ...options
    });
};

/**
 * Get specific version
 */
export const getMentorDocumentsByIdVersionsByVersionNumber = <ThrowOnError extends boolean = false>(options: Options<GetMentorDocumentsByIdVersionsByVersionNumberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMentorDocumentsByIdVersionsByVersionNumberResponses, GetMentorDocumentsByIdVersionsByVersionNumberErrors, ThrowOnError>({
        url: '/mentor/documents/{id}/versions/{versionNumber}',
        ...options
    });
};

/**
 * Get mentor chat thread detail
 */
export const getMentorThreadsByThreadId = <ThrowOnError extends boolean = false>(options: Options<GetMentorThreadsByThreadIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMentorThreadsByThreadIdResponses, GetMentorThreadsByThreadIdErrors, ThrowOnError>({
        url: '/mentor/threads/{threadId}',
        ...options
    });
};

export const getMetaData = <ThrowOnError extends boolean = false>(options?: Options<GetMetaDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMetaDataResponses, unknown, ThrowOnError>({
        url: '/meta',
        ...options
    });
};

export const getContributors = <ThrowOnError extends boolean = false>(options?: Options<GetContributorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetContributorsResponses, unknown, ThrowOnError>({
        url: '/meta/contributors',
        ...options
    });
};

export const getAllTeams = <ThrowOnError extends boolean = false>(options?: Options<GetAllTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllTeamsResponses, unknown, ThrowOnError>({
        url: '/team',
        ...options
    });
};

export const updateTeamVisibility = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamVisibilityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTeamVisibilityResponses, unknown, ThrowOnError>({
        url: '/team/{id}/visibility',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserResponses, unknown, ThrowOnError>({
        url: '/user',
        ...options
    });
};

export const getUserSettings = <ThrowOnError extends boolean = false>(options?: Options<GetUserSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSettingsResponses, unknown, ThrowOnError>({
        url: '/user/settings',
        ...options
    });
};

export const updateUserSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateUserSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateUserSettingsResponses, unknown, ThrowOnError>({
        url: '/user/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUserProfile = <ThrowOnError extends boolean = false>(options: Options<GetUserProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserProfileResponses, unknown, ThrowOnError>({
        url: '/user/{login}/profile',
        ...options
    });
};

export const resetAndRecalculateLeagues = <ThrowOnError extends boolean = false>(options?: Options<ResetAndRecalculateLeaguesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ResetAndRecalculateLeaguesResponses, unknown, ThrowOnError>({
        url: '/workspace/league/reset',
        ...options
    });
};

export const getRepositoriesToMonitor = <ThrowOnError extends boolean = false>(options?: Options<GetRepositoriesToMonitorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRepositoriesToMonitorResponses, unknown, ThrowOnError>({
        url: '/workspace/repositories',
        ...options
    });
};

export const removeRepositoryToMonitor = <ThrowOnError extends boolean = false>(options: Options<RemoveRepositoryToMonitorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveRepositoryToMonitorResponses, unknown, ThrowOnError>({
        url: '/workspace/repositories/{owner}/{name}',
        ...options
    });
};

export const addRepositoryToMonitor = <ThrowOnError extends boolean = false>(options: Options<AddRepositoryToMonitorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddRepositoryToMonitorResponses, unknown, ThrowOnError>({
        url: '/workspace/repositories/{owner}/{name}',
        ...options
    });
};

export const removeLabelFromTeam = <ThrowOnError extends boolean = false>(options: Options<RemoveLabelFromTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveLabelFromTeamResponses, unknown, ThrowOnError>({
        url: '/workspace/team/{teamId}/label/{labelId}',
        ...options
    });
};

export const addLabelToTeam = <ThrowOnError extends boolean = false>(options: Options<AddLabelToTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddLabelToTeamResponses, unknown, ThrowOnError>({
        url: '/workspace/team/{teamId}/label/{repositoryId}/{label}',
        ...options
    });
};

export const getUsersWithTeams = <ThrowOnError extends boolean = false>(options?: Options<GetUsersWithTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersWithTeamsResponses, unknown, ThrowOnError>({
        url: '/workspace/users',
        ...options
    });
};