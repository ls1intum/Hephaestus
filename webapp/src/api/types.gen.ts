// This file is auto-generated by @hey-api/openapi-ts

export type Activity = {
    pullRequests: Array<PullRequestWithBadPractices>;
};

export type BadPractice = {
    description: string;
    status: 'Good Practice' | 'Fixed' | 'Critical Issue' | 'Normal Issue' | 'Minor Issue' | "Won't Fix" | 'Wrong';
    title: string;
};

export type BadPracticeFeedback = {
    explanation: string;
    type: string;
};

export type BadPracticeResult = {
    bad_practice_summary: string;
    bad_practices: Array<BadPractice>;
};

export type ChatMessageVote = {
    createdAt: Date;
    isUpvoted: boolean;
    messageId: string;
    updatedAt: Date;
};

export type Contributor = {
    avatarUrl: string;
    contributions?: number;
    htmlUrl: string;
    id: number;
    login: string;
    name: string;
};

export type CreateDocumentRequest = {
    content: string;
    kind: DocumentKind;
    title: string;
};

export type DetectorRequest = {
    bad_practice_summary: string;
    bad_practices: Array<BadPractice>;
    description: string;
    lifecycle_state: string;
    pull_request_number: number;
    pull_request_template: string;
    repository_name: string;
    title: string;
};

export type DetectorResponse = BadPracticeResult & {
    trace_id: string;
};

export type Document = {
    content: string;
    createdAt: Date;
    id: string;
    kind: DocumentKind;
    title: string;
    userId: number;
    versionNumber: number;
};

export type DocumentKind = 'text';

export type DocumentSummary = {
    createdAt: Date;
    id: string;
    kind: DocumentKind;
    title: string;
    userId: number;
};

export type HealthCheck = {
    /**
     * Health status
     */
    status: 'OK';
};

export type InsertTask = {
    done?: boolean;
    name: string;
};

export type LabelInfo = {
    color: string;
    id: number;
    name: string;
    repository?: RepositoryInfo;
};

export type LeaderboardEntry = {
    numberOfApprovals: number;
    numberOfChangeRequests: number;
    numberOfCodeComments: number;
    numberOfComments: number;
    numberOfReviewedPRs: number;
    numberOfUnknowns: number;
    rank: number;
    reviewedPullRequests: Array<PullRequestInfo>;
    score: number;
    user: UserInfo;
};

export type LeagueChange = {
    leaguePointsChange: number;
    login: string;
};

export type MetaData = {
    scheduledDay: string;
    scheduledTime: string;
    teams: Array<TeamInfo>;
};

export type PatchTask = {
    done?: boolean;
    name?: string;
};

export type PoemRequest = {
    /**
     * Optional poem style
     */
    style?: string;
    /**
     * Topic of the poem
     */
    topic: string;
};

export type PullRequestBadPractice = {
    description: string;
    id: number;
    state: 'GOOD_PRACTICE' | 'FIXED' | 'CRITICAL_ISSUE' | 'NORMAL_ISSUE' | 'MINOR_ISSUE' | 'WONT_FIX' | 'WRONG';
    title: string;
};

export type PullRequestBaseInfo = {
    htmlUrl: string;
    id: number;
    isDraft: boolean;
    isMerged: boolean;
    number: number;
    repository?: RepositoryInfo;
    state: 'OPEN' | 'CLOSED';
    title: string;
};

export type PullRequestInfo = {
    additions: number;
    assignees?: Array<UserInfo>;
    author?: UserInfo;
    closedAt?: Date;
    commentsCount: number;
    createdAt?: Date;
    deletions: number;
    htmlUrl: string;
    id: number;
    isDraft: boolean;
    isMerged: boolean;
    labels?: Array<LabelInfo>;
    mergedAt?: Date;
    number: number;
    repository?: RepositoryInfo;
    state: 'OPEN' | 'CLOSED';
    title: string;
    updatedAt?: Date;
};

export type PullRequestReviewInfo = {
    author?: UserInfo;
    codeComments: number;
    htmlUrl: string;
    id: number;
    isDismissed: boolean;
    pullRequest?: PullRequestBaseInfo;
    score: number;
    state: 'COMMENTED' | 'APPROVED' | 'CHANGES_REQUESTED' | 'UNKNOWN';
    submittedAt?: Date;
};

export type PullRequestWithBadPractices = {
    additions: number;
    badPracticeSummary: string;
    badPractices: Array<PullRequestBadPractice>;
    createdAt: Date;
    deletions: number;
    htmlUrl: string;
    id: number;
    isDraft: boolean;
    isMerged: boolean;
    labels: Array<LabelInfo>;
    number: number;
    oldBadPractices: Array<PullRequestBadPractice>;
    repository: RepositoryInfo;
    state: 'OPEN' | 'CLOSED';
    title: string;
    updatedAt: Date;
};

export type RepositoryInfo = {
    description?: string;
    htmlUrl: string;
    id: number;
    labels?: Array<LabelInfo>;
    name: string;
    nameWithOwner: string;
};

export type StreamAbortPart = {
    type: 'abort';
};

export type StreamDataPart = {
    data?: unknown;
    id?: string;
    transient?: boolean;
    type: string;
};

export type StreamErrorPart = {
    errorText: string;
    type: 'error';
};

export type StreamFilePart = {
    mediaType: string;
    providerMetadata?: unknown;
    type: 'file';
    url: string;
};

export type StreamFinishPart = {
    messageMetadata?: unknown;
    type: 'finish';
};

export type StreamMessageMetadataPart = {
    messageMetadata?: unknown;
    type: 'message-metadata';
};

export type StreamReasoningDeltaPart = {
    delta: string;
    id: string;
    providerMetadata?: unknown;
    type: 'reasoning-delta';
};

export type StreamReasoningEndPart = {
    id: string;
    providerMetadata?: unknown;
    type: 'reasoning-end';
};

export type StreamReasoningStartPart = {
    id: string;
    providerMetadata?: unknown;
    type: 'reasoning-start';
};

export type StreamSourceDocumentPart = {
    filename?: string;
    mediaType: string;
    providerMetadata?: unknown;
    sourceId: string;
    title: string;
    type: 'source-document';
};

export type StreamSourceUrlPart = {
    providerMetadata?: unknown;
    sourceId: string;
    title?: string;
    type: 'source-url';
    url: string;
};

export type StreamStartPart = {
    messageId?: string;
    messageMetadata?: unknown;
    type: 'start';
};

export type StreamStepFinishPart = {
    type: 'finish-step';
};

export type StreamStepStartPart = {
    type: 'start-step';
};

export type StreamTextDeltaPart = {
    delta: string;
    id: string;
    providerMetadata?: unknown;
    type: 'text-delta';
};

export type StreamTextEndPart = {
    id: string;
    providerMetadata?: unknown;
    type: 'text-end';
};

export type StreamTextStartPart = {
    id: string;
    providerMetadata?: unknown;
    type: 'text-start';
};

export type StreamToolInputAvailablePart = {
    dynamic?: boolean;
    input?: unknown;
    providerExecuted?: boolean;
    providerMetadata?: unknown;
    toolCallId: string;
    toolName: string;
    type: 'tool-input-available';
};

export type StreamToolInputDeltaPart = {
    inputTextDelta: string;
    toolCallId: string;
    type: 'tool-input-delta';
};

export type StreamToolInputErrorPart = {
    dynamic?: boolean;
    errorText: string;
    input?: unknown;
    providerExecuted?: boolean;
    providerMetadata?: unknown;
    toolCallId: string;
    toolName: string;
    type: 'tool-input-error';
};

export type StreamToolInputStartPart = {
    dynamic?: boolean;
    providerExecuted?: boolean;
    toolCallId: string;
    toolName: string;
    type: 'tool-input-start';
};

export type StreamToolOutputAvailablePart = {
    dynamic?: boolean;
    output?: unknown;
    providerExecuted?: boolean;
    toolCallId: string;
    type: 'tool-output-available';
};

export type StreamToolOutputErrorPart = {
    dynamic?: boolean;
    errorText: string;
    providerExecuted?: boolean;
    toolCallId: string;
    type: 'tool-output-error';
};

export type Task = {
    done?: boolean;
    id: number;
    name: string;
};

export type TeamInfo = {
    description?: string;
    hidden: boolean;
    htmlUrl?: string;
    id: number;
    labels: Array<LabelInfo>;
    members: Array<UserInfo>;
    membershipCount: number;
    name: string;
    organization?: string;
    parentId?: number;
    privacy?: 'SECRET' | 'CLOSED';
    repoPermissionCount: number;
    repositories: Array<RepositoryInfo>;
};

export type UserInfo = {
    avatarUrl: string;
    email?: string;
    htmlUrl: string;
    id: number;
    leaguePoints?: number;
    login: string;
    name: string;
};

export type UserProfile = {
    contributedRepositories: Array<RepositoryInfo>;
    firstContribution: Date;
    openPullRequests?: Array<PullRequestInfo>;
    reviewActivity?: Array<PullRequestReviewInfo>;
    userInfo: UserInfo;
};

export type UserSettings = {
    receiveNotifications?: boolean;
};

export type UserTeams = {
    email?: string;
    id: number;
    login: string;
    name: string;
    teams: Array<TeamInfo>;
    url: string;
};

export type VoteMessageRequest = {
    isUpvoted: boolean;
};

export type ProvideFeedbackForBadPracticeData = {
    body: BadPracticeFeedback;
    path: {
        badPracticeId: number;
    };
    query?: never;
    url: '/activity/badpractice/{badPracticeId}/feedback';
};

export type ProvideFeedbackForBadPracticeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ResolveBadPracticeData = {
    body?: never;
    path: {
        badPracticeId: number;
    };
    query: {
        state: 'GOOD_PRACTICE' | 'FIXED' | 'CRITICAL_ISSUE' | 'NORMAL_ISSUE' | 'MINOR_ISSUE' | 'WONT_FIX' | 'WRONG';
    };
    url: '/activity/badpractice/{badPracticeId}/resolve';
};

export type ResolveBadPracticeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DetectBadPracticesForPullRequestData = {
    body?: never;
    path: {
        pullRequestId: number;
    };
    query?: never;
    url: '/activity/pullrequest/{pullRequestId}/badpractices';
};

export type DetectBadPracticesForPullRequestResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DetectBadPracticesByUserData = {
    body?: never;
    path: {
        login: string;
    };
    query?: never;
    url: '/activity/user/{login}/badpractices';
};

export type DetectBadPracticesByUserResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetActivityByUserData = {
    body?: never;
    path: {
        login: string;
    };
    query?: never;
    url: '/activity/{login}';
};

export type GetActivityByUserResponses = {
    /**
     * OK
     */
    200: Activity;
};

export type GetActivityByUserResponse = GetActivityByUserResponses[keyof GetActivityByUserResponses];

export type GetLeaderboardData = {
    body?: never;
    path?: never;
    query: {
        after: Date;
        before: Date;
        team?: string;
        sort?: 'SCORE' | 'LEAGUE_POINTS';
    };
    url: '/leaderboard';
};

export type GetLeaderboardResponses = {
    /**
     * OK
     */
    200: Array<LeaderboardEntry>;
};

export type GetLeaderboardResponse = GetLeaderboardResponses[keyof GetLeaderboardResponses];

export type GetUserLeagueStatsData = {
    body: LeaderboardEntry;
    path?: never;
    query: {
        login: string;
    };
    url: '/leaderboard';
};

export type GetUserLeagueStatsResponses = {
    /**
     * OK
     */
    200: LeagueChange;
};

export type GetUserLeagueStatsResponse = GetUserLeagueStatsResponses[keyof GetUserLeagueStatsResponses];

export type PostMentorChatData = {
    /**
     * Chat request body
     */
    body: {
        id: string;
        message: {
            id: string;
            parts: Array<{
                text: string;
                type: 'text';
            } | {
                mediaType: 'image/jpeg' | 'image/png';
                name: string;
                type: 'file';
                url: string;
            }>;
            role: 'user';
        };
        previousMessageId?: string;
    };
    path?: never;
    query?: never;
    url: '/mentor/chat';
};

export type PostMentorChatResponses = {
    /**
     * Event stream of chat updates.
     */
    200: StreamTextStartPart | StreamTextDeltaPart | StreamTextEndPart | StreamErrorPart | StreamToolInputStartPart | StreamToolInputDeltaPart | StreamToolInputAvailablePart | StreamToolInputErrorPart | StreamToolOutputAvailablePart | StreamToolOutputErrorPart | StreamReasoningStartPart | StreamReasoningDeltaPart | StreamReasoningEndPart | StreamSourceUrlPart | StreamSourceDocumentPart | StreamFilePart | StreamDataPart | StreamStepStartPart | StreamStepFinishPart | StreamStartPart | StreamFinishPart | StreamMessageMetadataPart | StreamAbortPart;
};

export type PostMentorChatResponse = PostMentorChatResponses[keyof PostMentorChatResponses];

export type PostMentorChatMessagesByMessageIdVoteData = {
    /**
     * Vote request body
     */
    body: VoteMessageRequest;
    path: {
        messageId: string;
    };
    query?: never;
    url: '/mentor/chat/messages/{messageId}/vote';
};

export type PostMentorChatMessagesByMessageIdVoteErrors = {
    /**
     * Message not found
     */
    404: {
        error: string;
    };
    /**
     * Internal error
     */
    500: {
        error: string;
    };
};

export type PostMentorChatMessagesByMessageIdVoteError = PostMentorChatMessagesByMessageIdVoteErrors[keyof PostMentorChatMessagesByMessageIdVoteErrors];

export type PostMentorChatMessagesByMessageIdVoteResponses = {
    /**
     * Vote recorded
     */
    200: ChatMessageVote;
};

export type PostMentorChatMessagesByMessageIdVoteResponse = PostMentorChatMessagesByMessageIdVoteResponses[keyof PostMentorChatMessagesByMessageIdVoteResponses];

export type GetMentorDocumentsData = {
    body?: never;
    path?: never;
    query?: {
        page?: number | null;
        size?: number;
    };
    url: '/mentor/documents';
};

export type GetMentorDocumentsErrors = {
    /**
     * Internal error
     */
    500: {
        error: string;
    };
};

export type GetMentorDocumentsError = GetMentorDocumentsErrors[keyof GetMentorDocumentsErrors];

export type GetMentorDocumentsResponses = {
    /**
     * Document summaries
     */
    200: Array<DocumentSummary>;
};

export type GetMentorDocumentsResponse = GetMentorDocumentsResponses[keyof GetMentorDocumentsResponses];

export type PostMentorDocumentsData = {
    /**
     * Create document
     */
    body: CreateDocumentRequest;
    path?: never;
    query?: never;
    url: '/mentor/documents';
};

export type PostMentorDocumentsErrors = {
    /**
     * Internal error
     */
    500: {
        error: string;
    };
};

export type PostMentorDocumentsError = PostMentorDocumentsErrors[keyof PostMentorDocumentsErrors];

export type PostMentorDocumentsResponses = {
    /**
     * Created document
     */
    201: Document;
};

export type PostMentorDocumentsResponse = PostMentorDocumentsResponses[keyof PostMentorDocumentsResponses];

export type DeleteMentorDocumentsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/mentor/documents/{id}';
};

export type DeleteMentorDocumentsByIdErrors = {
    /**
     * Not found
     */
    404: {
        error: string;
    };
    /**
     * Internal error
     */
    500: {
        error: string;
    };
};

export type DeleteMentorDocumentsByIdError = DeleteMentorDocumentsByIdErrors[keyof DeleteMentorDocumentsByIdErrors];

export type DeleteMentorDocumentsByIdResponses = {
    /**
     * Deleted
     */
    204: void;
};

export type DeleteMentorDocumentsByIdResponse = DeleteMentorDocumentsByIdResponses[keyof DeleteMentorDocumentsByIdResponses];

export type GetMentorDocumentsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/mentor/documents/{id}';
};

export type GetMentorDocumentsByIdErrors = {
    /**
     * Not found
     */
    404: {
        error: string;
    };
    /**
     * Internal error
     */
    500: {
        error: string;
    };
};

export type GetMentorDocumentsByIdError = GetMentorDocumentsByIdErrors[keyof GetMentorDocumentsByIdErrors];

export type GetMentorDocumentsByIdResponses = {
    /**
     * Document
     */
    200: Document;
};

export type GetMentorDocumentsByIdResponse = GetMentorDocumentsByIdResponses[keyof GetMentorDocumentsByIdResponses];

export type PutMentorDocumentsByIdData = {
    /**
     * Update document
     */
    body: CreateDocumentRequest;
    path: {
        id: string;
    };
    query?: never;
    url: '/mentor/documents/{id}';
};

export type PutMentorDocumentsByIdErrors = {
    /**
     * Not found
     */
    404: {
        error: string;
    };
    /**
     * Internal error
     */
    500: {
        error: string;
    };
};

export type PutMentorDocumentsByIdError = PutMentorDocumentsByIdErrors[keyof PutMentorDocumentsByIdErrors];

export type PutMentorDocumentsByIdResponses = {
    /**
     * Updated document
     */
    200: Document;
};

export type PutMentorDocumentsByIdResponse = PutMentorDocumentsByIdResponses[keyof PutMentorDocumentsByIdResponses];

export type DeleteMentorDocumentsByIdVersionsData = {
    body?: never;
    path: {
        id: string;
    };
    query: {
        after: Date;
    };
    url: '/mentor/documents/{id}/versions';
};

export type DeleteMentorDocumentsByIdVersionsErrors = {
    /**
     * Not found
     */
    404: {
        error: string;
    };
    /**
     * Internal error
     */
    500: {
        error: string;
    };
};

export type DeleteMentorDocumentsByIdVersionsError = DeleteMentorDocumentsByIdVersionsErrors[keyof DeleteMentorDocumentsByIdVersionsErrors];

export type DeleteMentorDocumentsByIdVersionsResponses = {
    /**
     * Deleted versions
     */
    200: Array<Document>;
};

export type DeleteMentorDocumentsByIdVersionsResponse = DeleteMentorDocumentsByIdVersionsResponses[keyof DeleteMentorDocumentsByIdVersionsResponses];

export type GetMentorDocumentsByIdVersionsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        page?: number | null;
        size?: number;
    };
    url: '/mentor/documents/{id}/versions';
};

export type GetMentorDocumentsByIdVersionsErrors = {
    /**
     * Not found
     */
    404: {
        error: string;
    };
    /**
     * Internal error
     */
    500: {
        error: string;
    };
};

export type GetMentorDocumentsByIdVersionsError = GetMentorDocumentsByIdVersionsErrors[keyof GetMentorDocumentsByIdVersionsErrors];

export type GetMentorDocumentsByIdVersionsResponses = {
    /**
     * Document versions
     */
    200: Array<Document>;
};

export type GetMentorDocumentsByIdVersionsResponse = GetMentorDocumentsByIdVersionsResponses[keyof GetMentorDocumentsByIdVersionsResponses];

export type GetMentorDocumentsByIdVersionsByVersionNumberData = {
    body?: never;
    path: {
        id: string;
        versionNumber?: number | null;
    };
    query?: never;
    url: '/mentor/documents/{id}/versions/{versionNumber}';
};

export type GetMentorDocumentsByIdVersionsByVersionNumberErrors = {
    /**
     * Not found
     */
    404: {
        error: string;
    };
    /**
     * Internal error
     */
    500: {
        error: string;
    };
};

export type GetMentorDocumentsByIdVersionsByVersionNumberError = GetMentorDocumentsByIdVersionsByVersionNumberErrors[keyof GetMentorDocumentsByIdVersionsByVersionNumberErrors];

export type GetMentorDocumentsByIdVersionsByVersionNumberResponses = {
    /**
     * Document
     */
    200: Document;
};

export type GetMentorDocumentsByIdVersionsByVersionNumberResponse = GetMentorDocumentsByIdVersionsByVersionNumberResponses[keyof GetMentorDocumentsByIdVersionsByVersionNumberResponses];

export type GetMentorThreadsByThreadIdData = {
    body?: never;
    path: {
        threadId: string;
    };
    query?: never;
    url: '/mentor/threads/{threadId}';
};

export type GetMentorThreadsByThreadIdErrors = {
    /**
     * Thread not found
     */
    404: {
        error: string;
    };
    /**
     * Internal error
     */
    500: {
        error: string;
    };
};

export type GetMentorThreadsByThreadIdError = GetMentorThreadsByThreadIdErrors[keyof GetMentorThreadsByThreadIdErrors];

export type GetMentorThreadsByThreadIdResponses = {
    /**
     * Thread detail with messages
     */
    200: {
        id: string;
        messages: Array<{
            createdAt?: Date;
            id: string;
            parentMessageId?: string | null;
            parts: Array<{
                text: string;
                type: 'text';
            } | {
                mediaType: 'image/jpeg' | 'image/png';
                name?: string;
                type: 'file';
                url: string;
            }>;
            role: 'system' | 'user' | 'assistant';
        }>;
        selectedLeafMessageId?: string | null;
        title?: string | null;
    };
};

export type GetMentorThreadsByThreadIdResponse = GetMentorThreadsByThreadIdResponses[keyof GetMentorThreadsByThreadIdResponses];

export type GetMetaDataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/meta';
};

export type GetMetaDataResponses = {
    /**
     * OK
     */
    200: MetaData;
};

export type GetMetaDataResponse = GetMetaDataResponses[keyof GetMetaDataResponses];

export type GetContributorsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/meta/contributors';
};

export type GetContributorsResponses = {
    /**
     * OK
     */
    200: Array<Contributor>;
};

export type GetContributorsResponse = GetContributorsResponses[keyof GetContributorsResponses];

export type GetAllTeamsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/team';
};

export type GetAllTeamsResponses = {
    /**
     * OK
     */
    200: Array<TeamInfo>;
};

export type GetAllTeamsResponse = GetAllTeamsResponses[keyof GetAllTeamsResponses];

export type UpdateTeamVisibilityData = {
    body?: boolean;
    path: {
        id: number;
    };
    query?: {
        hidden?: boolean;
    };
    url: '/team/{id}/visibility';
};

export type UpdateTeamVisibilityResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user';
};

export type DeleteUserResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUserSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/settings';
};

export type GetUserSettingsResponses = {
    /**
     * OK
     */
    200: UserSettings;
};

export type GetUserSettingsResponse = GetUserSettingsResponses[keyof GetUserSettingsResponses];

export type UpdateUserSettingsData = {
    body: UserSettings;
    path?: never;
    query?: never;
    url: '/user/settings';
};

export type UpdateUserSettingsResponses = {
    /**
     * OK
     */
    200: UserSettings;
};

export type UpdateUserSettingsResponse = UpdateUserSettingsResponses[keyof UpdateUserSettingsResponses];

export type GetUserProfileData = {
    body?: never;
    path: {
        login: string;
    };
    query?: never;
    url: '/user/{login}/profile';
};

export type GetUserProfileResponses = {
    /**
     * OK
     */
    200: UserProfile;
};

export type GetUserProfileResponse = GetUserProfileResponses[keyof GetUserProfileResponses];

export type ResetAndRecalculateLeaguesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspace/league/reset';
};

export type ResetAndRecalculateLeaguesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetRepositoriesToMonitorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspace/repositories';
};

export type GetRepositoriesToMonitorResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type GetRepositoriesToMonitorResponse = GetRepositoriesToMonitorResponses[keyof GetRepositoriesToMonitorResponses];

export type RemoveRepositoryToMonitorData = {
    body?: never;
    path: {
        owner: string;
        name: string;
    };
    query?: never;
    url: '/workspace/repositories/{owner}/{name}';
};

export type RemoveRepositoryToMonitorResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type AddRepositoryToMonitorData = {
    body?: never;
    path: {
        owner: string;
        name: string;
    };
    query?: never;
    url: '/workspace/repositories/{owner}/{name}';
};

export type AddRepositoryToMonitorResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RemoveLabelFromTeamData = {
    body?: never;
    path: {
        teamId: number;
        labelId: number;
    };
    query?: never;
    url: '/workspace/team/{teamId}/label/{labelId}';
};

export type RemoveLabelFromTeamResponses = {
    /**
     * OK
     */
    200: TeamInfo;
};

export type RemoveLabelFromTeamResponse = RemoveLabelFromTeamResponses[keyof RemoveLabelFromTeamResponses];

export type AddLabelToTeamData = {
    body?: never;
    path: {
        teamId: number;
        repositoryId: number;
        label: string;
    };
    query?: never;
    url: '/workspace/team/{teamId}/label/{repositoryId}/{label}';
};

export type AddLabelToTeamResponses = {
    /**
     * OK
     */
    200: TeamInfo;
};

export type AddLabelToTeamResponse = AddLabelToTeamResponses[keyof AddLabelToTeamResponses];

export type GetUsersWithTeamsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspace/users';
};

export type GetUsersWithTeamsResponses = {
    /**
     * OK
     */
    200: Array<UserTeams>;
};

export type GetUsersWithTeamsResponse = GetUsersWithTeamsResponses[keyof GetUsersWithTeamsResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};