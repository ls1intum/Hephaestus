name: CI/CD

on:
  workflow_dispatch:
  push:
    branches: ["develop"]
    tags: ["v*"]
  merge_group:
  pull_request:
    branches: ["**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Skip duplicate runs for efficiency
  pre-job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    timeout-minutes: 15
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          do_not_skip: '["workflow_dispatch"]'

  # Lint and format check - fast feedback
  lint:
    runs-on: ubuntu-latest
    needs: [pre-job]
    if: needs.pre-job.outputs.should_skip != 'true'
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      # Node.js setup for webapp and formatting
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci

      # Java formatting
      - name: Check Java code formatting
        run: npm run format:java:check
        continue-on-error: true

      # React/TypeScript linting
      - name: Lint webapp
        working-directory: ./webapp-react
        run: |
          npm ci
          npm run check
          npx tsc --noEmit

      # Python linting
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: server/intelligence-service/.venv
          key: venv-${{ runner.os }}-3.13-${{ hashFiles('server/intelligence-service/poetry.lock') }}

      - name: Install Python dependencies and lint
        working-directory: server/intelligence-service
        run: |
          poetry install --no-interaction --no-root
          poetry run black --check .
          poetry run flake8 .

  # OpenAPI validation - critical for API consistency
  openapi-validation:
    runs-on: ubuntu-latest
    needs: [pre-job]
    if: needs.pre-job.outputs.should_skip != 'true'
    timeout-minutes: 10
    outputs:
      specs_changed: ${{ steps.check_changes.outputs.specs_changed }}
      clients_changed: ${{ steps.check_changes.outputs.clients_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          persist-credentials: false
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Python setup for Intelligence Service
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13
          
      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Python dependencies
        working-directory: server/intelligence-service
        run: poetry install --no-interaction --no-root

      # Java setup for Application Server
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: Setup Application Server
        working-directory: server/application-server
        run: |
          mkdir -p ./keycloak-data
          chmod -R 755 ./keycloak-data

      # Generate all OpenAPI specs and clients
      - name: Generate OpenAPI specs and clients
        run: |
          npm run generate:api

      # Check for changes
      - name: Check for OpenAPI changes
        id: check_changes
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "specs_changed=false" >> $GITHUB_OUTPUT
            echo "clients_changed=false" >> $GITHUB_OUTPUT
          else
            echo "specs_changed=true" >> $GITHUB_OUTPUT
            echo "clients_changed=true" >> $GITHUB_OUTPUT
            
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'autocommit-openapi') }}" == "true" ]]; then
              echo "Auto-committing OpenAPI changes..."
              git config --local user.name "github-actions[bot]"
              git config --local user.email "github-actions[bot]@users.noreply.github.com"
              git commit -m "chore: update OpenAPI specs and clients"
              git push
            else
              echo "## ⚠️ OpenAPI Changes Detected" >> $GITHUB_STEP_SUMMARY
              echo "Add the 'autocommit-openapi' label to auto-commit these changes." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi

  # Database schema validation
  database-validation:
    runs-on: ubuntu-latest
    needs: [pre-job]
    if: needs.pre-job.outputs.should_skip != 'true'
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: hephaestus
          POSTGRES_PASSWORD: root
          POSTGRES_USER: root
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: Build Application Server
        working-directory: server/application-server
        run: mvn compile -DskipTests

      - name: Validate schema consistency
        env:
          CI: true
        run: |
          scripts/db-utils.sh draft-changelog
          if [ -f "server/application-server/src/main/resources/db/changelog_new.xml" ]; then
            echo "## ⚠️ Schema Drift Detected" >> $GITHUB_STEP_SUMMARY
            echo "JPA entities don't match committed migrations. Run 'npm run db:draft-changelog' locally." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Application server tests
  java-tests:
    runs-on: ubuntu-latest
    needs: [pre-job, lint]
    if: needs.pre-job.outputs.should_skip != 'true'
    timeout-minutes: 20
    strategy:
      matrix:
        test-type: [unit, architecture, integration]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run ${{ matrix.test-type }} tests
        working-directory: server/application-server
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              mvn test -Dgroups="unit" -Dtest="!**/ArchitectureTest" -T 1C --batch-mode --fail-at-end
              ;;
            "architecture")
              mvn test -Dtest="**/ArchitectureTest" --batch-mode --fail-at-end
              ;;
            "integration")
              mvn test -Dgroups="integration" -T 1C --batch-mode --fail-at-end
              ;;
          esac
        continue-on-error: true

      - name: Upload test results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: ${{ matrix.test-type }} Test Results
          path: server/application-server/target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false

  # Webapp tests and Storybook
  webapp-tests:
    runs-on: ubuntu-latest
    needs: [pre-job, lint]
    if: needs.pre-job.outputs.should_skip != 'true'
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: Install dependencies
        working-directory: ./webapp-react
        run: npm ci

      # Run tests if they exist
      - name: Run webapp tests
        working-directory: ./webapp-react
        run: |
          if npm run test --if-present 2>/dev/null; then
            npm run test
          else
            echo "No tests configured"
          fi

      # Chromatic for visual testing
      - name: Run Chromatic
        id: chromatic
        uses: chromaui/action@latest
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          autoAcceptChanges: "develop"
          workingDir: webapp-react
          skip: "dependabot/**"

      - name: Publish Summary
        run: |
          echo "| Results |  |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Results | ${{ steps.chromatic.outputs.buildUrl }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Storybook Preview | ${{ steps.chromatic.outputs.storybookUrl }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Component Count | ${{ steps.chromatic.outputs.componentCount }} |" >> $GITHUB_STEP_SUMMARY

  # Docker build test - ensure containers build successfully
  test-docker-build:
    runs-on: ubuntu-latest
    needs: [pre-job, lint]
    if: needs.pre-job.outputs.should_skip != 'true'
    timeout-minutes: 20
    strategy:
      matrix:
        component: 
          - { name: "Webapp", tag: "webapp", dockerfile: "./webapp-react/Dockerfile", context: "./webapp-react" }
          - { name: "Application Server", tag: "application-server", dockerfile: "./server/application-server/Dockerfile", context: "./server/application-server" }
          - { name: "Intelligence Service", tag: "intelligence-service", dockerfile: "./server/intelligence-service/Dockerfile", context: "./server/intelligence-service" }
          - { name: "Webhook Ingest", tag: "webhook-ingest", dockerfile: "./server/webhook-ingest/Dockerfile", context: "./server/webhook-ingest" }
    steps:
      - uses: actions/checkout@v4
      
      - name: Build ${{ matrix.component.name }} Docker image
        run: |
          docker build -f ${{ matrix.component.dockerfile }} ${{ matrix.component.context }} -t test-${{ matrix.component.tag }}

  # Aggregate job for branch protection
  all-ci-passed:
    runs-on: ubuntu-latest
    needs: [lint, openapi-validation, database-validation, java-tests, webapp-tests, test-docker-build]
    if: always()
    steps:
      - name: Check all jobs
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

  # Production Docker builds and pushes
  push-docker-images:
    needs: all-ci-passed
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        component: 
          - { name: "webapp", dockerfile: "./webapp-react/Dockerfile", context: "./webapp-react", image: "ls1intum/hephaestus/webapp-react" }
          - { name: "application-server", dockerfile: "./server/application-server/Dockerfile", context: "./server/application-server", image: "ls1intum/hephaestus/application-server" }
          - { name: "intelligence-service", dockerfile: "./server/intelligence-service/Dockerfile", context: "./server/intelligence-service", image: "ls1intum/hephaestus/intelligence-service" }
          - { name: "webhook-ingest", dockerfile: "./server/webhook-ingest/Dockerfile", context: "./server/webhook-ingest", image: "ls1intum/hephaestus/webhook-ingest" }
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.component.image }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component.context }}
          file: ${{ matrix.component.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
