name: CI/CD Enterprise Pipeline

on:
  workflow_dispatch:
  push:
    branches: ["develop", "main"]
    tags: ["v*"]
  merge_group:
  pull_request:
    branches: ["**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  # Global pipeline configuration
  MAVEN_OPTS: -Xmx2048m -XX:+UseParallelGC
  NODE_VERSION: 22
  PYTHON_VERSION: 3.13
  JAVA_VERSION: 21

jobs:
  # Pipeline orchestration and duplicate detection
  pipeline-setup:
    uses: ./.github/workflows/ci-pipeline-setup.yml
    secrets: inherit

  # Quality gates workflow call
  quality-gates:
    uses: ./.github/workflows/ci-quality-gates.yml
    needs: [pipeline-setup]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    secrets: inherit
    with:
      should_skip: ${{ needs.pipeline-setup.outputs.should_skip }}

  # Comprehensive security scanning
  security-scan:
    uses: ./.github/workflows/ci-security-scan.yml
    needs: [pipeline-setup]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    secrets: inherit
    with:
      should_skip: ${{ needs.pipeline-setup.outputs.should_skip }}

  # Intelligent test execution matrix
  tests:
    runs-on: "ubuntu-latest"
    needs: [pipeline-setup, quality-gates]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        test-type:
          [
            java-unit,
            java-integration,
            java-architecture,
            webapp-visual,
            cross-platform,
          ]

    steps:
      - uses: actions/checkout@v4

      # Advanced caching strategy
      - name: Setup advanced caches
        uses: ./.github/actions/setup-caches
        with:
          cache-type: ${{ matrix.test-type }}
          os: ${{ runner.os }}

      # Java tests with enhanced reporting
      - name: "Java ${{ matrix.test-type }} execution"
        if: startsWith(matrix.test-type, 'java-')
        run: |
          echo "üöÄ Starting Java ${{ matrix.test-type }} tests"

          case "${{ matrix.test-type }}" in
            "java-unit")
              echo "üß™ Running unit tests for core business logic..."
              cd server/application-server
              mvn test -Dgroups="unit" -Dtest="!**/ArchitectureTest" -T 2C --batch-mode
              ;;
            "java-integration")
              echo "üîó Running integration tests with database and APIs..."
              cd server/application-server
              mvn test -Dgroups="integration" -T 2C --batch-mode
              ;;
            "java-architecture")
              echo "üèóÔ∏è Validating architecture compliance and dependencies..."
              cd server/application-server
              mvn test -Dtest="**/ArchitectureTest" --batch-mode
              ;;
          esac
          echo "‚úÖ Java ${{ matrix.test-type }} tests completed successfully"

      # Webapp tests with enhanced reporting
      - name: "Webapp ${{ matrix.test-type }} execution"
        if: startsWith(matrix.test-type, 'webapp-')
        working-directory: webapp-react
        run: |
          echo "üöÄ Starting webapp ${{ matrix.test-type }} tests"

          npm ci --prefer-offline --no-audit --progress=false

          case "${{ matrix.test-type }}" in
            "webapp-visual")
              echo "üé® Running visual regression tests with Storybook..."
              npm run chromatic
              ;;
          esac
          echo "‚úÖ Webapp ${{ matrix.test-type }} tests completed successfully"

      # Test result aggregation with enhanced reporting
      - name: Upload test results
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: "Test Results - ${{ matrix.test-type }}"
          path: "**/target/surefire-reports/*.xml,**/test-results.xml"
          reporter: java-junit
          fail-on-error: false

  # Optimized Docker builds with security scanning
  docker-build-and-scan:
    runs-on: ubuntu-latest
    needs: [pipeline-setup, tests]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    timeout-minutes: 25
    strategy:
      matrix:
        component:
          - {
              name: "webapp",
              dockerfile: "./webapp-react/Dockerfile",
              context: "./webapp-react",
            }
          - {
              name: "application-server",
              dockerfile: "./server/application-server/Dockerfile",
              context: "./server/application-server",
            }
          - {
              name: "intelligence-service",
              dockerfile: "./server/intelligence-service/Dockerfile",
              context: "./server/intelligence-service",
            }
          - {
              name: "webhook-ingest",
              dockerfile: "./server/webhook-ingest/Dockerfile",
              context: "./server/webhook-ingest",
            }
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component.context }}
          file: ${{ matrix.component.dockerfile }}
          tags: test-${{ matrix.component.name }}:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-${{ matrix.component.name }}:latest
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

  # Aggregated success gate for branch protection
  all-ci-passed:
    runs-on: ubuntu-latest
    needs:
      [
        quality-gates,
        security-scan,
        tests,
        docker-build-and-scan,
      ]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          # Check if any required job failed
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "‚ùå One or more CI jobs failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "‚ö†Ô∏è One or more CI jobs were cancelled"
            exit 1
          else
            echo "‚úÖ All CI jobs passed successfully"
          fi

  # Production Docker builds and deployment
  deploy-staging:
    needs: [all-ci-passed]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment:
      name: staging
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging with health checks
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Blue-green deployment would go here
          echo "‚úÖ Staging deployment completed"

      - name: Run smoke tests
        run: |
          echo "üß™ Running post-deployment smoke tests..."
          # Comprehensive smoke test suite would go here
          echo "‚úÖ Smoke tests passed"

  # Production deployment for tags
  deploy-production:
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: production
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Canary deployment with gradual traffic shifting would go here
          echo "‚úÖ Production deployment completed"
