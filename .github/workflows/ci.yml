name: CI/CD

on:
  workflow_dispatch:
  push:
    branches: ["develop", "main"]
    tags: ["v*"]
  merge_group:
  pull_request:
    branches: ["**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  # Global pipeline configuration
  MAVEN_OPTS: -Xmx2048m -XX:+UseParallelGC
  NODE_VERSION: 22
  PYTHON_VERSION: 3.13
  JAVA_VERSION: 21

jobs:
  # Pipeline orchestration and duplicate detection
  pipeline-setup:
    uses: ./.github/workflows/ci-pipeline-setup.yml
    secrets: inherit

  # Quality gates workflow call
  quality-gates:
    uses: ./.github/workflows/ci-quality-gates.yml
    needs: [pipeline-setup]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    secrets: inherit
    with:
      should_skip: ${{ needs.pipeline-setup.outputs.should_skip }}

  # Comprehensive security scanning
  security-scan:
    uses: ./.github/workflows/ci-security-scan.yml
    needs: [pipeline-setup]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    secrets: inherit
    with:
      should_skip: ${{ needs.pipeline-setup.outputs.should_skip }}

  # Intelligent test execution matrix
  tests:
    uses: ./.github/workflows/ci-tests.yml
    needs: [pipeline-setup, quality-gates]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    secrets: inherit
    with:
      should_skip: ${{ needs.pipeline-setup.outputs.should_skip }}

  # Docker builds with multi-arch support and security scanning
  docker-build-and-scan:
    uses: ./.github/workflows/ci-docker-build-scan.yml
    needs: [pipeline-setup, tests]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    secrets: inherit
    with:
      should_skip: ${{ needs.pipeline-setup.outputs.should_skip }}

  # Aggregated success gate for branch protection with enhanced reporting
  all-ci-passed:
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan, tests, docker-build-and-scan]
    if: always()
    steps:
      - name: Generate comprehensive CI summary
        run: |
          echo "## 🎯 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Individual job status reporting
          echo "### Job Status Overview:" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Gates**: ${{ needs.quality-gates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Build & Scan**: ${{ needs.docker-build-and-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Docker images built
          if [[ "${{ needs.docker-build-and-scan.outputs.images_built }}" != "" ]]; then
            echo "### 🐳 Images Built:" >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.docker-build-and-scan.outputs.images_built }}" | tr ',' '\n' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check all jobs and determine overall status
        run: |
          # Check if any required job failed
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "### ❌ CI Pipeline Result: FAILURE" >> $GITHUB_STEP_SUMMARY
            echo "One or more critical CI jobs failed. Review the individual job logs for details." >> $GITHUB_STEP_SUMMARY
            echo "❌ One or more CI jobs failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "### ⚠️ CI Pipeline Result: CANCELLED" >> $GITHUB_STEP_SUMMARY
            echo "One or more CI jobs were cancelled. The pipeline did not complete successfully." >> $GITHUB_STEP_SUMMARY
            echo "⚠️ One or more CI jobs were cancelled"
            exit 1
          else
            echo "### ✅ CI Pipeline Result: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All CI jobs completed successfully! The code is ready for deployment." >> $GITHUB_STEP_SUMMARY
            echo "✅ All CI jobs passed successfully"
          fi

  # Deployment workflows are handled by separate deployment pipelines
  # triggered by successful CI completion
