name: CI/CD

on:
  workflow_dispatch:
  push:
    branches: ["develop", "main"]
    tags: ["v*"]
  merge_group:
  pull_request:
    branches: ["**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  # Global pipeline configuration
  MAVEN_OPTS: -Xmx2048m -XX:+UseParallelGC
  NODE_VERSION: 22
  PYTHON_VERSION: 3.13
  JAVA_VERSION: 21

jobs:
  # Pipeline orchestration and duplicate detection
  pipeline-setup:
    uses: ./.github/workflows/ci-pipeline-setup.yml
    secrets: inherit

  # Quality gates workflow call
  quality-gates:
    uses: ./.github/workflows/ci-quality-gates.yml
    needs: [pipeline-setup]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    secrets: inherit
    with:
      should_skip: ${{ needs.pipeline-setup.outputs.should_skip }}

  # Comprehensive security scanning
  security-scan:
    uses: ./.github/workflows/ci-security-scan.yml
    needs: [pipeline-setup]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    secrets: inherit
    with:
      should_skip: ${{ needs.pipeline-setup.outputs.should_skip }}

  # Intelligent test execution matrix
  tests:
    uses: ./.github/workflows/ci-tests.yml
    needs: [pipeline-setup, quality-gates]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    secrets: inherit
    with:
      should_skip: ${{ needs.pipeline-setup.outputs.should_skip }}

  # Optimized Docker builds with security scanning
  docker-build-and-scan:
    uses: ./.github/workflows/ci-docker-build-scan.yml
    needs: [pipeline-setup, tests]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    secrets: inherit
    with:
      should_skip: ${{ needs.pipeline-setup.outputs.should_skip }}

  # Aggregated success gate for branch protection
  all-ci-passed:
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan, tests, docker-build-and-scan]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          # Check if any required job failed
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "‚ùå One or more CI jobs failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "‚ö†Ô∏è One or more CI jobs were cancelled"
            exit 1
          else
            echo "‚úÖ All CI jobs passed successfully"
          fi

  # Production Docker builds and deployment
  deploy-staging:
    needs: [all-ci-passed]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment:
      name: staging
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging with health checks
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Blue-green deployment would go here
          echo "‚úÖ Staging deployment completed"

      - name: Run smoke tests
        run: |
          echo "üß™ Running post-deployment smoke tests..."
          # Comprehensive smoke test suite would go here
          echo "‚úÖ Smoke tests passed"

  # Production deployment for tags
  deploy-production:
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: production
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Canary deployment with gradual traffic shifting would go here
          echo "‚úÖ Production deployment completed"
