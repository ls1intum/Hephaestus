name: CI/CD Enterprise Pipeline

on:
  workflow_dispatch:
  push:
    branches: ["develop", "main"]
    tags: ["v*"]
  merge_group:
  pull_request:
    branches: ["**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  # Global pipeline configuration
  MAVEN_OPTS: -Xmx2048m -XX:+UseParallelGC
  NODE_VERSION: 22
  PYTHON_VERSION: 3.13
  JAVA_VERSION: 21

jobs:
  # Pipeline orchestration and duplicate detection
  pipeline-setup:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      matrix_include: ${{ steps.matrix_setup.outputs.matrix }}
      changes: ${{ steps.changes.outputs.changes }}
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          do_not_skip: '["workflow_dispatch", "schedule"]'

      - name: Detect changed components
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            webapp:
              - 'webapp-react/**'
            application-server:
              - 'server/application-server/**'
            intelligence-service:
              - 'server/intelligence-service/**'
            webhook-ingest:
              - 'server/webhook-ingest/**'
            docs:
              - 'docs/**'
            ci:
              - '.github/workflows/**'

      - name: Setup dynamic test matrix
        id: matrix_setup
        run: |
          # Create intelligent test matrix based on changes
          echo "matrix={\"include\":[{\"name\":\"Quality Gates\",\"type\":\"quality\",\"runs_if\":\"always\",\"timeout\":12},{\"name\":\"Security Scan\",\"type\":\"security\",\"runs_if\":\"always\",\"timeout\":15}]}" >> $GITHUB_OUTPUT

  # Enterprise-grade quality gates with intelligent caching and error handling
  quality-gates:
    runs-on: ubuntu-latest
    needs: [pipeline-setup]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        check: [java-format, webapp-quality, python-quality, openapi-validation]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Advanced cache setup with fallback
      - name: Setup shared caches
        uses: ./.github/actions/setup-caches
        with:
          cache-type: ${{ matrix.check }}

      # Additional cache for webapp build artifacts
      - name: Cache webapp build artifacts
        if: matrix.check == 'webapp-quality'
        uses: actions/cache@v4
        with:
          path: |
            webapp-react/dist
            webapp-react/.vite
            webapp-react/node_modules/.vite
            webapp-react/node_modules/.cache
          key: ${{ runner.os }}-webapp-build-${{ hashFiles('webapp-react/package-lock.json', 'webapp-react/vite.config.js', 'webapp-react/tsconfig.json', 'webapp-react/components.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-webapp-build-${{ hashFiles('webapp-react/package-lock.json', 'webapp-react/vite.config.js', 'webapp-react/tsconfig.json', 'webapp-react/components.json') }}-
            ${{ runner.os }}-webapp-build-

      # Java code quality and formatting
      - name: Java formatting & static analysis
        if: matrix.check == 'java-format'
        run: |
          echo "üîç Checking Java code formatting and style..."

          # Install dependencies if not cached
          if [ ! -d "node_modules" ]; then
            npm ci --prefer-offline --no-audit
          fi

          # Run Java formatting check and capture output
          echo "üé® Running Prettier formatting check..."
          npm run format:java:check 2>&1 | tee java-format-results.txt
          FORMAT_EXIT_CODE=${PIPESTATUS[0]}

          # Generate summary based on results
          if [ $FORMAT_EXIT_CODE -eq 0 ]; then
            echo "## ‚úÖ Java Code Quality Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Formatting**: All Java files follow Prettier formatting rules" >> $GITHUB_STEP_SUMMARY
            echo "- **Style Guide**: Code adheres to project style guidelines" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ All Java formatting checks passed successfully"
          else
            echo "## ‚ùå Java Code Quality Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Formatting**: Code formatting issues detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Files with formatting issues:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -E '\[warn\]' java-format-results.txt | sed 's/\[warn\] /- /' >> $GITHUB_STEP_SUMMARY || echo "- Check the logs above for details" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To fix these issues:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo 'npm run format:java:write' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Java formatting check failed"
            exit 1
          fi

      # Webapp quality checks with comprehensive validation
      - name: Webapp quality & type checking
        if: matrix.check == 'webapp-quality'
        working-directory: ./webapp-react
        run: |
          echo "üîç Running comprehensive webapp quality checks..."

          # Install dependencies if not cached
          if [ ! -d "node_modules" ]; then
            echo "üì¶ Installing dependencies..."
            npm ci --prefer-offline --no-audit --progress=false
          else
            echo "üì¶ Dependencies restored from cache"
          fi

          # Run Biome check (linting + formatting + imports)
          echo "üé® Running Biome code quality checks..."
          npm run check 2>&1 | tee biome-results.txt
          BIOME_EXIT_CODE=${PIPESTATUS[0]}

          # TypeScript compilation check
          echo "üìä Running TypeScript compilation check..."
          npx tsc --noEmit --pretty 2>&1 | tee typescript-results.txt
          TSC_EXIT_CODE=${PIPESTATUS[0]}

          # Build check to ensure everything compiles
          echo "üèóÔ∏è Running build verification..."
          npm run build 2>&1 | tee build-results.txt
          BUILD_EXIT_CODE=${PIPESTATUS[0]}

          # Package audit for security vulnerabilities
          echo "üîí Running security audit..."
          npm audit --audit-level=high --progress=false 2>&1 | tee audit-results.txt || true

          # Bundle size analysis
          echo "üìè Analyzing bundle size..."
          if [ -d "dist" ]; then
            BUNDLE_SIZE=$(du -sh dist | cut -f1)
            echo "Bundle size: $BUNDLE_SIZE"
          fi

          # Generate comprehensive summary
          echo "## ‚úÖ Webapp Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY

          if [ $BIOME_EXIT_CODE -eq 0 ]; then
            echo "| **Biome Quality** | ‚úÖ Passed | Code formatting, linting, and imports are correct |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Biome Quality** | ‚ùå Failed | Code quality issues detected |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ $TSC_EXIT_CODE -eq 0 ]; then
            echo "| **TypeScript** | ‚úÖ Passed | All type checks passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **TypeScript** | ‚ùå Failed | Type errors detected |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "| **Build** | ‚úÖ Passed | Application builds successfully |" >> $GITHUB_STEP_SUMMARY
            if [ -n "$BUNDLE_SIZE" ]; then
              echo "| **Bundle Size** | üìä $BUNDLE_SIZE | Production bundle analysis |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| **Build** | ‚ùå Failed | Build errors detected |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "| **Security** | üîí Scanned | Dependency vulnerabilities checked |" >> $GITHUB_STEP_SUMMARY

          # Exit with error if any critical checks failed
          if [ $BIOME_EXIT_CODE -ne 0 ] || [ $TSC_EXIT_CODE -ne 0 ] || [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "‚ùå One or more quality checks failed"
            exit 1
          fi

          echo "‚úÖ All webapp quality checks passed successfully"

      # Python quality checks with comprehensive validation
      - name: Python quality & security analysis
        if: matrix.check == 'python-quality'
        run: |
          set -o pipefail  # Make pipelines fail if any command fails
          echo "üîç Running comprehensive Python quality checks..."
          
          # Track issues found
          ISSUES_FOUND=()
          OVERALL_SUCCESS=true

          # Intelligence Service checks
          echo "üìù Checking Intelligence Service..."
          cd server/intelligence-service

          if [ ! -d ".venv" ]; then
            poetry install --no-interaction --no-root
          fi

          # Code formatting
          echo "üé® Checking code formatting..."
          poetry run black --check --diff . 2>&1 | tee black-results.txt
          INTELLIGENCE_BLACK_EXIT_CODE=${PIPESTATUS[0]}
          if [ $INTELLIGENCE_BLACK_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Intelligence Service: Black formatting check failed"
            ISSUES_FOUND+=("Intelligence Service: Black formatting needs fixing")
            OVERALL_SUCCESS=false
          else
            echo "‚úÖ Intelligence Service: Black formatting check passed"
          fi

          # Linting
          echo "üîç Running flake8 linting..."
          poetry run flake8 . --statistics --count 2>&1 | tee flake8-results.txt
          INTELLIGENCE_FLAKE8_EXIT_CODE=${PIPESTATUS[0]}
          if [ $INTELLIGENCE_FLAKE8_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Intelligence Service: Flake8 linting failed"
            ISSUES_FOUND+=("Intelligence Service: Flake8 linting issues found")
            OVERALL_SUCCESS=false
          else
            echo "‚úÖ Intelligence Service: Flake8 linting passed"
          fi

          # Type checking (if mypy is available)
          if poetry show mypy > /dev/null 2>&1; then
            echo "üìä Running type checking..."
            poetry run mypy . --ignore-missing-imports --show-error-codes 2>&1 | tee mypy-results.txt
            INTELLIGENCE_MYPY_EXIT_CODE=${PIPESTATUS[0]}
            if [ $INTELLIGENCE_MYPY_EXIT_CODE -ne 0 ]; then
              echo "‚ö†Ô∏è Intelligence Service: MyPy type checking found issues (warning only)"
              ISSUES_FOUND+=("Intelligence Service: MyPy type checking issues (warning)")
              # Type checking issues are warnings, not failures
            else
              echo "‚úÖ Intelligence Service: MyPy type checking passed"
            fi
          fi

          # Security check (if bandit is available)
          if poetry show bandit > /dev/null 2>&1; then
            echo "üîí Running security analysis..."
            poetry run bandit -r app/ -f json -o bandit-results.json 2>&1
            INTELLIGENCE_BANDIT_EXIT_CODE=${PIPESTATUS[0]}
            if [ $INTELLIGENCE_BANDIT_EXIT_CODE -ne 0 ]; then
              echo "‚ö†Ô∏è Intelligence Service: Bandit security analysis found issues (warning only)"
              ISSUES_FOUND+=("Intelligence Service: Security analysis issues (warning)")
              # Security issues are warnings, not failures for now
            else
              echo "‚úÖ Intelligence Service: Bandit security analysis passed"
            fi
          fi

          cd ../..

          # Webhook Ingest checks
          echo "üìù Checking Webhook Ingest..."
          cd server/webhook-ingest

          if [ ! -d ".venv" ]; then
            poetry install --no-interaction --no-root
          fi

          # Code formatting
          echo "üé® Checking webhook-ingest code formatting..."
          poetry run black --check --diff . 2>&1 | tee webhook-black-results.txt
          WEBHOOK_BLACK_EXIT_CODE=${PIPESTATUS[0]}
          if [ $WEBHOOK_BLACK_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Webhook Ingest: Black formatting check failed"
            ISSUES_FOUND+=("Webhook Ingest: Black formatting needs fixing")
            OVERALL_SUCCESS=false
          else
            echo "‚úÖ Webhook Ingest: Black formatting check passed"
          fi

          # Linting
          echo "üîç Running webhook-ingest flake8 linting..."
          poetry run flake8 . --statistics --count 2>&1 | tee webhook-flake8-results.txt
          WEBHOOK_FLAKE8_EXIT_CODE=${PIPESTATUS[0]}
          if [ $WEBHOOK_FLAKE8_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Webhook Ingest: Flake8 linting failed"
            ISSUES_FOUND+=("Webhook Ingest: Flake8 linting issues found")
            OVERALL_SUCCESS=false
          else
            echo "‚úÖ Webhook Ingest: Flake8 linting passed"
          fi

          cd ../..

          # Generate comprehensive summary
          echo ""
          echo "üìä Python Quality Check Summary:"
          echo "================================"
          
          if [ ${#ISSUES_FOUND[@]} -eq 0 ]; then
            echo "‚úÖ All Python quality checks passed successfully!"
            echo ""
            echo "## ‚úÖ Python Quality Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Intelligence Service**: All checks passed ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- **Webhook Ingest**: All checks passed ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- **Code Formatting**: All Python files follow Black formatting" >> $GITHUB_STEP_SUMMARY
            echo "- **Linting**: Code passes Flake8 quality checks" >> $GITHUB_STEP_SUMMARY
            echo "- **Type Safety**: Static type analysis completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Security**: Code security analysis performed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Found ${#ISSUES_FOUND[@]} issue(s):"
            for issue in "${ISSUES_FOUND[@]}"; do
              echo "  ‚Ä¢ $issue"
            done
            echo ""
            echo "## ‚ùå Python Quality Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following issues need to be addressed:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            for issue in "${ISSUES_FOUND[@]}"; do
              echo "- $issue" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To fix formatting issues:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo 'cd server/intelligence-service && poetry run black .' >> $GITHUB_STEP_SUMMARY
            echo 'cd ../webhook-ingest && poetry run black .' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          # Exit with appropriate code
          if [ "$OVERALL_SUCCESS" = false ]; then
            echo ""
            echo "‚ùå Python quality checks failed - please fix the issues above"
            exit 1
          fi

      # OpenAPI validation with intelligent auto-commit
      - name: OpenAPI validation & synchronization
        if: matrix.check == 'openapi-validation'
        run: |
          echo "üîç Validating OpenAPI specifications and clients..."

          # Install all dependencies
          if [ ! -d "node_modules" ]; then
            npm ci --prefer-offline --no-audit
          fi

          # Setup Python environments
          cd server/intelligence-service
          if [ ! -d ".venv" ]; then
            poetry install --no-interaction --no-root
          fi
          cd ../..

          # Setup Java environment
          cd server/application-server
          if [ ! -d "target" ]; then
            mvn compile -DskipTests --quiet
          fi
          cd ../..

          echo "üîÑ Generating OpenAPI specifications and clients..."

          # Generate all OpenAPI specs and clients
          npm run generate:api

          # Check for any changes
          git add .

          if ! git diff --cached --quiet; then
            echo "üìù OpenAPI changes detected..."
            
            # Show what changed
            echo "## üîÑ OpenAPI Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "The following OpenAPI-related files have changes:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            git diff --cached --name-only >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Check if auto-commit is enabled
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'autocommit-openapi') }}" == "true" ]]; then
              echo "‚úÖ Auto-commit enabled, committing changes..."
              
              # Configure git
              git config --local user.name "github-actions[bot]"
              git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
              
              # Create detailed commit message
              COMMIT_MSG="chore: update OpenAPI specs and clients [skip ci]"
              COMMIT_BODY=""
              
              # Check which components changed
              if git diff --cached --quiet server/intelligence-service/openapi.yaml; then
                :
              else
                COMMIT_BODY="$COMMIT_BODY\n- Update Intelligence Service OpenAPI spec"
              fi
              
              if git diff --cached --quiet server/application-server/openapi.yaml; then
                :
              else
                COMMIT_BODY="$COMMIT_BODY\n- Update Application Server OpenAPI spec"
              fi
              
              if git diff --cached --quiet server/application-server/src/main/java/de/tum/in/www1/hephaestus/intelligenceservice/; then
                :
              else
                COMMIT_BODY="$COMMIT_BODY\n- Update Intelligence Service Java client"
              fi
              
              if git diff --cached --quiet webapp-react/src/api/; then
                :
              else
                COMMIT_BODY="$COMMIT_BODY\n- Update Application Server TypeScript client"
              fi
              
              # Commit with detailed message
              if [ -n "$COMMIT_BODY" ]; then
                git commit -m "$COMMIT_MSG$COMMIT_BODY"
              else
                git commit -m "$COMMIT_MSG"
              fi
              
              # Push changes
              git push
              
              echo "‚úÖ OpenAPI changes successfully committed and pushed" >> $GITHUB_STEP_SUMMARY
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**To resolve this:**" >> $GITHUB_STEP_SUMMARY
              echo "1. **Recommended**: Add the \`autocommit-openapi\` label to this PR for automatic updates" >> $GITHUB_STEP_SUMMARY
              echo "2. **Manual**: Run \`npm run generate:api\` locally and commit the changes" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Manual commands:**" >> $GITHUB_STEP_SUMMARY
              echo '```bash' >> $GITHUB_STEP_SUMMARY
              echo 'npm run generate:api' >> $GITHUB_STEP_SUMMARY
              echo 'git add .' >> $GITHUB_STEP_SUMMARY
              echo 'git commit -m "chore: update OpenAPI specs and clients"' >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              
              echo "‚ùå OpenAPI validation failed - changes detected but auto-commit not enabled"
              exit 1
            fi
          else
            echo "## ‚úÖ OpenAPI Validation Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Specifications**: All OpenAPI specs are up to date" >> $GITHUB_STEP_SUMMARY
            echo "- **Java Clients**: Generated clients match current specs" >> $GITHUB_STEP_SUMMARY
            echo "- **TypeScript Clients**: Generated clients match current specs" >> $GITHUB_STEP_SUMMARY
            echo "- **Consistency**: All API contracts are synchronized" >> $GITHUB_STEP_SUMMARY
          fi

      # Enhanced error handling and reporting
      - name: Quality gate status report
        if: always()
        run: |
          echo "üìä Quality Gate: ${{ matrix.check }} - Status: ${{ job.status }}"

          if [[ "${{ job.status }}" == "failure" ]]; then
            echo "## ‚ùå Quality Gate Failed: ${{ matrix.check }}" >> $GITHUB_STEP_SUMMARY
            echo "This quality gate must pass before merging. Please review the errors above." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ job.status }}" == "success" ]]; then
            echo "Quality gate passed successfully! ‚úÖ" >> $GITHUB_STEP_SUMMARY
          fi

  # Comprehensive security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [pipeline-setup]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        scan-type: [sast, dependencies, containers, secrets]
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # SAST (Static Application Security Testing)
      - name: Initialize CodeQL
        if: matrix.scan-type == 'sast'
        uses: github/codeql-action/init@v3
        with:
          languages: java, javascript, python
          queries: security-extended

      # Setup required build tools for CodeQL
      - name: Setup build environment for CodeQL
        if: matrix.scan-type == 'sast'
        uses: ./.github/actions/setup-caches
        with:
          cache-type: "openapi-validation"

      # Verify build environment
      - name: Verify build environment
        if: matrix.scan-type == 'sast'
        run: |
          echo "üîç Verifying build environment for CodeQL..."
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn -version
          echo "Node.js version:"
          node --version
          echo "NPM version:"
          npm --version
          echo "Environment verification complete"

      - name: Build for CodeQL analysis
        if: matrix.scan-type == 'sast'
        run: |
          # Java build
          echo "üî® Building Java application for CodeQL analysis..."
          cd server/application-server

          # Build with dependencies caching
          if ! mvn compile -DskipTests -Dmaven.test.skip=true --quiet; then
            echo "‚ùå Java build failed for CodeQL analysis"
            echo "Maven compilation output:"
            mvn compile -DskipTests -Dmaven.test.skip=true
            exit 1
          fi
          echo "‚úÖ Java build completed successfully"

          # Node.js build 
          echo "üî® Building React application for CodeQL analysis..."
          cd ../../webapp-react

          # Install dependencies if not cached
          if [ ! -d "node_modules" ]; then
            echo "üì¶ Installing Node.js dependencies..."
            npm ci --prefer-offline --no-audit --progress=false
          else
            echo "üì¶ Node.js dependencies restored from cache"
          fi

          # Build application
          echo "üèóÔ∏è Building React application..."
          if ! npm run build:prod; then
            echo "‚ùå Node.js build failed for CodeQL analysis"
            exit 1
          fi
          echo "‚úÖ React build completed successfully"

      - name: Perform CodeQL Analysis
        if: matrix.scan-type == 'sast'
        uses: github/codeql-action/analyze@v3

      # Dependency vulnerability scanning
      - name: Run Trivy dependency scan
        if: matrix.scan-type == 'dependencies'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results
        if: matrix.scan-type == 'dependencies'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      # Container security scanning
      - name: Setup Docker environment
        if: matrix.scan-type == 'containers'
        uses: ./.github/actions/setup-caches
        with:
          cache-type: "containers"

      - name: Build and scan containers
        if: matrix.scan-type == 'containers'
        run: |
          echo "üê≥ Building containers for security scanning..."

          # Build test images
          docker build -f webapp-react/Dockerfile webapp-react -t test-webapp:latest
          docker build -f server/application-server/Dockerfile server/application-server -t test-app-server:latest

          # Scan containers
          echo "üîç Scanning container images for vulnerabilities..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --format sarif --output container-results.sarif test-webapp:latest

      # Secret scanning
      - name: Run secret detection
        if: matrix.scan-type == 'secrets'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Intelligent test execution matrix
  tests:
    runs-on: "ubuntu-latest"
    needs: [pipeline-setup, quality-gates]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        test-type:
          [
            java-unit,
            java-integration,
            java-architecture,
            webapp-visual,
            cross-platform,
          ]

    steps:
      - uses: actions/checkout@v4

      # Advanced caching strategy
      - name: Setup advanced caches
        uses: ./.github/actions/setup-caches
        with:
          cache-type: ${{ matrix.test-type }}
          os: "ubuntu-latest"

      # Java tests with enhanced reporting
      - name: "Java ${{ matrix.test-type }} execution"
        if: startsWith(matrix.test-type, 'java-')
        run: |
          echo "üöÄ Starting Java ${{ matrix.test-type }} tests"

          case "${{ matrix.test-type }}" in
            "java-unit")
              echo "üß™ Running unit tests for core business logic..."
              cd server/application-server
              mvn test -Dgroups="unit" -Dtest="!**/ArchitectureTest" -T 2C --batch-mode
              ;;
            "java-integration")
              echo "üîó Running integration tests with database and APIs..."
              cd server/application-server
              mvn test -Dgroups="integration" -T 2C --batch-mode
              ;;
            "java-architecture")
              echo "üèóÔ∏è Validating architecture compliance and dependencies..."
              cd server/application-server
              mvn test -Dtest="**/ArchitectureTest" --batch-mode
              ;;
          esac
          echo "‚úÖ Java ${{ matrix.test-type }} tests completed successfully"

      # Webapp tests with enhanced reporting
      - name: "Webapp ${{ matrix.test-type }} execution"
        if: startsWith(matrix.test-type, 'webapp-')
        working-directory: webapp-react
        run: |
          echo "üöÄ Starting webapp ${{ matrix.test-type }} tests"

          npm ci --prefer-offline --no-audit --progress=false

          case "${{ matrix.test-type }}" in
            "webapp-visual")
              echo "üé® Running visual regression tests with Storybook..."
              npm run chromatic
              ;;
          esac
          echo "‚úÖ Webapp ${{ matrix.test-type }} tests completed successfully"

      # Test result aggregation with enhanced reporting
      - name: Upload test results
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: "Test Results - ${{ matrix.test-type }}"
          path: "**/target/surefire-reports/*.xml,**/test-results.xml"
          reporter: java-junit
          fail-on-error: false

  # Enhanced database validation
  database-validation:
    runs-on: ubuntu-latest
    needs: [pipeline-setup, quality-gates]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: hephaestus
          POSTGRES_PASSWORD: root
          POSTGRES_USER: root
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 21
          cache: maven

      - name: Build Application Server
        working-directory: server/application-server
        run: mvn compile -DskipTests

      - name: Validate schema consistency
        env:
          CI: true
        run: |
          scripts/db-utils.sh draft-changelog
          if [ -f "server/application-server/src/main/resources/db/changelog_new.xml" ]; then
            echo "## ‚ö†Ô∏è Schema Drift Detected" >> $GITHUB_STEP_SUMMARY
            echo "JPA entities don't match committed migrations. Run 'npm run db:draft-changelog' locally." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Generate and validate ERD documentation
        run: |
          scripts/db-utils.sh generate-erd
          if git diff --quiet docs/dev/database/schema.mmd; then
            echo "‚úÖ ERD documentation is up to date" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ö†Ô∏è ERD Documentation Out of Date" >> $GITHUB_STEP_SUMMARY
            echo "Run 'npm run db:generate-erd-docs' locally and commit changes." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Optimized Docker builds with security scanning
  docker-build-and-scan:
    runs-on: ubuntu-latest
    needs: [pipeline-setup, tests]
    if: needs.pipeline-setup.outputs.should_skip != 'true'
    timeout-minutes: 25
    strategy:
      matrix:
        component:
          - {
              name: "webapp",
              dockerfile: "./webapp-react/Dockerfile",
              context: "./webapp-react",
            }
          - {
              name: "application-server",
              dockerfile: "./server/application-server/Dockerfile",
              context: "./server/application-server",
            }
          - {
              name: "intelligence-service",
              dockerfile: "./server/intelligence-service/Dockerfile",
              context: "./server/intelligence-service",
            }
          - {
              name: "webhook-ingest",
              dockerfile: "./server/webhook-ingest/Dockerfile",
              context: "./server/webhook-ingest",
            }
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component.context }}
          file: ${{ matrix.component.dockerfile }}
          tags: test-${{ matrix.component.name }}:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-${{ matrix.component.name }}:latest
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

  # Aggregated success gate for branch protection
  all-ci-passed:
    runs-on: ubuntu-latest
    needs:
      [
        quality-gates,
        security-scan,
        tests,
        database-validation,
        docker-build-and-scan,
      ]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          # Check if any required job failed
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "‚ùå One or more CI jobs failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "‚ö†Ô∏è One or more CI jobs were cancelled"
            exit 1
          else
            echo "‚úÖ All CI jobs passed successfully"
          fi

  # Production Docker builds and deployment
  deploy-staging:
    needs: [all-ci-passed]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment:
      name: staging
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging with health checks
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Blue-green deployment would go here
          echo "‚úÖ Staging deployment completed"

      - name: Run smoke tests
        run: |
          echo "üß™ Running post-deployment smoke tests..."
          # Comprehensive smoke test suite would go here
          echo "‚úÖ Smoke tests passed"

  # Production deployment for tags
  deploy-production:
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: production
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Canary deployment with gradual traffic shifting would go here
          echo "‚úÖ Production deployment completed"
