name: "PR"

on:
  pull_request_target:
    types:
      - opened
      - edited
      - synchronize
      - reopened
      - ready_for_review

jobs:
  validate-title:
    name: "Validate title"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      statuses: write
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            fix
            feat
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          scopes: |
            webapp
            application-server
            intelligence-service
            intelligence-service-hono
            webhook-ingest
            docs
            ci
            deps
            config
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            should start with a lowercase character for consistency.
          headerPattern: '^(\w*)(?:\(([\w\$\.\-\*\s]*)\))?!?: (.*)$'
          headerPatternCorrespondence: type,scope,subject
          wip: true

  assign-author:
    name: "Assign author"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: github.event.action == 'opened'
    steps:
      - uses: technote-space/assign-author@v1

  labeler:
    name: "Apply labels"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - uses: actions/labeler@v5
        with:
          configuration-path: .github/labeler.yml

      - name: "Apply size label"
        uses: actions/github-script@v7
        with:
          script: |
            console.log("Calculating PR size via listFiles pagination...");
            const files = await github.paginate(
              github.rest.pulls.listFiles,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                per_page: 100,
              }
            );
            const changedLines = files.reduce((sum, f) => sum + (f.additions || 0) + (f.deletions || 0), 0);
            console.log(`Changed lines (additions+deletions): ${changedLines}`);

            let label = '';
            if (changedLines > 1000) label = 'size:XXL';
            else if (changedLines > 499) label = 'size:XL';
            else if (changedLines > 99) label = 'size:L';
            else if (changedLines > 29) label = 'size:M';
            else if (changedLines > 9) label = 'size:S';
            else label = 'size:XS';

            console.log("Fetching existing labels...");
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const sizeLabels = labels.data
              .filter(label => label.name.startsWith('size:'))
              .map(label => label.name);

            const removeLabels = sizeLabels.filter(sizeLabel => sizeLabel !== label);
            if (removeLabels.length > 0) {
              console.log(`Removing existing size labels: ${removeLabels.join(', ')}`);
              for (const labelToRemove of removeLabels) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: labelToRemove,
                });
              }
              console.log("Existing size labels removed.");
            } else {
              console.log("No size labels to remove.");
            }

            if (label) {
              if (sizeLabels.includes(label)) {
                console.log(`Label "${label}" already applied.`);
              } else {
                console.log(`Applying label "${label}" to the pull request...`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: [label]
                });
                console.log(`Label "${label}" applied successfully.`);
              }
            } else {
              console.log("No label to apply.");
            }
