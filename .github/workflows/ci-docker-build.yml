name: Docker Build

on:
  workflow_call:
    inputs:
      should_skip:
        description: "Whether to skip the workflow"
        required: false
        type: string
        default: "false"
    outputs:
      images_built:
        description: "Images that were successfully built"
        value: ${{ jobs.aggregate-results.outputs.images_built }}

env:
  # Global pipeline configuration
  MAVEN_OPTS: -Xmx2048m -XX:+UseParallelGC
  NODE_VERSION: 22
  PYTHON_VERSION: 3.13
  JAVA_VERSION: 21

jobs:
  docker-build:
    name: "${{ matrix.component.name }}-build"
    if: inputs.should_skip != 'true'
    strategy:
      fail-fast: false
      matrix:
        component:
          - name: "webapp-react"
            image-name: "ls1intum/hephaestus/webapp-react"
            docker-file: "./webapp-react/Dockerfile"
            docker-context: "./webapp-react"
            title: "Hephaestus Webapp"
            description: "React-based web client for Hephaestus"
          - name: "application-server"
            image-name: "ls1intum/hephaestus/application-server"
            docker-file: "./server/application-server/Dockerfile"
            docker-context: "./server/application-server"
            title: "Hephaestus Application Server"
            description: "Spring Boot server for Hephaestus"
          - name: "intelligence-service"
            image-name: "ls1intum/hephaestus/intelligence-service"
            docker-file: "./server/intelligence-service/Dockerfile"
            docker-context: "./server/intelligence-service"
            title: "Hephaestus Intelligence Service"
            description: "FastAPI-based AI service for Hephaestus"
          - name: "webhook-ingest"
            image-name: "ls1intum/hephaestus/webhook-ingest"
            docker-file: "./server/webhook-ingest/Dockerfile"
            docker-context: "./server/webhook-ingest"
            title: "Hephaestus Webhook Ingest"
            description: "Python-based webhook processor for Hephaestus"
    uses: ls1intum/.github/.github/workflows/build-and-push-docker-image.yml@main
    with:
      image-name: "${{ matrix.component.image-name }}"
      docker-file: "${{ matrix.component.docker-file }}"
      docker-context: "${{ matrix.component.docker-context }}"
      registry: "ghcr.io"
      tags: |
        ${{ github.ref_name }}
        ${{ github.sha }}
        ci-${{ github.run_number }}
        ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'latest' }}
      labels: |
        org.opencontainers.image.title=${{ matrix.component.title }}
        org.opencontainers.image.description=${{ matrix.component.description }}
        org.opencontainers.image.vendor=AET TUM
        org.opencontainers.image.licenses=MIT
        hephaestus.component=${{ matrix.component.name }}
    secrets: inherit

  aggregate-results:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: always() && inputs.should_skip != 'true'
    outputs:
      images_built: ${{ steps.summary.outputs.images_built }}
    steps:
      - name: Generate build summary
        id: summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check build results
          BUILD_STATUS="${{ needs.docker-build.result }}"
          
          echo "### Build Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Build (All Components)**: $BUILD_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # List components that were built
          echo "### Components Built:" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend (React)**: webapp-react" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend (Spring)**: application-server" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Service (FastAPI)**: intelligence-service" >> $GITHUB_STEP_SUMMARY
          echo "- **Webhook Processor**: webhook-ingest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "$BUILD_STATUS" == "success" ]]; then
            echo "### ✅ Overall Result: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All Docker images built successfully." >> $GITHUB_STEP_SUMMARY
            echo "images_built=webapp-react,application-server,intelligence-service,webhook-ingest" >> $GITHUB_OUTPUT
          else
            echo "### ❌ Overall Result: FAILURE" >> $GITHUB_STEP_SUMMARY
            echo "One or more Docker builds failed. Check individual job logs for details." >> $GITHUB_STEP_SUMMARY
            echo "images_built=" >> $GITHUB_OUTPUT
            exit 1
          fi
