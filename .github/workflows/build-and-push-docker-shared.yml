name: Build and Push Docker Image natively

on:
  workflow_call:
    inputs:
      image-name:
        type: string
        default: ${{ github.repository }}
        description: "The name for the docker image (Default: Repository name)"
      docker-file:
        type: string
        default: Dockerfile
        description: "The path to the Dockerfile (Default: ./Dockerfile)"
      docker-context:
        type: string
        default: .
        description: "The context for the Docker build (Default: .)"
      build-args:
        type: string
        description: "List of additional build contexts (e.g., name=path)"
        required: false
      labels:
        type: string
        description: "Label that should be appended to the image"
        required: false
      tags:
        type: string
        description: "Tags that should be appended to the image"
        required: false
      registry:
        type: string
        default: ghcr.io
        description: "The registry to push the image to (Default: ghcr.io)"
      network:
        type: string
        default: default
        description: "Networking mode for the RUN instructions during build (Default: default)"
    outputs:
      image_tag: 
        description: "The tag of the image that was built"
        value: ${{ jobs.merge.outputs.image_tag }}
    
    secrets:
      registry-user:
        required: false
      registry-password:
        required: false

jobs:
  build:
    name: Build ${{ matrix.platform }} Docker Image for ${{ inputs.image-name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: blacksmith-2vcpu-ubuntu-2204
          - platform: linux/arm64
            runner: blacksmith-2vcpu-ubuntu-2204-arm64
    runs-on: ${{ matrix.runner || 'ubuntu-latest' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
  
      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: "network=${{ inputs.network }}"
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["https://docker-mirror.ase.in.tum.de:8765"]

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.registry-user || github.actor }}
          password: ${{ secrets.registry-password || secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image-name }}

      - name: Build and push Docker Image
        id: build
        uses: useblacksmith/build-push-action@v1
        with:
          context: ${{ inputs.docker-context }}
          file: ${{ inputs.docker-file }}
          tags: ${{ inputs.registry }}/${{ inputs.image-name }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ inputs.build-args }}
          network: ${{ inputs.network }}
          outputs: type=image,"name=${{ inputs.registry }}/${{ inputs.image-name }}",push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          image="${{ inputs.image-name }}"
          echo "IMAGE_NAME=${image//\//-}" >> $GITHUB_ENV

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"          
  
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.IMAGE_NAME }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Create and Push Multi-Arch Manifest
    runs-on: ubuntu-latest
    outputs: 
      image_tag: ${{ steps.output-image-tag.outputs.image_tag }}
    needs:
      - build
    steps:
      - name: Prepare
        run: |
          image="${{ inputs.image-name }}"
          echo "IMAGE_NAME=${image//\//-}" >> $GITHUB_ENV

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ env.IMAGE_NAME }}-*
          merge-multiple: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image-name }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ inputs.tags }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix=,format=long
          labels: |
            ${{ inputs.labels }}        

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ inputs.registry }}/${{ inputs.image-name }}@sha256:%s ' *)          

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ inputs.registry }}/${{ inputs.image-name }}:${{ steps.meta.outputs.version }}
          
      - id: output-image-tag
        run: |
          echo "image_tag=${{ steps.meta.outputs.version }}" >> "$GITHUB_OUTPUT"