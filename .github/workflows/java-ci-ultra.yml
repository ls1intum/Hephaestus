name: CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'server/application-server/**'
      - '.github/workflows/java-ci-ultra.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'server/application-server/**'
      - '.github/workflows/java-ci-ultra.yml'

defaults:
  run:
    working-directory: server/application-server

env:
  MAVEN_OPTS: -Xmx1024m -XX:+UseParallelGC
  TESTCONTAINERS_REUSE_ENABLE: true

jobs:
  # Code quality checks - run independently for complete feedback
  code-quality:
    name: Application Server / Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js for Prettier
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install formatting dependencies
        run: npm ci --production
        working-directory: .

      - name: Check Java code formatting
        run: npm run format:java:check
        working-directory: .
        continue-on-error: true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Compile and validate code
        run: mvn compile -DskipTests -T 1C --batch-mode
        continue-on-error: true

  # Pure unit tests - run completely independently
  unit-tests:
    name: Application Server / Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run pure unit tests
        run: |
          mvn test \
            -Dgroups="unit" \
            -T 1C \
            --batch-mode \
            --fail-at-end
        continue-on-error: true

      - name: Upload unit test results
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: Unit Test Results
          path: server/application-server/target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false

  # Architecture tests - run completely independently
  architecture-tests:
    name: Application Server / Architecture Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run architecture tests
        run: |
          mvn test \
            -Dtest="**/ArchitectureTest" \
            --batch-mode \
            --fail-at-end
        continue-on-error: true

      - name: Upload architecture test results
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: Architecture Test Results
          path: server/application-server/target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false

  # Integration tests - run completely independently
  integration-tests:
    name: Application Server / Integration Tests
    runs-on: ubuntu-latest-4-cores
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: hephaestus_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run optimized integration tests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/hephaestus_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
          SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 5
          SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 5000
          SPRING_TEST_CONTEXT_CACHE_MAXSIZE: 1
        run: |
          mvn test \
            -Dtest="**/*IntegrationTest,**/HephaestusApplicationTests" \
            -Pci \
            --batch-mode \
            --fail-at-end
        continue-on-error: true

      - name: Upload integration test results
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: Integration Test Results
          path: server/application-server/target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: server/application-server/target/site/jacoco/jacoco.xml
          flags: integration-tests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Application build - run completely independently
  build:
    name: Application Server / Build
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build application with optimizations
        run: |
          mvn package \
            -DskipTests \
            -T 1C \
            -Dmaven.compile.fork=true \
            -Dmaven.compiler.maxmem=1024m \
            --batch-mode
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: hephaestus-jar-optimized
          path: server/application-server/target/*.jar
          retention-days: 30

  # Summary job for comprehensive feedback
  ci-summary:
    name: CI Pipeline Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, architecture-tests, integration-tests, build]
    if: always()
    steps:
      - name: Comprehensive results analysis
        run: |
          echo "=== COMPREHENSIVE CI RESULTS ==="
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Architecture Tests: ${{ needs.architecture-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo ""
          
          # Count failures for comprehensive feedback
          failures=0
          
          if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
            echo "‚ùå Code Quality Issues Found (formatting/compilation)"
            failures=$((failures + 1))
          else
            echo "‚úÖ Code Quality Passed"
          fi
          
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then
            echo "‚ùå Unit Test Failures"
            failures=$((failures + 1))
          else
            echo "‚úÖ Unit Tests Passed"
          fi
          
          if [[ "${{ needs.architecture-tests.result }}" == "failure" ]]; then
            echo "‚ùå Architecture Test Failures"
            failures=$((failures + 1))
          else
            echo "‚úÖ Architecture Tests Passed"
          fi
          
          if [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "‚ùå Integration Test Failures"
            failures=$((failures + 1))
          else
            echo "‚úÖ Integration Tests Passed"
          fi
          
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå Build Failures"
            failures=$((failures + 1))
          else
            echo "‚úÖ Build Passed"
          fi
          
          echo ""
          echo "=== FINAL SUMMARY ==="
          if [ $failures -eq 0 ]; then
            echo "üéâ ALL CHECKS PASSED!"
            echo "Pipeline completed successfully with full parallel execution."
          else
            echo "‚ö†Ô∏è  $failures issue(s) found across the pipeline"
            echo "Check individual job results for detailed information."
            echo "All jobs ran to completion to provide comprehensive feedback."
            exit 1
          fi
