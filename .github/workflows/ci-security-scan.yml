name: Security Scan

on:
  workflow_call:
    inputs:
      should_skip:
        description: "Whether to skip the workflow"
        required: false
        type: string
        default: "false"

jobs:
  # Comprehensive security scanning
  security-scan:
    name: ${{ matrix.scan-type }}
    runs-on: ubuntu-latest
    if: inputs.should_skip != 'true'
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        scan-type: [sast, dependencies, secrets]
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Ensure stable Node/npm and caching for Node steps used in SAST
      - name: Setup Node.js (LTS) and npm cache
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            webapp/package-lock.json

      # SAST (Static Application Security Testing)
      - name: Initialize CodeQL
        if: matrix.scan-type == 'sast'
        uses: github/codeql-action/init@v3
        with:
          languages: java-kotlin, javascript-typescript, python
          queries: security-extended
          build-mode: none

      # Setup required build tools for CodeQL
      - name: Setup build environment for CodeQL
        if: matrix.scan-type == 'sast'
        uses: ./.github/actions/setup-caches
        with:
          cache-type: "openapi-validation"
          os: ${{ runner.os }}

      - name: Build for CodeQL analysis
        if: matrix.scan-type == 'sast'
        run: |
          echo "ðŸ”¨ Building for CodeQL analysis..."
          
          # Java build
          cd server/application-server
          mvn compile -DskipTests --quiet
          
          # Node.js (webapp) - Type-only build for CodeQL; avoid bundle to reduce native deps
          cd ../../webapp
          rm -rf node_modules
          npm ci --include=dev --include=optional --no-audit --progress=false
          npx tsc --noEmit

          # Python dependencies
          cd ../server/intelligence-service
          if [ ! -d ".venv" ]; then
            poetry install --no-interaction --no-root
          fi

          cd ../webhook-ingest
          if [ ! -d ".venv" ]; then
            poetry install --no-interaction --no-root
          fi

          echo "âœ… Build completed"

      - name: Perform CodeQL Analysis
        if: matrix.scan-type == 'sast'
        uses: github/codeql-action/analyze@v3

      # Dependency vulnerability scanning
      - name: Run Trivy dependency scan
        if: matrix.scan-type == 'dependencies'
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results
        if: matrix.scan-type == 'dependencies'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      # Secret scanning
      - name: Run secret detection
        if: matrix.scan-type == 'secrets'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
