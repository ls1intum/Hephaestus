name: Security Scan

on:
  workflow_call:
    inputs:
      should_skip:
        description: "Whether to skip the workflow"
        required: false
        type: string
        default: "false"

env:
  # Global pipeline configuration
  MAVEN_OPTS: -Xmx2048m -XX:+UseParallelGC
  NODE_VERSION: 22
  PYTHON_VERSION: 3.13
  JAVA_VERSION: 21

jobs:
  # Comprehensive security scanning
  security-scan:
    name: ${{ matrix.scan-type }}
    runs-on: ubuntu-latest
    if: inputs.should_skip != 'true'
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        scan-type: [sast, dependencies, secrets, dependency-pinning]
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # SAST (Static Application Security Testing)
      - name: Initialize CodeQL
        if: matrix.scan-type == 'sast'
        uses: github/codeql-action/init@v3
        with:
          languages: java, javascript, python
          queries: security-extended

      # Setup required build tools for CodeQL
      - name: Setup build environment for CodeQL
        if: matrix.scan-type == 'sast'
        uses: ./.github/actions/setup-caches
        with:
          cache-type: "openapi-validation"
          os: ${{ runner.os }}

      # Verify build environment
      - name: Verify build environment
        if: matrix.scan-type == 'sast'
        run: |
          echo "🔍 Verifying build environment for CodeQL..."
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn -version
          echo "Node.js version:"
          node --version
          echo "NPM version:"
          npm --version
          echo "Environment verification complete"

      - name: Build for CodeQL analysis
        if: matrix.scan-type == 'sast'
        run: |
          # Java build
          echo "🔨 Building Java application for CodeQL analysis..."
          cd server/application-server

          # Build with dependencies caching
          if ! mvn compile -DskipTests -Dmaven.test.skip=true --quiet; then
            echo "❌ Java build failed for CodeQL analysis"
            echo "Maven compilation output:"
            mvn compile -DskipTests -Dmaven.test.skip=true
            exit 1
          fi
          echo "✅ Java build completed successfully"

          # Node.js build 
          echo "🔨 Building React application for CodeQL analysis..."
          cd ../../webapp-react

          # Install dependencies if not cached
          if [ ! -d "node_modules" ]; then
            echo "📦 Installing Node.js dependencies..."
            npm ci --prefer-offline --no-audit --progress=false
          else
            echo "📦 Node.js dependencies restored from cache"
          fi

          # Build application
          echo "🏗️ Building React application..."
          if ! npm run build:prod; then
            echo "❌ Node.js build failed for CodeQL analysis"
            exit 1
          fi
          echo "✅ React build completed successfully"

      - name: Perform CodeQL Analysis
        if: matrix.scan-type == 'sast'
        uses: github/codeql-action/analyze@v3

      # Dependency vulnerability scanning
      - name: Run Trivy dependency scan
        if: matrix.scan-type == 'dependencies'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy results
        if: matrix.scan-type == 'dependencies'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      # Secret scanning
      - name: Run secret detection
        if: matrix.scan-type == 'secrets'
        uses: trufflesecurity/trufflehog@main
        with:
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          path: .
          extra_args: --debug --only-verified

      # Dependency pinning analysis
      - name: Check dependency pinning
        if: matrix.scan-type == 'dependency-pinning'
        run: |
          echo "🔍 Analyzing dependency pinning practices..."
          
          # Check Node.js dependencies for loose version constraints
          echo "## Node.js Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          find . -name "package.json" -not -path "*/node_modules/*" | while read file; do
            echo "### Checking $file" >> $GITHUB_STEP_SUMMARY
            if grep -q '\^' "$file"; then
              echo "⚠️ **Found caret constraints in $file**" >> $GITHUB_STEP_SUMMARY
              grep '".*": "\^' "$file" | head -5 >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **No caret constraints found in $file**" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Check Maven dependencies
          echo "## Maven Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          find . -name "pom.xml" | while read file; do
            echo "### Checking $file" >> $GITHUB_STEP_SUMMARY
            if grep -q 'LATEST\|RELEASE' "$file"; then
              echo "⚠️ **Found dynamic version ranges in $file**" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **No dynamic versions found in $file**" >> $GITHUB_STEP_SUMMARY
            fi
          done

      # Enhanced error handling and reporting
      - name: Security scan status report
        if: always()
        run: |
          echo "📊 Security Scan (${{ matrix.scan-type }}) - Status: ${{ job.status }}"
          echo "## 🔒 Security Scan Results - ${{ matrix.scan-type }}" >> $GITHUB_STEP_SUMMARY

          case "${{ matrix.scan-type }}" in
            "sast")
              echo "- **Static Application Security Testing**: CodeQL analysis completed" >> $GITHUB_STEP_SUMMARY
              ;;
            "dependencies")
              echo "- **Dependency Vulnerability Scan**: Trivy dependency analysis completed" >> $GITHUB_STEP_SUMMARY
              ;;
            "secrets")
              echo "- **Secret Detection**: TruffleHog secret scanning completed" >> $GITHUB_STEP_SUMMARY
              ;;
            "dependency-pinning")
              echo "- **Dependency Pinning**: Version constraint analysis completed" >> $GITHUB_STEP_SUMMARY
              ;;
          esac

          if [[ "${{ job.status }}" == "failure" ]]; then
            echo "## ❌ Security Scan Failed (${{ matrix.scan-type }})" >> $GITHUB_STEP_SUMMARY
            echo "Security vulnerabilities were detected. Please review the scan results and address any critical or high-severity issues." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Security scan (${{ matrix.scan-type }}) completed successfully!" >> $GITHUB_STEP_SUMMARY
          fi
