# This workflow validates that database migrations are complete and up-to-date
# It ensures that:
# 1. All Liquibase migrations apply successfully
# 2. No manual schema changes were made outside of migrations
# 3. Database documentation (ERD) reflects the current schema
#
# The workflow uses the database utility scripts:
# - scripts/db-utils.sh generate-erd    (applies migrations + generates ERD)
# - scripts/db-utils.sh draft-changelog (detects schema drift)
#
# If this check fails, it will show you the exact npm commands to run:
# - npm run db:generate-erd-docs
# - npm run db:draft-changelog
#
# For detailed instructions, see: docs/dev/database/migration.md

name: Database Migration Validation

on:
  pull_request:
    types: [opened, synchronize, labeled, reopened]
    paths:
      - 'server/application-server/**'
      - 'scripts/**'
      - 'package.json'
      - '.github/workflows/liquibase-migration-check.yml'
  workflow_dispatch:

jobs:
  database-validation:
    name: Database Migration Validation
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: hephaestus
          POSTGRES_PASSWORD: root
          POSTGRES_USER: root
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build application (compile only)
        working-directory: server/application-server
        run: mvn compile -DskipTests

      - name: Set up Python for ERD generation
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Make database utility script executable
        run: chmod +x scripts/db-utils.sh

      - name: Apply database migrations and generate ERD
        env:
          # Database utilities will use the GitHub Actions PostgreSQL service
          # instead of starting their own Docker container
          CI: true
        run: |
          # Use the database utility script
          # This will:
          # 1. Apply all Liquibase migrations
          # 2. Generate up-to-date ERD documentation
          scripts/db-utils.sh generate-erd

      - name: Check for migration changes (draft changelog)
        env:
          CI: true
        run: |
          # Generate changelog diff to detect any schema drift
          # This creates a changelog_new.xml file if schema changes are detected
          scripts/db-utils.sh draft-changelog

      - name: Validate database schema and documentation
        run: |
          echo "üîç Validating that database schema matches migrations..."
          
          # Check if any files were modified during migration/ERD generation
          git add .
          if git diff --cached --quiet; then
            echo "‚úÖ All checks passed:"
            echo "‚Ä¢ Database schema matches committed migrations"
            echo "‚Ä¢ ERD documentation is up-to-date"
            echo "‚Ä¢ No unexpected schema drift detected"
            
          else
            echo "‚ö†Ô∏è  Database validation issues detected!"
            echo ""
            echo "üìã Changed files:"
            git diff --cached --name-only | sed 's/^/  /'
            echo ""
            
            # Detect what types of changes occurred
            ERD_CHANGED=false
            MIGRATION_CHANGED=false
            OTHER_CHANGES=false
            
            if ! git diff --cached --quiet docs/dev/database/schema.mmd; then
              ERD_CHANGED=true
            fi
            
            if [ -f "server/application-server/src/main/resources/db/changelog_new.xml" ] || \
               git diff --cached --name-only | grep -q "server/application-server/src/main/resources/db/changelog"; then
              MIGRATION_CHANGED=true
            fi
            
            # Check for any other unexpected changes
            if git diff --cached --name-only | grep -v "docs/dev/database/schema.mmd" | grep -v "server/application-server/src/main/resources/db/changelog" | grep -q .; then
              OTHER_CHANGES=true
            fi
            
            # Provide specific solutions based on detected changes
            if [ "$MIGRATION_CHANGED" = true ] && [ "$ERD_CHANGED" = true ]; then
              echo "üîß ISSUE: Schema changes detected that require migrations and documentation updates"
              echo ""
              echo "üí° SOLUTION:"
              echo "You have database schema changes that need proper migrations:"
              echo ""
              echo "   # Review generated migration carefully (check for data loss patterns)"
              echo "   cat server/application-server/src/main/resources/db/changelog_new.xml"
              echo ""
              echo "   # If migration looks correct, regenerate ERD and commit"
              echo "   npm run db:generate-erd-docs"
              echo "   git add docs/dev/database/schema.mmd"
              echo "   git commit -m 'Update database ERD after migration'"
              echo ""
              echo "üìñ Migration validation guide: docs/dev/database/migration.md#migration-validation-critical-issues-to-check"
              
            elif [ "$ERD_CHANGED" = true ] && [ "$MIGRATION_CHANGED" = false ]; then
              echo "üìù ISSUE: Database documentation is out of sync with current schema"
              echo ""
              echo "üí° SOLUTION:"
              echo "The ERD has been automatically updated to reflect the current database state."
              echo "This typically happens when migrations were applied but ERD wasn't regenerated."
              echo ""
              echo "   # Commit the updated documentation"
              echo "   git add docs/dev/database/schema.mmd"
              echo "   git commit -m 'Update database ERD documentation'"
              echo ""
              echo "üìñ Documentation guide: docs/dev/database/migration.md#database-documentation-erd-generation"
              
            elif [ "$MIGRATION_CHANGED" = true ] && [ "$ERD_CHANGED" = false ]; then
              echo "üîß ISSUE: Schema changes detected that require proper migrations"
              echo ""
              echo "üí° SOLUTION:"
              echo "Database schema differs from entity definitions. You need to create and validate migrations:"
              echo ""
              echo "   # Review the detected changes"
              echo "   npm run db:draft-changelog"
              echo ""
              echo "   # Validate the migration thoroughly (check for data loss!)"
              echo "   # Edit author, rename file, and move to changelog directory"
              echo "   # Then update documentation"
              echo "   npm run db:generate-erd-docs"
              echo ""
              echo "üìñ Migration creation guide: docs/dev/database/migration.md#creating-new-migrations-with-liquibase"

            elif [ "$OTHER_CHANGES" = true ]; then
              echo "‚ùì ISSUE: Unexpected files were modified during validation"
              echo ""
              echo "üí° SOLUTION:"
              echo "Investigate the unexpected changes:"
              echo ""
              echo "   # Review what changed"
              echo "   git diff --cached"
              echo ""
              echo "üìñ Troubleshooting guide: docs/dev/database/migration.md#troubleshooting-common-issues"
            fi
            
            echo ""
            echo "üõ°Ô∏è  DATABASE SAFETY REMINDER:"
            echo "This validation ensures that:"
            echo "‚Ä¢ All database schema changes are captured in versioned migrations"
            echo "‚Ä¢ Database documentation accurately reflects the current schema"
            echo "‚Ä¢ No manual schema changes were made outside of the migration system"
            echo "‚Ä¢ Team members can reliably reproduce the database state"
            
            # Show generated changelog content if it exists for debugging
            if [ -f "server/application-server/src/main/resources/db/changelog_new.xml" ]; then
              echo ""
              echo "üìÑ Generated migration content (review carefully for data safety):"
              echo "=========================================="
              cat server/application-server/src/main/resources/db/changelog_new.xml
              echo "=========================================="
              echo ""
              echo "‚ö†Ô∏è  CRITICAL: Always validate generated migrations for data loss patterns!"
              echo "   Look for: dropColumn + addColumn (should be renameColumn)"
              echo "   Look for: Incorrect sequence start values"
              echo "   Look for: System objects that shouldn't be in migrations"
            fi
            
            exit 1
          fi