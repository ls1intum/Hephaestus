# This workflow validates that database migrations are complete and up-to-date
# It ensures that:
# 1. All Liquibase migrations apply successfully
# 2. No manual schema changes were made outside of migrations
# 3. Database documentation (ERD) reflects the current schema
#
# If this check fails, it will show you the exact commands to run.
# For detailed instructions, see: docs/dev/database_migration/index.md

name: Database Migration Validation

on:
  pull_request:
    types: [opened, synchronize, labeled, reopened]
    paths:
      - 'server/application-server/**'
      - 'supporting_scripts/**'
      - 'package.json'
      - '.github/workflows/liquibase-migration-check.yml'
  workflow_dispatch:

jobs:
  database-validation:
    name: Database Migration Validation
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: hephaestus
          POSTGRES_PASSWORD: root
          POSTGRES_USER: root
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'  

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
    
      - name: Build application (compile only)
        working-directory: server/application-server
        run: mvn compile -DskipTests

      - name: Apply database migrations
        working-directory: server/application-server
        run: mvn liquibase:update

      - name: Validate migration integrity
        working-directory: server/application-server
        run: mvn liquibase:diff

      - name: Set up Python for ERD generation
      - name: Set up Python for ERD generation
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Generate Database ERD
        run: |
          # Use the existing PostgreSQL service instead of starting a new container
          cd supporting_scripts
          python3 -m pip install -r requirements.txt --break-system-packages --quiet
          python3 generate_mermaid_erd.py jdbc:postgresql://localhost:5432/hephaestus root root ../docs/dev/database-schema.mmd

      - name: Check for unexpected schema changes
        id: check_changes
        run: |
          echo "🔍 Validating that database schema matches migrations..."
          
          # Check if any files were modified during migration/ERD generation
          git add .
          if git diff --cached --quiet; then
            echo "✅ Database schema is in sync with migrations"
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          else
            echo "⚠️  Database schema changes detected!"
            echo ""
            echo "Changed files:"
            git diff --cached --name-only
            echo ""
            
            # Detect what types of changes occurred
            ERD_CHANGED=false
            MIGRATION_CHANGED=false
            
            if ! git diff --cached --quiet docs/dev/database-schema.mmd; then
              ERD_CHANGED=true
            fi
            
            if [ -f "server/application-server/src/main/resources/db/changelog_new.xml" ] || \
               git diff --cached --name-only | grep -q "server/application-server/src/main/resources/db/changelog"; then
              MIGRATION_CHANGED=true
            fi
            
            # Provide specific solutions based on what changed
            if [ "$ERD_CHANGED" = true ] && [ "$MIGRATION_CHANGED" = true ]; then
              echo "🔧 SOLUTION: Both migrations and documentation need attention."
              echo ""
              echo "Run these commands:"
              echo "  npm run db:changelog:diff"
              echo "  npm run db:erd:generate"
              echo ""
              echo "📖 See detailed instructions: docs/dev/database_migration/index.md"
              
            elif [ "$ERD_CHANGED" = true ] && [ "$MIGRATION_CHANGED" = false ]; then
              echo "📝 SOLUTION: Database documentation is out of sync."
              echo ""
              echo "Run this command:"
              echo "  npm run db:erd:generate"
              echo ""
              echo "📖 See detailed instructions: docs/dev/database_migration/index.md#database-documentation-erd-generation"
              
            elif [ "$ERD_CHANGED" = false ] && [ "$MIGRATION_CHANGED" = true ]; then
              echo "🔧 SOLUTION: Database schema changes need proper migrations."
              echo ""
              echo "Run these commands:"
              echo "  npm run db:changelog:diff"
              echo "  npm run db:erd:generate"
              echo ""
              echo "📖 See detailed instructions: docs/dev/database_migration/index.md#creating-new-migrations-with-liquibase"
              
            else
              echo "❓ SOLUTION: Unexpected file changes detected."
              echo ""
              echo "Run this command to investigate:"
              echo "  git diff --cached --name-only"
              echo ""
              echo "📖 See documentation: docs/dev/database_migration/index.md"
            fi
            
            echo ""
            echo "💡 EXPLANATION:"
            echo "This check ensures that:"
            echo "• All database schema changes are captured in Liquibase migrations"
            echo "• Database documentation (ERD) reflects the current schema"
            echo "• No manual schema changes were made outside of migrations"
            echo ""
            
            if [ -f "server/application-server/src/main/resources/db/changelog_new.xml" ]; then
              echo "📄 Generated changelog content:"
              echo "----------------------------------------"
              cat server/application-server/src/main/resources/db/changelog_new.xml
              echo "----------------------------------------"
            fi
            
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Validate ERD documentation is up-to-date
        if: steps.check_changes.outputs.changes_detected == 'false'
        run: |
          echo "📊 Checking if database documentation needs updating..."
          
          # Check specifically for ERD file changes
          if git diff --cached --quiet docs/dev/database-schema.mmd; then
            echo "✅ Database ERD documentation is up-to-date"
          else
            echo "📝 Database ERD has been updated to reflect current schema"
            echo ""
            echo "The following documentation files were updated:"
            git diff --cached --name-only docs/
            echo ""
            echo "💡 NEXT STEPS:"
            echo "Consider committing these documentation updates:"
            echo "  git add docs/dev/database-schema.mmd"
            echo "  git commit -m 'Update database ERD documentation'"
            echo ""
            echo "This keeps the ERD in sync with your schema changes."
          fi