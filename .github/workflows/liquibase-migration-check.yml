# This workflow validates that database migrations are complete and up-to-date
# It ensures that:
# 1. All Liquibase migrations apply successfully
# 2. No manual schema changes were made outside of migrations
# 3. Database documentation (ERD) reflects the current schema
#
# If this check fails, it usually means you need to create additional
# Liquibase migration files to capture your schema changes.

name: Database Migration Validation

on:
  pull_request:
    types: [opened, synchronize, labeled, reopened]
    paths:
      - 'server/application-server/**'
      - 'supporting_scripts/**'
      - 'package.json'
      - '.github/workflows/liquibase-migration-check.yml'
  workflow_dispatch:

jobs:
  database-validation:
    name: Database Migration Validation
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: hephaestus
          POSTGRES_PASSWORD: root
          POSTGRES_USER: root
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'  

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
    
      - name: Build application (compile only)
        working-directory: server/application-server
        run: mvn compile -DskipTests

      - name: Apply database migrations
        working-directory: server/application-server
        run: mvn liquibase:update

      - name: Validate migration integrity
        working-directory: server/application-server
        run: mvn liquibase:diff

      - name: Set up Python for ERD generation
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Generate Database ERD
        run: npm run db:erd:generate

      - name: Check for unexpected schema changes
        id: check_changes
        run: |
          echo "🔍 Validating that database schema matches migrations..."
          
          # Check if any files were modified during migration/ERD generation
          git add .
          if git diff --cached --quiet; then
            echo "✅ Database schema is in sync with migrations"
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          else
            echo "⚠️  Unexpected changes detected after running migrations:"
            echo ""
            echo "Changed files:"
            git diff --cached --name-only
            echo ""
            echo "This usually means:"
            echo "1. Database migrations are missing for some schema changes"
            echo "2. The ERD generation script found schema differences"
            echo "3. Manual schema changes were made outside of migrations"
            echo ""
            echo "Please review the changes and ensure all schema modifications"
            echo "are properly captured in Liquibase migration files."
            echo ""
            if [ -f "server/application-server/src/main/resources/db/changelog_new.xml" ]; then
              echo "Generated changelog content:"
              cat server/application-server/src/main/resources/db/changelog_new.xml
            fi
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Validate ERD documentation is up-to-date
        if: steps.check_changes.outputs.changes_detected == 'false'
        run: |
          echo "📊 Checking if database documentation needs updating..."
          
          # Check specifically for ERD file changes
          if git diff --cached --quiet docs/dev/database-schema.mmd; then
            echo "✅ Database ERD documentation is up-to-date"
          else
            echo "📝 Database ERD has been updated to reflect current schema"
            echo ""
            echo "The following documentation files were updated:"
            git diff --cached --name-only docs/
            echo ""
            echo "💡 Consider committing these documentation updates"
            echo "   to keep the ERD in sync with your schema changes."
          fi