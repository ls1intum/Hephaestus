name: Quality Gates

on:
  workflow_call:
    inputs:
      should_skip:
        description: "Whether to skip the workflow"
        required: false
        type: string
        default: "false"

jobs:
  # Quality gates with intelligent caching and error handling
  quality-gates:
    name: ${{ matrix.check }}
    runs-on: ubuntu-latest
    if: inputs.should_skip != 'true'
    timeout-minutes: ${{ contains(fromJSON('["database-schema-validation", "database-documentation-validation"]'), matrix.check) && 20 || 15 }}
    strategy:
      fail-fast: false
      matrix:
        check:
          [
            application-server-quality,
            webapp-quality,
            intelligence-service-quality,
            webhook-ingest-quality,
            openapi-validation,
            database-schema-validation,
            database-documentation-validation,
          ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Advanced cache setup with fallback
      - name: Setup shared caches
        uses: ./.github/actions/setup-caches
        with:
          cache-type: ${{ matrix.check }}
          os: ${{ runner.os }}

      # Additional cache for webapp build artifacts
      - name: Cache webapp build artifacts
        if: matrix.check == 'webapp-quality'
        uses: actions/cache@v4
        with:
          path: |
            webapp-react/dist
            webapp-react/.vite
            webapp-react/node_modules/.vite
            webapp-react/node_modules/.cache
          key: ${{ runner.os }}-webapp-build-${{ hashFiles('package-lock.json', 'webapp-react/package-lock.json', 'webapp-react/biome.json', 'webapp-react/tsconfig.json', 'webapp-react/vite.config.js', 'webapp-react/components.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-webapp-build-${{ hashFiles('package-lock.json', 'webapp-react/package-lock.json', 'webapp-react/biome.json', 'webapp-react/tsconfig.json', 'webapp-react/vite.config.js', 'webapp-react/components.json') }}-
            ${{ runner.os }}-webapp-build-

      # Application Server code quality and formatting
      - name: Application Server formatting & static analysis
        if: matrix.check == 'application-server-quality'
        run: |
          echo "üîç Checking Application Server code formatting and style..."

          # Install dependencies if not cached
          if [ ! -d "node_modules" ]; then
            npm ci --prefer-offline --no-audit
          fi

          # Run Application Server formatting check and capture output
          echo "üé® Running Prettier formatting check..."
          npm run format:application-server:check 2>&1 | tee application-server-format-results.txt
          FORMAT_EXIT_CODE=${PIPESTATUS[0]}

          # Generate summary based on results
          if [ $FORMAT_EXIT_CODE -eq 0 ]; then
            echo "## ‚úÖ Application Server Code Quality Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Formatting**: All Application Server files follow Prettier formatting rules" >> $GITHUB_STEP_SUMMARY
            echo "- **Style Guide**: Code adheres to project style guidelines" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ All Application Server formatting checks passed successfully"
          else
            echo "## ‚ùå Application Server Code Quality Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Formatting**: Code formatting issues detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Files with formatting issues:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -E '\[warn\]' application-server-format-results.txt | sed 's/\[warn\] /- /' >> $GITHUB_STEP_SUMMARY || echo "- Check the logs above for details" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To fix these issues:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo 'npm run format:application-server:write' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Application Server formatting check failed"
            exit 1
          fi

      # Webapp quality checks with comprehensive validation
      - name: Webapp quality & type checking
        if: matrix.check == 'webapp-quality'
        working-directory: ./webapp-react
        run: |
          echo "üîç Running comprehensive webapp quality checks..."

          # Install dependencies if not cached
          if [ ! -d "node_modules" ]; then
            echo "üì¶ Installing dependencies..."
            npm ci --prefer-offline --no-audit --progress=false
          else
            echo "üì¶ Dependencies restored from cache"
          fi

          # Run Biome check (linting + formatting + imports)
          echo "üé® Running Biome code quality checks..."
          npm run check 2>&1 | tee biome-results.txt
          BIOME_EXIT_CODE=${PIPESTATUS[0]}

          # TypeScript compilation check
          echo "üìä Running TypeScript compilation check..."
          npx tsc --noEmit --pretty 2>&1 | tee typescript-results.txt
          TSC_EXIT_CODE=${PIPESTATUS[0]}

          # Build check to ensure everything compiles
          echo "üèóÔ∏è Running build verification..."
          npm run build 2>&1 | tee build-results.txt
          BUILD_EXIT_CODE=${PIPESTATUS[0]}

          # Package audit for security vulnerabilities
          echo "üîí Running security audit..."
          npm audit --audit-level=high --progress=false 2>&1 | tee audit-results.txt || true

          # Bundle size analysis
          echo "üìè Analyzing bundle size..."
          if [ -d "dist" ]; then
            BUNDLE_SIZE=$(du -sh dist | cut -f1)
            echo "Bundle size: $BUNDLE_SIZE"
          fi

          # Generate comprehensive summary
          echo "## ‚úÖ Webapp Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY

          if [ $BIOME_EXIT_CODE -eq 0 ]; then
            echo "| **Biome Quality** | ‚úÖ Passed | Code formatting, linting, and imports are correct |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Biome Quality** | ‚ùå Failed | Code quality issues detected |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ $TSC_EXIT_CODE -eq 0 ]; then
            echo "| **TypeScript** | ‚úÖ Passed | All type checks passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **TypeScript** | ‚ùå Failed | Type errors detected |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "| **Build** | ‚úÖ Passed | Application builds successfully |" >> $GITHUB_STEP_SUMMARY
            if [ -n "$BUNDLE_SIZE" ]; then
              echo "| **Bundle Size** | üìä $BUNDLE_SIZE | Production bundle analysis |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| **Build** | ‚ùå Failed | Build errors detected |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "| **Security** | üîí Scanned | Dependency vulnerabilities checked |" >> $GITHUB_STEP_SUMMARY

          # Exit with error if any critical checks failed
          if [ $BIOME_EXIT_CODE -ne 0 ] || [ $TSC_EXIT_CODE -ne 0 ] || [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "‚ùå One or more quality checks failed"
            exit 1
          fi

          echo "‚úÖ All webapp quality checks passed successfully"

      # Intelligence Service quality checks with comprehensive validation
      - name: Intelligence Service quality & security analysis
        if: matrix.check == 'intelligence-service-quality'
        run: |
          set -o pipefail  # Make pipelines fail if any command fails
          echo "üîç Running comprehensive Intelligence Service quality checks..."

          # Track issues found
          ISSUES_FOUND=()
          OVERALL_SUCCESS=true

          # Intelligence Service checks
          echo "üìù Checking Intelligence Service..."
          cd server/intelligence-service

          if [ ! -d ".venv" ]; then
            poetry install --no-interaction --no-root
          fi

          # Code formatting
          echo "üé® Checking code formatting..."
          poetry run black --check --diff . 2>&1 | tee black-results.txt
          INTELLIGENCE_BLACK_EXIT_CODE=${PIPESTATUS[0]}
          if [ $INTELLIGENCE_BLACK_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Intelligence Service: Black formatting check failed"
            ISSUES_FOUND+=("Intelligence Service: Black formatting needs fixing")
            OVERALL_SUCCESS=false
          else
            echo "‚úÖ Intelligence Service: Black formatting check passed"
          fi

          # Linting
          echo "üîç Running flake8 linting..."
          poetry run flake8 . --statistics --count 2>&1 | tee flake8-results.txt
          INTELLIGENCE_FLAKE8_EXIT_CODE=${PIPESTATUS[0]}
          if [ $INTELLIGENCE_FLAKE8_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Intelligence Service: Flake8 linting failed"
            ISSUES_FOUND+=("Intelligence Service: Flake8 linting issues found")
            OVERALL_SUCCESS=false
          else
            echo "‚úÖ Intelligence Service: Flake8 linting passed"
          fi

          # Type checking (if mypy is available)
          if poetry show mypy > /dev/null 2>&1; then
            echo "üìä Running type checking..."
            poetry run mypy . --ignore-missing-imports --show-error-codes 2>&1 | tee mypy-results.txt
            INTELLIGENCE_MYPY_EXIT_CODE=${PIPESTATUS[0]}
            if [ $INTELLIGENCE_MYPY_EXIT_CODE -ne 0 ]; then
              echo "‚ö†Ô∏è Intelligence Service: MyPy type checking found issues (warning only)"
              ISSUES_FOUND+=("Intelligence Service: MyPy type checking issues (warning)")
              # Type checking issues are warnings, not failures
            else
              echo "‚úÖ Intelligence Service: MyPy type checking passed"
            fi
          fi

          # Security check (if bandit is available)
          if poetry show bandit > /dev/null 2>&1; then
            echo "üîí Running security analysis..."
            poetry run bandit -r app/ -f json -o bandit-results.json 2>&1
            INTELLIGENCE_BANDIT_EXIT_CODE=${PIPESTATUS[0]}
            if [ $INTELLIGENCE_BANDIT_EXIT_CODE -ne 0 ]; then
              echo "‚ö†Ô∏è Intelligence Service: Bandit security analysis found issues (warning only)"
              ISSUES_FOUND+=("Intelligence Service: Security analysis issues (warning)")
              # Security issues are warnings, not failures for now
            else
              echo "‚úÖ Intelligence Service: Bandit security analysis passed"
            fi
          fi

          cd ../..

          # Generate comprehensive summary
          echo ""
          echo "üìä Intelligence Service Quality Check Summary:"
          echo "============================================="

          if [ ${#ISSUES_FOUND[@]} -eq 0 ]; then
            echo "‚úÖ All Intelligence Service quality checks passed successfully!"
            echo ""
            echo "## ‚úÖ Intelligence Service Quality Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Intelligence Service**: All checks passed ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- **Code Formatting**: All Python files follow Black formatting" >> $GITHUB_STEP_SUMMARY
            echo "- **Linting**: Code passes Flake8 quality checks" >> $GITHUB_STEP_SUMMARY
            echo "- **Type Safety**: Static type analysis completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Security**: Code security analysis performed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Found ${#ISSUES_FOUND[@]} issue(s):"
            for issue in "${ISSUES_FOUND[@]}"; do
              echo "  ‚Ä¢ $issue"
            done
            echo ""
            echo "## ‚ùå Intelligence Service Quality Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following issues need to be addressed:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            for issue in "${ISSUES_FOUND[@]}"; do
              echo "- $issue" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To fix formatting issues:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo 'cd server/intelligence-service && poetry run black .' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          # Exit with appropriate code
          if [ "$OVERALL_SUCCESS" = false ]; then
            echo ""
            echo "‚ùå Intelligence Service quality checks failed - please fix the issues above"
            exit 1
          fi

      # Webhook Ingest quality checks with comprehensive validation
      - name: Webhook Ingest quality & security analysis
        if: matrix.check == 'webhook-ingest-quality'
        run: |
          set -o pipefail  # Make pipelines fail if any command fails
          echo "üîç Running comprehensive Webhook Ingest quality checks..."

          # Track issues found
          ISSUES_FOUND=()
          OVERALL_SUCCESS=true

          # Webhook Ingest checks
          echo "üìù Checking Webhook Ingest..."
          cd server/webhook-ingest

          if [ ! -d ".venv" ]; then
            poetry install --no-interaction --no-root
          fi

          # Code formatting
          echo "üé® Checking webhook-ingest code formatting..."
          poetry run black --check --diff . 2>&1 | tee webhook-black-results.txt
          WEBHOOK_BLACK_EXIT_CODE=${PIPESTATUS[0]}
          if [ $WEBHOOK_BLACK_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Webhook Ingest: Black formatting check failed"
            ISSUES_FOUND+=("Webhook Ingest: Black formatting needs fixing")
            OVERALL_SUCCESS=false
          else
            echo "‚úÖ Webhook Ingest: Black formatting check passed"
          fi

          # Linting
          echo "üîç Running webhook-ingest flake8 linting..."
          poetry run flake8 . --statistics --count 2>&1 | tee webhook-flake8-results.txt
          WEBHOOK_FLAKE8_EXIT_CODE=${PIPESTATUS[0]}
          if [ $WEBHOOK_FLAKE8_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Webhook Ingest: Flake8 linting failed"
            ISSUES_FOUND+=("Webhook Ingest: Flake8 linting issues found")
            OVERALL_SUCCESS=false
          else
            echo "‚úÖ Webhook Ingest: Flake8 linting passed"
          fi

          # Type checking (if mypy is available)
          if poetry show mypy > /dev/null 2>&1; then
            echo "üìä Running type checking..."
            poetry run mypy . --ignore-missing-imports --show-error-codes 2>&1 | tee mypy-results.txt
            WEBHOOK_MYPY_EXIT_CODE=${PIPESTATUS[0]}
            if [ $WEBHOOK_MYPY_EXIT_CODE -ne 0 ]; then
              echo "‚ö†Ô∏è Webhook Ingest: MyPy type checking found issues (warning only)"
              ISSUES_FOUND+=("Webhook Ingest: MyPy type checking issues (warning)")
              # Type checking issues are warnings, not failures
            else
              echo "‚úÖ Webhook Ingest: MyPy type checking passed"
            fi
          fi

          # Security check (if bandit is available)
          if poetry show bandit > /dev/null 2>&1; then
            echo "üîí Running security analysis..."
            poetry run bandit -r app/ -f json -o bandit-results.json 2>&1
            WEBHOOK_BANDIT_EXIT_CODE=${PIPESTATUS[0]}
            if [ $WEBHOOK_BANDIT_EXIT_CODE -ne 0 ]; then
              echo "‚ö†Ô∏è Webhook Ingest: Bandit security analysis found issues (warning only)"
              ISSUES_FOUND+=("Webhook Ingest: Security analysis issues (warning)")
              # Security issues are warnings, not failures for now
            else
              echo "‚úÖ Webhook Ingest: Bandit security analysis passed"
            fi
          fi

          cd ../..

          # Generate comprehensive summary
          echo ""
          echo "üìä Webhook Ingest Quality Check Summary:"
          echo "======================================="

          if [ ${#ISSUES_FOUND[@]} -eq 0 ]; then
            echo "‚úÖ All Webhook Ingest quality checks passed successfully!"
            echo ""
            echo "## ‚úÖ Webhook Ingest Quality Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Webhook Ingest**: All checks passed ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- **Code Formatting**: All Python files follow Black formatting" >> $GITHUB_STEP_SUMMARY
            echo "- **Linting**: Code passes Flake8 quality checks" >> $GITHUB_STEP_SUMMARY
            echo "- **Type Safety**: Static type analysis completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Security**: Code security analysis performed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Found ${#ISSUES_FOUND[@]} issue(s):"
            for issue in "${ISSUES_FOUND[@]}"; do
              echo "  ‚Ä¢ $issue"
            done
            echo ""
            echo "## ‚ùå Webhook Ingest Quality Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following issues need to be addressed:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            for issue in "${ISSUES_FOUND[@]}"; do
              echo "- $issue" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To fix formatting issues:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo 'cd server/webhook-ingest && poetry run black .' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          # Exit with appropriate code
          if [ "$OVERALL_SUCCESS" = false ]; then
            echo ""
            echo "‚ùå Webhook Ingest quality checks failed - please fix the issues above"
            exit 1
          fi

      # OpenAPI validation with intelligent auto-commit
      - name: OpenAPI validation & synchronization
        if: matrix.check == 'openapi-validation'
        run: |
          echo "üîç Validating OpenAPI specifications and clients..."

          # Install all dependencies
          if [ ! -d "node_modules" ]; then
            npm ci --prefer-offline --no-audit
          fi

          # Setup Python environments
          cd server/intelligence-service
          if [ ! -d ".venv" ]; then
            poetry install --no-interaction --no-root
          fi
          cd ../..

          # Setup Application Server environment
          cd server/application-server
          if [ ! -d "target" ]; then
            mvn compile -DskipTests --quiet
          fi
          cd ../..

          echo "üîÑ Generating OpenAPI specifications and clients..."

          # Generate all OpenAPI specs and clients
          npm run generate:api

          # Check for any changes
          git add .

          if ! git diff --cached --quiet; then
            echo "üìù OpenAPI changes detected..."
            
            # Show what changed
            echo "## üîÑ OpenAPI Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "The following OpenAPI-related files have changes:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            git diff --cached --name-only >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To resolve this:**" >> $GITHUB_STEP_SUMMARY
            echo "1. **Recommended**: Add the \`autocommit-openapi\` label to this PR for automatic updates" >> $GITHUB_STEP_SUMMARY
            echo "2. **Manual**: Run \`npm run generate:api\` locally and commit the changes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Manual commands:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo 'npm run generate:api' >> $GITHUB_STEP_SUMMARY
            echo 'git add .' >> $GITHUB_STEP_SUMMARY
            echo 'git commit -m "chore: update OpenAPI specs and clients"' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            echo "‚ùå OpenAPI validation failed - changes detected"
            exit 1
          else
            echo "## ‚úÖ OpenAPI Validation Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Specifications**: All OpenAPI specs are up to date" >> $GITHUB_STEP_SUMMARY
            echo "- **Application Server Clients**: Generated clients match current specs" >> $GITHUB_STEP_SUMMARY
            echo "- **TypeScript Clients**: Generated clients match current specs" >> $GITHUB_STEP_SUMMARY
            echo "- **Consistency**: All API contracts are synchronized" >> $GITHUB_STEP_SUMMARY
          fi

      # Database schema validation - JPA entities vs committed migrations
      - name: Database schema validation
        if: matrix.check == 'database-schema-validation'
        run: |
          echo "üîç Validating JPA entities match committed migrations..."

          # Start PostgreSQL service for schema operations
          echo "üêò Starting PostgreSQL service for schema validation..."
          docker run -d \
            --name postgres-schema \
            -e POSTGRES_DB=hephaestus \
            -e POSTGRES_PASSWORD=root \
            -e POSTGRES_USER=root \
            -p 5432:5432 \
            --health-cmd="pg_isready" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
            postgres:16

          # Wait for PostgreSQL to be ready
          echo "‚è≥ Waiting for PostgreSQL to be ready..."
          until docker exec postgres-schema pg_isready -U root -d hephaestus; do
            echo "PostgreSQL is not ready yet, waiting..."
            sleep 2
          done
          echo "‚úÖ PostgreSQL is ready for schema validation"

          # Set environment variables for database connection
          export SPRING_DATASOURCE_URL="jdbc:postgresql://localhost:5432/hephaestus"
          export SPRING_DATASOURCE_USERNAME="root"
          export SPRING_DATASOURCE_PASSWORD="root"

          # Build Application Server for schema operations
          echo "üèóÔ∏è Building Application Server for schema validation..."
          cd server/application-server
          if ! mvn compile -DskipTests --quiet; then
            echo "‚ùå Failed to build Application Server for schema validation"
            docker stop postgres-schema && docker rm postgres-schema
            exit 1
          fi
          cd ../..

          # Check for schema drift between JPA entities and committed migrations
          echo "üìä Checking for schema drift between JPA entities and committed migrations..."
          if ! scripts/db-utils.sh draft-changelog; then
            echo "‚ùå Failed to generate draft changelog for schema validation"
            docker stop postgres-schema && docker rm postgres-schema
            exit 1
          fi

          # Clean up PostgreSQL container
          echo "üßπ Cleaning up PostgreSQL container..."
          docker stop postgres-schema && docker rm postgres-schema

          # Check results and generate summary
          if [ -f "server/application-server/src/main/resources/db/changelog_new.xml" ]; then
            echo "## ‚ùå Schema Drift Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Issue:** Your JPA entity definitions have changes that are not reflected in committed database migrations." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**What this means:**" >> $GITHUB_STEP_SUMMARY
            echo "- Entity code has changes compared to the current migration-generated schema" >> $GITHUB_STEP_SUMMARY
            echo "- New migrations need to be created and committed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Fix Required:** Run these commands locally:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo 'npm run db:draft-changelog' >> $GITHUB_STEP_SUMMARY
            echo '# Review, edit author, rename file, move to changelog/' >> $GITHUB_STEP_SUMMARY
            echo 'npm run db:generate-erd-docs' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Generated Migration:**" >> $GITHUB_STEP_SUMMARY
            echo '```xml' >> $GITHUB_STEP_SUMMARY
            cat server/application-server/src/main/resources/db/changelog_new.xml >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Schema validation failed. Check the CI summary above for details."
            exit 1
          else
            echo "## ‚úÖ Database Schema Validation Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Schema Consistency**: JPA entities match committed migrations ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- **Migration State**: No schema drift detected" >> $GITHUB_STEP_SUMMARY
            echo "- **Database**: Schema is properly synchronized with entity definitions" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Schema validation passed - JPA entities match committed migrations"
          fi

      # Database documentation validation - ERD matches migration-based schema
      - name: Database documentation validation
        if: matrix.check == 'database-documentation-validation'
        run: |
          echo "üìä Validating ERD documentation matches migration-based schema..."

          # Start PostgreSQL service for ERD generation
          echo "üêò Starting PostgreSQL service for ERD documentation validation..."
          docker run -d \
            --name postgres-erd \
            -e POSTGRES_DB=hephaestus \
            -e POSTGRES_PASSWORD=root \
            -e POSTGRES_USER=root \
            -p 5432:5432 \
            --health-cmd="pg_isready" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
            postgres:16

          # Wait for PostgreSQL to be ready
          echo "‚è≥ Waiting for PostgreSQL to be ready..."
          until docker exec postgres-erd pg_isready -U root -d hephaestus; do
            echo "PostgreSQL is not ready yet, waiting..."
            sleep 2
          done
          echo "‚úÖ PostgreSQL is ready for ERD generation"

          # Set environment variables for database connection
          export SPRING_DATASOURCE_URL="jdbc:postgresql://localhost:5432/hephaestus"
          export SPRING_DATASOURCE_USERNAME="root"
          export SPRING_DATASOURCE_PASSWORD="root"

          # Build Application Server for ERD operations
          echo "üèóÔ∏è Building Application Server for ERD documentation validation..."
          cd server/application-server
          if ! mvn compile -DskipTests --quiet; then
            echo "‚ùå Failed to build Application Server for ERD documentation validation"
            docker stop postgres-erd && docker rm postgres-erd
            exit 1
          fi
          cd ../..

          # Generate ERD documentation from committed migration-based schema
          echo "üìà Generating ERD from committed migration-based schema..."
          echo "Note: ERD always reflects the current committed migration state, not entity code changes"
          if ! scripts/db-utils.sh generate-erd; then
            echo "‚ùå Failed to generate ERD documentation"
            docker stop postgres-erd && docker rm postgres-erd
            exit 1
          fi

          # Clean up PostgreSQL container
          echo "üßπ Cleaning up PostgreSQL container..."
          docker stop postgres-erd && docker rm postgres-erd

          # Check if ERD documentation is up to date
          git add docs/dev/database/schema.mmd

          if ! git diff --cached --quiet docs/dev/database/schema.mmd; then
            echo "## ‚ùå ERD Documentation Outdated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Issue:** The committed ERD documentation does not match the current migration-based database schema." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**What this means:**" >> $GITHUB_STEP_SUMMARY
            echo "- Committed migrations have been updated without updating the ERD documentation" >> $GITHUB_STEP_SUMMARY
            echo "- ERD documentation is out of sync with the actual migration-generated schema" >> $GITHUB_STEP_SUMMARY
            echo "- ERD always reflects migration state, not entity code (entity changes need migrations first)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Fix Required:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo 'npm run db:generate-erd-docs' >> $GITHUB_STEP_SUMMARY
            echo 'git add docs/dev/database/schema.mmd' >> $GITHUB_STEP_SUMMARY
            echo 'git commit -m "Update database ERD documentation"' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Changes detected in ERD file:**" >> $GITHUB_STEP_SUMMARY
            echo '```diff' >> $GITHUB_STEP_SUMMARY
            git diff --cached docs/dev/database/schema.mmd >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "‚ùå ERD documentation validation failed. Check the CI summary above for details."
            exit 1
          else
            echo "## ‚úÖ Database Documentation Validation Results" >> $GITHUB_STEP_SUMMARY
            echo "- **ERD Documentation**: Documentation matches current migration state ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- **Schema Synchronization**: ERD reflects actual migration-generated schema" >> $GITHUB_STEP_SUMMARY
            echo "- **Documentation**: Database documentation is up to date" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ ERD documentation validation passed - ERD matches migration-based schema"
          fi

      # Enhanced error handling and reporting
      - name: Quality gate status report
        if: always()
        run: |
          echo "üìä Quality Gate: ${{ matrix.check }} - Status: ${{ job.status }}"

          if [[ "${{ job.status }}" == "failure" ]]; then
            echo "## ‚ùå Quality Gate Failed: ${{ matrix.check }}" >> $GITHUB_STEP_SUMMARY
            echo "This quality gate must pass before merging. Please review the errors above." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ job.status }}" == "success" ]]; then
            echo "Quality gate passed successfully! ‚úÖ" >> $GITHUB_STEP_SUMMARY
          fi
