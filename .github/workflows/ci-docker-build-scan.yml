name: Docker Build and Scan

on:
  workflow_call:
    inputs:
      should_skip:
        description: "Whether to skip the workflow"
        required: false
        type: string
        default: "false"
    outputs:
      images_built:
        description: "Images that were successfully built"
        value: ${{ jobs.aggregate-results.outputs.images_built }}

env:
  # Global pipeline configuration
  MAVEN_OPTS: -Xmx2048m -XX:+UseParallelGC
  NODE_VERSION: 22
  PYTHON_VERSION: 3.13
  JAVA_VERSION: 21

jobs:
  # Build and scan webapp-react component
  build-scan-webapp:
    name: "Build & Scan: Webapp (React)"
    if: inputs.should_skip != 'true'
    uses: ls1intum/.github/.github/workflows/build-and-push-docker-image.yml@main
    with:
      image-name: "ls1intum/hephaestus/webapp-react"
      docker-file: "./webapp-react/Dockerfile"
      docker-context: "./webapp-react"
      registry: "ghcr.io"
      tags: |
        type=ref,event=branch
        type=ref,event=pr
        type=sha,prefix={{branch}}-,format=short
        pr-${{ github.event.number }}
      labels: |
        org.opencontainers.image.title=Hephaestus Webapp
        org.opencontainers.image.description=React-based frontend for Hephaestus
        org.opencontainers.image.vendor=AET TUM
        org.opencontainers.image.licenses=MIT
    secrets: inherit

  # Build and scan application-server component
  build-scan-application-server:
    name: "Build & Scan: Application Server"
    if: inputs.should_skip != 'true'
    uses: ls1intum/.github/.github/workflows/build-and-push-docker-image.yml@main
    with:
      image-name: "ls1intum/hephaestus/application-server"
      docker-file: "./server/application-server/Dockerfile"
      docker-context: "./server/application-server"
      registry: "ghcr.io"
      tags: |
        type=ref,event=branch
        type=ref,event=pr
        type=sha,prefix={{branch}}-,format=short
        pr-${{ github.event.number }}
      labels: |
        org.opencontainers.image.title=Hephaestus Application Server
        org.opencontainers.image.description=Spring Boot backend for Hephaestus
        org.opencontainers.image.vendor=AET TUM
        org.opencontainers.image.licenses=MIT
    secrets: inherit

  # Build and scan intelligence-service component
  build-scan-intelligence-service:
    name: "Build & Scan: Intelligence Service"
    if: inputs.should_skip != 'true'
    uses: ls1intum/.github/.github/workflows/build-and-push-docker-image.yml@main
    with:
      image-name: "ls1intum/hephaestus/intelligence-service"
      docker-file: "./server/intelligence-service/Dockerfile"
      docker-context: "./server/intelligence-service"
      registry: "ghcr.io"
      tags: |
        type=ref,event=branch
        type=ref,event=pr
        type=sha,prefix={{branch}}-,format=short
        pr-${{ github.event.number }}
      labels: |
        org.opencontainers.image.title=Hephaestus Intelligence Service
        org.opencontainers.image.description=FastAPI-based AI service for Hephaestus
        org.opencontainers.image.vendor=AET TUM
        org.opencontainers.image.licenses=MIT
    secrets: inherit

  # Build and scan webhook-ingest component
  build-scan-webhook-ingest:
    name: "Build & Scan: Webhook Ingest"
    if: inputs.should_skip != 'true'
    uses: ls1intum/.github/.github/workflows/build-and-push-docker-image.yml@main
    with:
      image-name: "ls1intum/hephaestus/webhook-ingest"
      docker-file: "./server/webhook-ingest/Dockerfile"
      docker-context: "./server/webhook-ingest"
      registry: "ghcr.io"
      tags: |
        type=ref,event=branch
        type=ref,event=pr
        type=sha,prefix={{branch}}-,format=short
        pr-${{ github.event.number }}
      labels: |
        org.opencontainers.image.title=Hephaestus Webhook Ingest
        org.opencontainers.image.description=Python-based webhook processor for Hephaestus
        org.opencontainers.image.vendor=AET TUM
        org.opencontainers.image.licenses=MIT
    secrets: inherit

  # Security scanning with Trivy for all built images
  security-scan:
    name: "Security Scan: ${{ matrix.component.name }}"
    runs-on: ubuntu-latest
    if: inputs.should_skip != 'true'
    needs: [build-scan-webapp, build-scan-application-server, build-scan-intelligence-service, build-scan-webhook-ingest]
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        component:
          - name: "webapp-react"
            image: "ghcr.io/ls1intum/hephaestus/webapp-react"
          - name: "application-server"
            image: "ghcr.io/ls1intum/hephaestus/application-server"
          - name: "intelligence-service"
            image: "ghcr.io/ls1intum/hephaestus/intelligence-service"
          - name: "webhook-ingest"
            image: "ghcr.io/ls1intum/hephaestus/webhook-ingest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.component.image }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results-${{ matrix.component.name }}.sarif"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
          trivyignores: ".trivyignore"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results-${{ matrix.component.name }}.sarif"

      - name: Generate security report
        if: always()
        run: |
          echo "## 🔒 Security Scan Results: ${{ matrix.component.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ matrix.component.image }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ job.status }}" == "failure" ]]; then
            echo "❌ **Security vulnerabilities detected!** Review the Security tab for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No critical or high vulnerabilities found.**" >> $GITHUB_STEP_SUMMARY
          fi

  # Aggregate results and provide summary
  aggregate-results:
    name: "Build & Scan Summary"
    runs-on: ubuntu-latest
    needs: [build-scan-webapp, build-scan-application-server, build-scan-intelligence-service, build-scan-webhook-ingest, security-scan]
    if: always() && inputs.should_skip != 'true'
    outputs:
      images_built: ${{ steps.summary.outputs.images_built }}
    steps:
      - name: Generate build summary
        id: summary
        run: |
          echo "## 🐳 Docker Build & Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check build results
          WEBAPP_STATUS="${{ needs.build-scan-webapp.result }}"
          SERVER_STATUS="${{ needs.build-scan-application-server.result }}"
          INTEL_STATUS="${{ needs.build-scan-intelligence-service.result }}"
          WEBHOOK_STATUS="${{ needs.build-scan-webhook-ingest.result }}"
          SCAN_STATUS="${{ needs.security-scan.result }}"
          
          echo "### Build Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Webapp**: $WEBAPP_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Application Server**: $SERVER_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Intelligence Service**: $INTEL_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Webhook Ingest**: $WEBHOOK_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: $SCAN_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "$WEBAPP_STATUS" == "success" && "$SERVER_STATUS" == "success" && "$INTEL_STATUS" == "success" && "$WEBHOOK_STATUS" == "success" && "$SCAN_STATUS" == "success" ]]; then
            echo "### ✅ Overall Result: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All Docker images built successfully and passed security scans." >> $GITHUB_STEP_SUMMARY
            echo "images_built=webapp-react,application-server,intelligence-service,webhook-ingest" >> $GITHUB_OUTPUT
          else
            echo "### ❌ Overall Result: FAILURE" >> $GITHUB_STEP_SUMMARY
            echo "One or more Docker builds or security scans failed. Check individual job logs for details." >> $GITHUB_STEP_SUMMARY
            echo "images_built=" >> $GITHUB_OUTPUT
            exit 1
          fi
