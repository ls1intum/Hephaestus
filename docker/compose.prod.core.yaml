services:
  reverse-proxy:
    image: traefik:v3.2
    restart: unless-stopped
    networks:
      - core-network
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    command:
      - "--ping=true"
      - "--ping.entrypoint=http"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.http.http.encodequerysemicolons=true"
      - "--entryPoints.http.http2.maxConcurrentStreams=50"
      - "--entrypoints.https.http.encodequerysemicolons=true"
      - "--entryPoints.https.http2.maxConcurrentStreams=50"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@tum.de"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http"
      - "--providers.docker=true"
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.entrypoints=http
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.services.traefik.loadbalancer.server.port=8080
    healthcheck:
      test: 'wget -qO- http://localhost:80/ping || exit 1'
      interval: 4s
      timeout: 2s
      retries: 5

  webhook-ingest:
    image: "ghcr.io/ls1intum/hephaestus/webhook-ingest:${IMAGE_TAG}"
    ports:
      - "4200"
    environment:
      NATS_URL: "nats://nats-server:4222"
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
    depends_on:
      nats-server:
        condition: service_healthy
    networks:
      - core-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.gzip.compress=true"
      - "traefik.http.middlewares.https-webhook-ingest-stripprefix.stripprefix.prefixes=/webhooks"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.http-webhook-ingest.entryPoints=http"
      - "traefik.http.routers.http-webhook-ingest.middlewares=redirect-to-https"
      - "traefik.http.routers.http-webhook-ingest.rule=Host(`${APP_HOSTNAME}`) && PathPrefix(`/webhooks`)"
      - "traefik.http.routers.https-webhook-ingest.entryPoints=https"
      - "traefik.http.routers.https-webhook-ingest.middlewares=https-webhook-ingest-stripprefix,gzip"
      - "traefik.http.routers.https-webhook-ingest.middlewares=gzip"
      - "traefik.http.routers.https-webhook-ingest.rule=Host(`${APP_HOSTNAME}`) && PathPrefix(`/webhooks`)"
      - "traefik.http.routers.https-webhook-ingest.tls.certresolver=letsencrypt"
      - "traefik.http.routers.https-webhook-ingest.tls=true"
      - "traefik.http.routers.http-webhook-ingest.priority=5"
      - "traefik.http.routers.https-webhook-ingest.priority=10"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 3s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nats-server:
    image: nats:alpine
    restart: unless-stopped
    # Lock down the 4222 port from the internet for production
    # We expose it to the host so we can interact with it from the host machine via the nats cli
    ports:
      - "4222:4222"
    command: ["--config", "/etc/nats/nats-server.conf"]
    volumes:
      - nats-data:/data
    configs:
      - source: nats-server.conf
        target: /etc/nats/nats-server.conf
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 3s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - core-network
    volumes:
      - keycloak-data:/opt/keycloak/data
    command:
      - start
    environment:
      - TZ=${TIMEZONE:-UTC}
      - KEYCLOAK_ADMIN=${KEYCLOAK_USER_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_PASSWORD_ADMIN}
      - KC_DB=postgres
      - KC_DB_USERNAME=root
      - KC_DB_PASSWORD=root
      - KC_DB_URL_PORT=5432
      - KC_DB_URL=jdbc:postgresql://postgres/keycloak
      - KC_HOSTNAME=${APP_HOSTNAME}
      - KC_HTTP_RELATIVE_PATH=/keycloak
      - KC_HTTP_ENABLED=${KC_HTTP_ENABLED:-true}
      - KC_HEALTH_ENABLED=${KC_HEALTH_ENABLED:-true}
      - KC_PROXY_HEADERS=${KC_PROXY_HEADERS:-xforwarded}
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.gzip.compress=true"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.http-keycloak.entryPoints=http"
      - "traefik.http.routers.http-keycloak.middlewares=redirect-to-https"
      - "traefik.http.routers.http-keycloak.rule=Host(`${APP_HOSTNAME}`) && PathPrefix(`/keycloak`)"
      - "traefik.http.routers.https-keycloak.entryPoints=https"
      - "traefik.http.routers.https-keycloak.rule=Host(`${APP_HOSTNAME}`) && PathPrefix(`/keycloak`)"
      - "traefik.http.routers.https-keycloak.tls.certresolver=letsencrypt"
      - "traefik.http.routers.https-keycloak.tls=true"
      - "traefik.http.routers.http-keycloak.priority=5"
      - "traefik.http.routers.https-keycloak.priority=10"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /keycloak/health/ready HTTP/1.1\r\nHost: localhost:9000\r\nConnection: close\r\n\r\n' >&3;cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1",
        ]
      interval: 5s
      timeout: 20s
      retries: 10

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    networks:
      - core-network
    volumes:
      - keycloak-postgresql-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}
      interval: 5s
      timeout: 20s
      retries: 10

networks:
  core-network:

volumes:
  nats-data: 
  keycloak-data:
  keycloak-postgresql-data:

configs:
  nats-server.conf:
    content: |
      listen: "0.0.0.0:4222" 

      http_port: 8222

      jetstream {
        store_dir: "/data"
        max_mem: 4G
        max_file: 50G
      }

      # No tls for production since we are not exposing the NATS ports to the host
