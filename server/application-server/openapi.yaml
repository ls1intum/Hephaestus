openapi: 3.1.0
info:
  title: Hephaestus API
  description: API documentation for the Hephaestus application server.
  contact:
    name: Felix T.J. Dietrich
    email: felixtj.dietrich@tum.de
  license:
    name: MIT License
    url: https://github.com/ls1intum/Hephaestus/blob/develop/LICENSE
  version: 0.9.0-rc.6
servers:
- url: /
  description: Default Server URL
paths:
  /workspace/user/{login}/team/{teamId}:
    put:
      tags:
      - workspace
      operationId: addTeamToUser
      parameters:
      - name: login
        in: path
        required: true
        schema:
          type: string
      - name: teamId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
    delete:
      tags:
      - workspace
      operationId: removeUserFromTeam
      parameters:
      - name: login
        in: path
        required: true
        schema:
          type: string
      - name: teamId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
  /workspace/teams:
    put:
      tags:
      - workspace
      operationId: createTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
  /workspace/teams/autoassign:
    put:
      tags:
      - workspace
      operationId: automaticallyAssignTeams
      responses:
        "200":
          description: OK
  /workspace/league/reset:
    put:
      tags:
      - workspace
      operationId: resetAndRecalculateLeagues
      responses:
        "200":
          description: OK
  /workspace/team/{teamId}/repository/{repositoryOwner}/{repositoryName}:
    post:
      tags:
      - workspace
      operationId: addRepositoryToTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: repositoryOwner
        in: path
        required: true
        schema:
          type: string
      - name: repositoryName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
    delete:
      tags:
      - workspace
      operationId: removeRepositoryFromTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: repositoryOwner
        in: path
        required: true
        schema:
          type: string
      - name: repositoryName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
  /workspace/team/{teamId}/label/{repositoryId}/{label}:
    post:
      tags:
      - workspace
      operationId: addLabelToTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: repositoryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: label
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
  /workspace/repositories/{owner}/{name}:
    post:
      tags:
      - workspace
      operationId: addRepositoryToMonitor
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      tags:
      - workspace
      operationId: removeRepositoryToMonitor
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /user/settings:
    get:
      tags:
      - user
      operationId: getUserSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
    post:
      tags:
      - user
      operationId: updateUserSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSettings"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
  /team/{id}/hide:
    post:
      tags:
      - team
      operationId: hideTeam
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
  /mentor/sessions:
    get:
      tags:
      - session
      operationId: getAllSessions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Session"
    post:
      tags:
      - session
      operationId: createNewSession
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
  /mentor/sessions/{sessionId}:
    get:
      tags:
      - message
      operationId: getMessages
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
    post:
      tags:
      - message
      operationId: createMessage
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /leaderboard:
    get:
      tags:
      - leaderboard
      operationId: getLeaderboard
      parameters:
      - name: after
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: before
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: team
        in: query
        required: false
        schema:
          type: string
      - name: sort
        in: query
        required: false
        schema:
          type: string
          enum:
          - SCORE
          - LEAGUE_POINTS
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LeaderboardEntry"
    post:
      tags:
      - leaderboard
      operationId: getUserLeagueStats
      parameters:
      - name: login
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeaderboardEntry"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeagueChange"
  /activity/user/{login}/badpractices:
    post:
      tags:
      - activity
      operationId: detectBadPracticesByUser
      parameters:
      - name: login
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /activity/pullrequest/{pullRequestId}/badpractices:
    post:
      tags:
      - activity
      operationId: detectBadPracticesForPullRequest
      parameters:
      - name: pullRequestId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /activity/badpractice/{badPracticeId}/resolve:
    post:
      tags:
      - activity
      operationId: resolveBadPractice
      parameters:
      - name: badPracticeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: state
        in: query
        required: true
        schema:
          type: string
          enum:
          - GOOD_PRACTICE
          - FIXED
          - CRITICAL_ISSUE
          - NORMAL_ISSUE
          - MINOR_ISSUE
          - WONT_FIX
          - WRONG
      responses:
        "200":
          description: OK
  /activity/badpractice/{badPracticeId}/feedback:
    post:
      tags:
      - activity
      operationId: provideFeedbackForBadPractice
      parameters:
      - name: badPracticeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BadPracticeFeedback"
        required: true
      responses:
        "200":
          description: OK
  /workspace/users:
    get:
      tags:
      - workspace
      operationId: getUsersWithTeams
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTeams"
  /workspace/repositories:
    get:
      tags:
      - workspace
      operationId: getRepositoriesToMonitor
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /user/{login}/profile:
    get:
      tags:
      - user
      operationId: getUserProfile
      parameters:
      - name: login
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
  /team/all:
    get:
      tags:
      - team
      operationId: getTeams
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamInfo"
  /meta:
    get:
      tags:
      - meta
      operationId: getMetaData
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetaData"
  /meta/contributors:
    get:
      tags:
      - meta
      operationId: getContributors
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contributor"
  /mentor/sessions/last:
    get:
      tags:
      - session
      operationId: getLastSession
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
  /activity/{login}:
    get:
      tags:
      - activity
      operationId: getActivityByUser
      parameters:
      - name: login
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
  /workspace/team/{teamId}:
    delete:
      tags:
      - workspace
      operationId: deleteTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
  /workspace/team/{teamId}/label/{labelId}:
    delete:
      tags:
      - workspace
      operationId: removeLabelFromTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: labelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
  /user:
    delete:
      tags:
      - user
      operationId: deleteUser
      responses:
        "200":
          description: OK
components:
  schemas:
    PullRequestInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        title:
          type: string
        state:
          type: string
          enum:
          - OPEN
          - CLOSED
        isDraft:
          type: boolean
        isMerged:
          type: boolean
        commentsCount:
          type: integer
          format: int32
        author:
          $ref: "#/components/schemas/UserInfo"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/LabelInfo"
        assignees:
          type: array
          items:
            $ref: "#/components/schemas/UserInfo"
        repository:
          $ref: "#/components/schemas/RepositoryInfo"
        additions:
          type: integer
          format: int32
        deletions:
          type: integer
          format: int32
        mergedAt:
          type: string
          format: date-time
        closedAt:
          type: string
          format: date-time
        htmlUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
      - additions
      - commentsCount
      - deletions
      - htmlUrl
      - id
      - isDraft
      - isMerged
      - number
      - state
      - title
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sentAt:
          type: string
          format: date-time
        sender:
          type: string
          enum:
          - MENTOR
          - USER
        content:
          type: string
        sessionId:
          type: integer
          format: int64
      required:
      - content
      - id
      - sender
      - sentAt
      - sessionId
    UserProfile:
      type: object
      properties:
        userInfo:
          $ref: "#/components/schemas/UserInfo"
        firstContribution:
          type: string
          format: date-time
        contributedRepositories:
          type: array
          items:
            $ref: "#/components/schemas/RepositoryInfo"
        reviewActivity:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestReviewInfo"
        openPullRequests:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestInfo"
      required:
      - contributedRepositories
      - firstContribution
      - userInfo
    RepositoryInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        nameWithOwner:
          type: string
        description:
          type: string
        htmlUrl:
          type: string
      required:
      - htmlUrl
      - id
      - name
      - nameWithOwner
    UserSettings:
      type: object
      properties:
        receiveNotifications:
          type: boolean
    UserTeams:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        name:
          type: string
        url:
          type: string
        teams:
          type: array
          items:
            $ref: "#/components/schemas/TeamInfo"
          uniqueItems: true
      required:
      - id
      - login
      - name
      - teams
      - url
    PullRequestWithBadPractices:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        title:
          type: string
        state:
          type: string
          enum:
          - OPEN
          - CLOSED
        isDraft:
          type: boolean
        isMerged:
          type: boolean
        labels:
          type: array
          items:
            $ref: "#/components/schemas/LabelInfo"
        repository:
          $ref: "#/components/schemas/RepositoryInfo"
        additions:
          type: integer
          format: int32
        deletions:
          type: integer
          format: int32
        htmlUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        badPracticeSummary:
          type: string
        badPractices:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestBadPractice"
        oldBadPractices:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestBadPractice"
      required:
      - additions
      - badPracticeSummary
      - badPractices
      - createdAt
      - deletions
      - htmlUrl
      - id
      - isDraft
      - isMerged
      - labels
      - number
      - oldBadPractices
      - repository
      - state
      - title
      - updatedAt
    PullRequestBaseInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        title:
          type: string
        state:
          type: string
          enum:
          - OPEN
          - CLOSED
        isDraft:
          type: boolean
        isMerged:
          type: boolean
        repository:
          $ref: "#/components/schemas/RepositoryInfo"
        htmlUrl:
          type: string
      required:
      - htmlUrl
      - id
      - isDraft
      - isMerged
      - number
      - state
      - title
    Contributor:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        name:
          type: string
        avatarUrl:
          type: string
        htmlUrl:
          type: string
        contributions:
          type: integer
          format: int32
      required:
      - avatarUrl
      - htmlUrl
      - id
      - login
      - name
    Activity:
      type: object
      properties:
        pullRequests:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestWithBadPractices"
      required:
      - pullRequests
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
        name:
          type: string
        htmlUrl:
          type: string
        leaguePoints:
          type: integer
          format: int32
      required:
      - avatarUrl
      - htmlUrl
      - id
      - login
      - name
    TeamInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        color:
          type: string
        repositories:
          type: array
          items:
            $ref: "#/components/schemas/RepositoryInfo"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/LabelInfo"
        members:
          type: array
          items:
            $ref: "#/components/schemas/UserInfo"
        hidden:
          type: boolean
      required:
      - color
      - hidden
      - id
      - labels
      - members
      - name
      - repositories
    PullRequestBadPractice:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        state:
          type: string
          enum:
          - GOOD_PRACTICE
          - FIXED
          - CRITICAL_ISSUE
          - NORMAL_ISSUE
          - MINOR_ISSUE
          - WONT_FIX
          - WRONG
      required:
      - description
      - id
      - state
      - title
    LeagueChange:
      type: object
      properties:
        login:
          type: string
        leaguePointsChange:
          type: integer
          format: int32
      required:
      - leaguePointsChange
      - login
    LabelInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        color:
          type: string
        repository:
          $ref: "#/components/schemas/RepositoryInfo"
      required:
      - color
      - id
      - name
    BadPracticeFeedback:
      type: object
      properties:
        type:
          type: string
        explanation:
          type: string
      required:
      - explanation
      - type
    PullRequestReviewInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        isDismissed:
          type: boolean
        state:
          type: string
          enum:
          - COMMENTED
          - APPROVED
          - CHANGES_REQUESTED
          - UNKNOWN
        codeComments:
          type: integer
          format: int32
        author:
          $ref: "#/components/schemas/UserInfo"
        pullRequest:
          $ref: "#/components/schemas/PullRequestBaseInfo"
        htmlUrl:
          type: string
        score:
          type: integer
          format: int32
        submittedAt:
          type: string
          format: date-time
      required:
      - codeComments
      - htmlUrl
      - id
      - isDismissed
      - score
      - state
    MetaData:
      type: object
      properties:
        teams:
          type: array
          items:
            $ref: "#/components/schemas/TeamInfo"
        scheduledDay:
          type: string
        scheduledTime:
          type: string
      required:
      - scheduledDay
      - scheduledTime
      - teams
    LeaderboardEntry:
      type: object
      properties:
        rank:
          type: integer
          format: int32
        score:
          type: integer
          format: int32
        user:
          $ref: "#/components/schemas/UserInfo"
        reviewedPullRequests:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestInfo"
        numberOfReviewedPRs:
          type: integer
          format: int32
        numberOfApprovals:
          type: integer
          format: int32
        numberOfChangeRequests:
          type: integer
          format: int32
        numberOfComments:
          type: integer
          format: int32
        numberOfUnknowns:
          type: integer
          format: int32
        numberOfCodeComments:
          type: integer
          format: int32
      required:
      - numberOfApprovals
      - numberOfChangeRequests
      - numberOfCodeComments
      - numberOfComments
      - numberOfReviewedPRs
      - numberOfUnknowns
      - rank
      - reviewedPullRequests
      - score
      - user
    Session:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        isClosed:
          type: boolean
      required:
      - createdAt
      - id
      - isClosed
