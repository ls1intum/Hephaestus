openapi: 3.0.1
info:
  title: Hephaestus API
  description: API documentation for the Hephaestus application server.
  contact:
    name: Felix T.J. Dietrich
    email: felixtj.dietrich@tum.de
  license:
    name: MIT License
    url: https://github.com/ls1intum/Hephaestus/blob/develop/LICENSE
  version: 0.0.1
servers:
- url: /
  description: Default Server URL
paths:
  /user/{login}:
    get:
      tags:
      - user
      operationId: getUser
      parameters:
      - name: login
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
  /user/{login}/full:
    get:
      tags:
      - user
      operationId: getFullUser
      parameters:
      - name: login
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /pullrequest/{id}:
    get:
      tags:
      - pull-request
      operationId: getPullRequest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PullRequest"
  /pullrequest/author/{login}:
    get:
      tags:
      - pull-request
      operationId: getPullRequestsByAuthor
      parameters:
      - name: login
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: "#/components/schemas/PullRequest"
  /leaderboard:
    get:
      tags:
      - leaderboard
      operationId: getLeaderboard
      parameters:
      - name: before
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: after
        in: query
        required: false
        schema:
          type: string
          format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LeaderboardEntry"
  /admin:
    get:
      tags:
      - admin
      operationId: admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
components:
  schemas:
    IssueCommentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        body:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        author:
          $ref: "#/components/schemas/UserDTO"
        pullRequest:
          $ref: "#/components/schemas/PullRequestDTO"
    PullRequestDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        url:
          type: string
        state:
          type: string
          enum:
          - CLOSED
          - OPEN
        createdAt:
          type: string
        updatedAt:
          type: string
        mergedAt:
          type: string
        author:
          $ref: "#/components/schemas/UserDTO"
        comments:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/IssueCommentDTO"
        repository:
          $ref: "#/components/schemas/RepositoryDTO"
    RepositoryDTO:
      type: object
      properties:
        name:
          type: string
        nameWithOwner:
          type: string
        description:
          type: string
        url:
          type: string
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        email:
          type: string
        name:
          type: string
        url:
          type: string
        pullRequests:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/PullRequestDTO"
        comments:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/IssueCommentDTO"
    IssueComment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        body:
          type: string
        author:
          $ref: "#/components/schemas/User"
        pullRequest:
          $ref: "#/components/schemas/PullRequest"
    PullRequest:
      required:
      - state
      - title
      - url
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        number:
          type: integer
          format: int32
        title:
          type: string
        url:
          type: string
        state:
          type: string
          description: "State of the PullRequest.\r\n Does not include the state of\
            \ the merge."
          enum:
          - CLOSED
          - OPEN
        additions:
          type: integer
          format: int32
        deletions:
          type: integer
          format: int32
        commits:
          type: integer
          format: int32
        changedFiles:
          type: integer
          format: int32
        mergedAt:
          type: string
          format: date-time
        author:
          $ref: "#/components/schemas/User"
        comments:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/IssueComment"
        reviews:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/PullRequestReview"
        repository:
          $ref: "#/components/schemas/Repository"
    PullRequestReview:
      required:
      - state
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        author:
          $ref: "#/components/schemas/User"
        state:
          type: string
          enum:
          - COMMENTED
          - APPROVED
          - CHANGES_REQUESTED
          - DISMISSED
        submittedAt:
          type: string
          format: date-time
        comments:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/PullRequestReviewComment"
        pullRequest:
          $ref: "#/components/schemas/PullRequest"
    PullRequestReviewComment:
      required:
      - commit
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        body:
          type: string
        author:
          $ref: "#/components/schemas/User"
        review:
          $ref: "#/components/schemas/PullRequestReview"
        commit:
          type: string
    Repository:
      required:
      - defaultBranch
      - name
      - nameWithOwner
      - url
      - visibility
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        name:
          type: string
        nameWithOwner:
          type: string
        description:
          type: string
        defaultBranch:
          type: string
        visibility:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
        url:
          type: string
        homepage:
          type: string
        pullRequests:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/PullRequest"
    User:
      required:
      - login
      - type
      - url
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        login:
          type: string
          description: Unique login identifier for a user.
        email:
          type: string
        name:
          type: string
          description: Display name of the user.
        url:
          type: string
          description: "Unique URL to the user's profile.\r\n Not the website a user\
            \ can set in their profile."
        avatarUrl:
          type: string
          description: "URL to the user's avatar.\r\n If unavailable, a fallback can\
            \ be generated from the login, e.g. on Github:\r\n https://github.com/{login}.png"
        type:
          type: string
          description: Type of the user. Used to distinguish between users and bots.
          enum:
          - USER
          - BOT
        pullRequests:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/PullRequest"
        issueComments:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/IssueComment"
        reviewComments:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/PullRequestReviewComment"
        reviews:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/PullRequestReview"
    LeaderboardEntry:
      type: object
      properties:
        githubName:
          type: string
        avatarUrl:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
          - USER
          - BOT
        score:
          type: integer
          format: int32
        rank:
          type: integer
          format: int32
        changesRequested:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestReviewDTO"
        approvals:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestReviewDTO"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestReviewDTO"
    PullRequestReviewDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        submittedAt:
          type: string
          format: date-time
        state:
          type: string
          enum:
          - COMMENTED
          - APPROVED
          - CHANGES_REQUESTED
          - DISMISSED
