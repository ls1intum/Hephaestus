openapi: 3.1.0
info:
  contact:
    email: felixtj.dietrich@tum.de
    name: Felix T.J. Dietrich
  description: API documentation for the Hephaestus application server.
  license:
    name: MIT License
    url: https://github.com/ls1intum/Hephaestus/blob/develop/LICENSE
  title: Hephaestus API
  version: 0.9.0-rc.27
servers:
- description: Default Server URL
  url: /
paths:
  /activity/badpractice/{badPracticeId}/feedback:
    post:
      operationId: provideFeedbackForBadPractice
      parameters:
      - in: path
        name: badPracticeId
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BadPracticeFeedback"
        required: true
      responses:
        "200":
          description: OK
      tags:
      - activity
  /activity/badpractice/{badPracticeId}/resolve:
    post:
      operationId: resolveBadPractice
      parameters:
      - in: path
        name: badPracticeId
        required: true
        schema:
          type: integer
          format: int64
      - in: query
        name: state
        required: true
        schema:
          type: string
          enum:
          - GOOD_PRACTICE
          - FIXED
          - CRITICAL_ISSUE
          - NORMAL_ISSUE
          - MINOR_ISSUE
          - WONT_FIX
          - WRONG
      responses:
        "200":
          description: OK
      tags:
      - activity
  /activity/pullrequest/{pullRequestId}/badpractices:
    post:
      operationId: detectBadPracticesForPullRequest
      parameters:
      - in: path
        name: pullRequestId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
      tags:
      - activity
  /activity/user/{login}/badpractices:
    post:
      operationId: detectBadPracticesByUser
      parameters:
      - in: path
        name: login
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
      tags:
      - activity
  /activity/{login}:
    get:
      operationId: getActivityByUser
      parameters:
      - in: path
        name: login
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
          description: OK
      tags:
      - activity
  /leaderboard:
    get:
      operationId: getLeaderboard
      parameters:
      - in: query
        name: after
        required: true
        schema:
          type: string
          format: date-time
      - in: query
        name: before
        required: true
        schema:
          type: string
          format: date-time
      - in: query
        name: team
        required: false
        schema:
          type: string
      - in: query
        name: sort
        required: false
        schema:
          type: string
          enum:
          - SCORE
          - LEAGUE_POINTS
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LeaderboardEntry"
          description: OK
      tags:
      - leaderboard
    post:
      operationId: getUserLeagueStats
      parameters:
      - in: query
        name: login
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeaderboardEntry"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeagueChange"
          description: OK
      tags:
      - leaderboard
  /mentor/chat:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                message:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    parts:
                      type: array
                      items:
                        anyOf:
                        - type: object
                          properties:
                            text:
                              type: string
                              maxLength: 2000
                              minLength: 1
                            type:
                              type: string
                              enum:
                              - text
                          required:
                          - text
                          - type
                        - type: object
                          properties:
                            mediaType:
                              type: string
                              enum:
                              - image/jpeg
                              - image/png
                            name:
                              type: string
                              maxLength: 100
                              minLength: 1
                            type:
                              type: string
                              enum:
                              - file
                            url:
                              type: string
                              format: uri
                          required:
                          - mediaType
                          - name
                          - type
                          - url
                    role:
                      type: string
                      enum:
                      - user
                  required:
                  - id
                  - parts
                  - role
                previousMessageId:
                  type: string
                  format: uuid
              required:
              - id
              - message
        description: Chat request body
        required: true
      responses:
        "200":
          content:
            text/event-stream:
              schema:
                anyOf:
                - $ref: "#/components/schemas/StreamTextStartPart"
                - $ref: "#/components/schemas/StreamTextDeltaPart"
                - $ref: "#/components/schemas/StreamTextEndPart"
                - $ref: "#/components/schemas/StreamErrorPart"
                - $ref: "#/components/schemas/StreamToolInputStartPart"
                - $ref: "#/components/schemas/StreamToolInputDeltaPart"
                - $ref: "#/components/schemas/StreamToolInputAvailablePart"
                - $ref: "#/components/schemas/StreamToolInputErrorPart"
                - $ref: "#/components/schemas/StreamToolOutputAvailablePart"
                - $ref: "#/components/schemas/StreamToolOutputErrorPart"
                - $ref: "#/components/schemas/StreamReasoningStartPart"
                - $ref: "#/components/schemas/StreamReasoningDeltaPart"
                - $ref: "#/components/schemas/StreamReasoningEndPart"
                - $ref: "#/components/schemas/StreamSourceUrlPart"
                - $ref: "#/components/schemas/StreamSourceDocumentPart"
                - $ref: "#/components/schemas/StreamFilePart"
                - $ref: "#/components/schemas/StreamDataPart"
                - $ref: "#/components/schemas/StreamStepStartPart"
                - $ref: "#/components/schemas/StreamStepFinishPart"
                - $ref: "#/components/schemas/StreamStartPart"
                - $ref: "#/components/schemas/StreamFinishPart"
                - $ref: "#/components/schemas/StreamMessageMetadataPart"
                - $ref: "#/components/schemas/StreamAbortPart"
          description: Event stream of chat updates.
      summary: Handle mentor chat
      tags:
      - mentor
  /mentor/chat/messages/{messageId}/vote:
    post:
      parameters:
      - explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
          format: uuid
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoteMessageRequest"
        description: Vote request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatMessageVote"
          description: Vote recorded
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Message not found
        "500":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Internal error
      summary: Vote on a chat message (upvote/downvote)
      tags:
      - vote
  /mentor/documents:
    get:
      parameters:
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type:
          - integer
          - "null"
          default: 0
          minimum: 0
        style: form
      - explode: true
        in: query
        name: size
        required: false
        schema:
          type: integer
          default: 20
          maximum: 100
          minimum: 1
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocumentSummary"
          description: Document summaries
        "500":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Internal error
      summary: List latest version of documents (no auth; all users)
      tags:
      - documents
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocumentRequest"
        description: Create document
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
          description: Created document
        "500":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Internal error
      summary: Create a new document
      tags:
      - documents
  /mentor/documents/{id}:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        style: simple
      responses:
        "204":
          description: Deleted
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Not found
        "500":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Internal error
      summary: Delete a document and all versions
      tags:
      - documents
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
          description: Document
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Not found
        "500":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Internal error
      summary: Get latest version of a document
      tags:
      - documents
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocumentRequest"
        description: Update document
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
          description: Updated document
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Not found
        "500":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Internal error
      summary: Update a document (creates new version)
      tags:
      - documents
  /mentor/documents/{id}/versions:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        style: simple
      - explode: true
        in: query
        name: after
        required: true
        schema:
          type: string
          format: date-time
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
          description: Deleted versions
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Not found
        "500":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Internal error
      summary: Delete versions after timestamp
      tags:
      - documents
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        style: simple
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type:
          - integer
          - "null"
          default: 0
          minimum: 0
        style: form
      - explode: true
        in: query
        name: size
        required: false
        schema:
          type: integer
          default: 20
          maximum: 100
          minimum: 1
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
          description: Document versions
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Not found
        "500":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Internal error
      summary: List versions of a document
      tags:
      - documents
  /mentor/documents/{id}/versions/{versionNumber}:
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        style: simple
      - explode: false
        in: path
        name: versionNumber
        required: false
        schema:
          type:
          - integer
          - "null"
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
          description: Document
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Not found
        "500":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Internal error
      summary: Get specific version
      tags:
      - documents
  /mentor/threads/{threadId}:
    get:
      parameters:
      - explode: false
        in: path
        name: threadId
        required: true
        schema:
          type: string
          format: uuid
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                        id:
                          type: string
                          format: uuid
                        parentMessageId:
                          type:
                          - string
                          - "null"
                          format: uuid
                        parts:
                          type: array
                          items:
                            anyOf:
                            - type: object
                              properties:
                                text:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                  - text
                              required:
                              - text
                              - type
                            - type: object
                              properties:
                                mediaType:
                                  type: string
                                  enum:
                                  - image/jpeg
                                  - image/png
                                name:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                  - file
                                url:
                                  type: string
                                  format: uri
                              required:
                              - mediaType
                              - type
                              - url
                        role:
                          type: string
                          enum:
                          - system
                          - user
                          - assistant
                      required:
                      - id
                      - parts
                      - role
                  selectedLeafMessageId:
                    type:
                    - string
                    - "null"
                    format: uuid
                  title:
                    type:
                    - string
                    - "null"
                required:
                - id
                - messages
          description: Thread detail with messages
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Thread not found
        "500":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
          description: Internal error
      summary: Get mentor chat thread detail
      tags:
      - mentor
  /meta:
    get:
      operationId: getMetaData
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetaData"
          description: OK
      tags:
      - meta
  /meta/contributors:
    get:
      operationId: getContributors
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contributor"
          description: OK
      tags:
      - meta
  /team:
    get:
      operationId: getAllTeams
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamInfo"
          description: OK
      tags:
      - team
  /team/{id}/visibility:
    post:
      operationId: updateTeamVisibility
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      - in: query
        name: hidden
        required: false
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: OK
      tags:
      - team
  /user:
    delete:
      operationId: deleteUser
      responses:
        "200":
          description: OK
      tags:
      - user
  /user/settings:
    get:
      operationId: getUserSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
          description: OK
      tags:
      - user
    post:
      operationId: updateUserSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSettings"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
          description: OK
      tags:
      - user
  /user/{login}/profile:
    get:
      operationId: getUserProfile
      parameters:
      - in: path
        name: login
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
          description: OK
      tags:
      - user
  /workspace/league/reset:
    put:
      operationId: resetAndRecalculateLeagues
      responses:
        "200":
          description: OK
      tags:
      - workspace
  /workspace/repositories:
    get:
      operationId: getRepositoriesToMonitor
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: OK
      tags:
      - workspace
  /workspace/repositories/{owner}/{name}:
    delete:
      operationId: removeRepositoryToMonitor
      parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
      tags:
      - workspace
    post:
      operationId: addRepositoryToMonitor
      parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
      tags:
      - workspace
  /workspace/team/{teamId}/label/{labelId}:
    delete:
      operationId: removeLabelFromTeam
      parameters:
      - in: path
        name: teamId
        required: true
        schema:
          type: integer
          format: int64
      - in: path
        name: labelId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
          description: OK
      tags:
      - workspace
  /workspace/team/{teamId}/label/{repositoryId}/{label}:
    post:
      operationId: addLabelToTeam
      parameters:
      - in: path
        name: teamId
        required: true
        schema:
          type: integer
          format: int64
      - in: path
        name: repositoryId
        required: true
        schema:
          type: integer
          format: int64
      - in: path
        name: label
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
          description: OK
      tags:
      - workspace
  /workspace/users:
    get:
      operationId: getUsersWithTeams
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTeams"
          description: OK
      tags:
      - workspace
components:
  parameters: {}
  schemas:
    Activity:
      type: object
      properties:
        pullRequests:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestWithBadPractices"
      required:
      - pullRequests
    BadPractice:
      type: object
      properties:
        description:
          type: string
        status:
          type: string
          enum:
          - Good Practice
          - Fixed
          - Critical Issue
          - Normal Issue
          - Minor Issue
          - Won't Fix
          - Wrong
        title:
          type: string
      required:
      - description
      - status
      - title
    BadPracticeFeedback:
      type: object
      properties:
        explanation:
          type: string
        type:
          type: string
      required:
      - explanation
      - type
    BadPracticeResult:
      type: object
      properties:
        bad_practice_summary:
          type: string
        bad_practices:
          type: array
          items:
            $ref: "#/components/schemas/BadPractice"
      required:
      - bad_practice_summary
      - bad_practices
    ChatMessageVote:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        isUpvoted:
          type: boolean
        messageId:
          type: string
          format: uuid
        updatedAt:
          type: string
          format: date-time
      required:
      - createdAt
      - isUpvoted
      - messageId
      - updatedAt
    Contributor:
      type: object
      properties:
        avatarUrl:
          type: string
        contributions:
          type: integer
          format: int32
        htmlUrl:
          type: string
        id:
          type: integer
          format: int64
        login:
          type: string
        name:
          type: string
      required:
      - avatarUrl
      - htmlUrl
      - id
      - login
      - name
    CreateDocumentRequest:
      type: object
      properties:
        content:
          type: string
          minLength: 1
        kind:
          $ref: "#/components/schemas/DocumentKind"
        title:
          type: string
          maxLength: 255
          minLength: 1
      required:
      - content
      - kind
      - title
    DetectorRequest:
      type: object
      properties:
        bad_practice_summary:
          type: string
        bad_practices:
          type: array
          items:
            $ref: "#/components/schemas/BadPractice"
        description:
          type: string
        lifecycle_state:
          type: string
        pull_request_number:
          type: number
        pull_request_template:
          type: string
        repository_name:
          type: string
        title:
          type: string
      required:
      - bad_practice_summary
      - bad_practices
      - description
      - lifecycle_state
      - pull_request_number
      - pull_request_template
      - repository_name
      - title
    DetectorResponse:
      allOf:
      - $ref: "#/components/schemas/BadPracticeResult"
      - type: object
        properties:
          trace_id:
            type: string
        required:
        - trace_id
    Document:
      type: object
      properties:
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        id:
          type: string
          format: uuid
        kind:
          $ref: "#/components/schemas/DocumentKind"
        title:
          type: string
        userId:
          type: integer
        versionNumber:
          type: integer
      required:
      - content
      - createdAt
      - id
      - kind
      - title
      - userId
      - versionNumber
    DocumentKind:
      type: string
      enum:
      - text
    DocumentSummary:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        id:
          type: string
          format: uuid
        kind:
          $ref: "#/components/schemas/DocumentKind"
        title:
          type: string
        userId:
          type: integer
      required:
      - createdAt
      - id
      - kind
      - title
      - userId
    HealthCheck:
      type: object
      properties:
        status:
          type: string
          description: Health status
          enum:
          - OK
          example: OK
      required:
      - status
    InsertTask:
      type: object
      properties:
        done:
          type: boolean
          default: false
          example: false
        name:
          type: string
          example: Learn hono
          minLength: 1
      required:
      - name
    LabelInfo:
      type: object
      properties:
        color:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        repository:
          $ref: "#/components/schemas/RepositoryInfo"
      required:
      - color
      - id
      - name
    LeaderboardEntry:
      type: object
      properties:
        numberOfApprovals:
          type: integer
          format: int32
        numberOfChangeRequests:
          type: integer
          format: int32
        numberOfCodeComments:
          type: integer
          format: int32
        numberOfComments:
          type: integer
          format: int32
        numberOfReviewedPRs:
          type: integer
          format: int32
        numberOfUnknowns:
          type: integer
          format: int32
        rank:
          type: integer
          format: int32
        reviewedPullRequests:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestInfo"
        score:
          type: integer
          format: int32
        user:
          $ref: "#/components/schemas/UserInfo"
      required:
      - numberOfApprovals
      - numberOfChangeRequests
      - numberOfCodeComments
      - numberOfComments
      - numberOfReviewedPRs
      - numberOfUnknowns
      - rank
      - reviewedPullRequests
      - score
      - user
    LeagueChange:
      type: object
      properties:
        leaguePointsChange:
          type: integer
          format: int32
        login:
          type: string
      required:
      - leaguePointsChange
      - login
    MetaData:
      type: object
      properties:
        scheduledDay:
          type: string
        scheduledTime:
          type: string
        teams:
          type: array
          items:
            $ref: "#/components/schemas/TeamInfo"
      required:
      - scheduledDay
      - scheduledTime
      - teams
    PatchTask:
      type: object
      properties:
        done:
          type: boolean
          default: false
          example: false
        name:
          type: string
          example: Learn hono
          minLength: 1
    PoemRequest:
      type: object
      properties:
        style:
          type: string
          default: ""
          description: Optional poem style
          example: haiku
          minLength: 1
        topic:
          type: string
          description: Topic of the poem
          example: coding
          minLength: 1
      required:
      - topic
    PullRequestBadPractice:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
        state:
          type: string
          enum:
          - GOOD_PRACTICE
          - FIXED
          - CRITICAL_ISSUE
          - NORMAL_ISSUE
          - MINOR_ISSUE
          - WONT_FIX
          - WRONG
        title:
          type: string
      required:
      - description
      - id
      - state
      - title
    PullRequestBaseInfo:
      type: object
      properties:
        htmlUrl:
          type: string
        id:
          type: integer
          format: int64
        isDraft:
          type: boolean
        isMerged:
          type: boolean
        number:
          type: integer
          format: int32
        repository:
          $ref: "#/components/schemas/RepositoryInfo"
        state:
          type: string
          enum:
          - OPEN
          - CLOSED
        title:
          type: string
      required:
      - htmlUrl
      - id
      - isDraft
      - isMerged
      - number
      - state
      - title
    PullRequestInfo:
      type: object
      properties:
        additions:
          type: integer
          format: int32
        assignees:
          type: array
          items:
            $ref: "#/components/schemas/UserInfo"
        author:
          $ref: "#/components/schemas/UserInfo"
        closedAt:
          type: string
          format: date-time
        commentsCount:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        deletions:
          type: integer
          format: int32
        htmlUrl:
          type: string
        id:
          type: integer
          format: int64
        isDraft:
          type: boolean
        isMerged:
          type: boolean
        labels:
          type: array
          items:
            $ref: "#/components/schemas/LabelInfo"
        mergedAt:
          type: string
          format: date-time
        number:
          type: integer
          format: int32
        repository:
          $ref: "#/components/schemas/RepositoryInfo"
        state:
          type: string
          enum:
          - OPEN
          - CLOSED
        title:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
      - additions
      - commentsCount
      - deletions
      - htmlUrl
      - id
      - isDraft
      - isMerged
      - number
      - state
      - title
    PullRequestReviewInfo:
      type: object
      properties:
        author:
          $ref: "#/components/schemas/UserInfo"
        codeComments:
          type: integer
          format: int32
        htmlUrl:
          type: string
        id:
          type: integer
          format: int64
        isDismissed:
          type: boolean
        pullRequest:
          $ref: "#/components/schemas/PullRequestBaseInfo"
        score:
          type: integer
          format: int32
        state:
          type: string
          enum:
          - COMMENTED
          - APPROVED
          - CHANGES_REQUESTED
          - UNKNOWN
        submittedAt:
          type: string
          format: date-time
      required:
      - codeComments
      - htmlUrl
      - id
      - isDismissed
      - score
      - state
    PullRequestWithBadPractices:
      type: object
      properties:
        additions:
          type: integer
          format: int32
        badPracticeSummary:
          type: string
        badPractices:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestBadPractice"
        createdAt:
          type: string
          format: date-time
        deletions:
          type: integer
          format: int32
        htmlUrl:
          type: string
        id:
          type: integer
          format: int64
        isDraft:
          type: boolean
        isMerged:
          type: boolean
        labels:
          type: array
          items:
            $ref: "#/components/schemas/LabelInfo"
        number:
          type: integer
          format: int32
        oldBadPractices:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestBadPractice"
        repository:
          $ref: "#/components/schemas/RepositoryInfo"
        state:
          type: string
          enum:
          - OPEN
          - CLOSED
        title:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
      - additions
      - badPracticeSummary
      - badPractices
      - createdAt
      - deletions
      - htmlUrl
      - id
      - isDraft
      - isMerged
      - labels
      - number
      - oldBadPractices
      - repository
      - state
      - title
      - updatedAt
    RepositoryInfo:
      type: object
      properties:
        description:
          type: string
        htmlUrl:
          type: string
        id:
          type: integer
          format: int64
        labels:
          type: array
          items:
            $ref: "#/components/schemas/LabelInfo"
        name:
          type: string
        nameWithOwner:
          type: string
      required:
      - htmlUrl
      - id
      - name
      - nameWithOwner
    StreamAbortPart:
      type: object
      properties:
        type:
          type: string
          enum:
          - abort
      required:
      - type
    StreamDataPart:
      type: object
      properties:
        data: {}
        id:
          type: string
        transient:
          type: boolean
        type:
          type: string
          pattern: ^data-.+
      required:
      - type
    StreamErrorPart:
      type: object
      properties:
        errorText:
          type: string
        type:
          type: string
          enum:
          - error
      required:
      - errorText
      - type
    StreamFilePart:
      type: object
      properties:
        mediaType:
          type: string
        providerMetadata: {}
        type:
          type: string
          enum:
          - file
        url:
          type: string
      required:
      - mediaType
      - type
      - url
    StreamFinishPart:
      type: object
      properties:
        messageMetadata: {}
        type:
          type: string
          enum:
          - finish
      required:
      - type
    StreamMessageMetadataPart:
      type: object
      properties:
        messageMetadata: {}
        type:
          type: string
          enum:
          - message-metadata
      required:
      - type
    StreamReasoningDeltaPart:
      type: object
      properties:
        delta:
          type: string
        id:
          type: string
        providerMetadata: {}
        type:
          type: string
          enum:
          - reasoning-delta
      required:
      - delta
      - id
      - type
    StreamReasoningEndPart:
      type: object
      properties:
        id:
          type: string
        providerMetadata: {}
        type:
          type: string
          enum:
          - reasoning-end
      required:
      - id
      - type
    StreamReasoningStartPart:
      type: object
      properties:
        id:
          type: string
        providerMetadata: {}
        type:
          type: string
          enum:
          - reasoning-start
      required:
      - id
      - type
    StreamSourceDocumentPart:
      type: object
      properties:
        filename:
          type: string
        mediaType:
          type: string
        providerMetadata: {}
        sourceId:
          type: string
        title:
          type: string
        type:
          type: string
          enum:
          - source-document
      required:
      - mediaType
      - sourceId
      - title
      - type
    StreamSourceUrlPart:
      type: object
      properties:
        providerMetadata: {}
        sourceId:
          type: string
        title:
          type: string
        type:
          type: string
          enum:
          - source-url
        url:
          type: string
      required:
      - sourceId
      - type
      - url
    StreamStartPart:
      type: object
      properties:
        messageId:
          type: string
        messageMetadata: {}
        type:
          type: string
          enum:
          - start
      required:
      - type
    StreamStepFinishPart:
      type: object
      properties:
        type:
          type: string
          enum:
          - finish-step
      required:
      - type
    StreamStepStartPart:
      type: object
      properties:
        type:
          type: string
          enum:
          - start-step
      required:
      - type
    StreamTextDeltaPart:
      type: object
      properties:
        delta:
          type: string
        id:
          type: string
        providerMetadata: {}
        type:
          type: string
          enum:
          - text-delta
      required:
      - delta
      - id
      - type
    StreamTextEndPart:
      type: object
      properties:
        id:
          type: string
        providerMetadata: {}
        type:
          type: string
          enum:
          - text-end
      required:
      - id
      - type
    StreamTextStartPart:
      type: object
      properties:
        id:
          type: string
        providerMetadata: {}
        type:
          type: string
          enum:
          - text-start
      required:
      - id
      - type
    StreamToolInputAvailablePart:
      type: object
      properties:
        dynamic:
          type: boolean
        input: {}
        providerExecuted:
          type: boolean
        providerMetadata: {}
        toolCallId:
          type: string
        toolName:
          type: string
        type:
          type: string
          enum:
          - tool-input-available
      required:
      - toolCallId
      - toolName
      - type
    StreamToolInputDeltaPart:
      type: object
      properties:
        inputTextDelta:
          type: string
        toolCallId:
          type: string
        type:
          type: string
          enum:
          - tool-input-delta
      required:
      - inputTextDelta
      - toolCallId
      - type
    StreamToolInputErrorPart:
      type: object
      properties:
        dynamic:
          type: boolean
        errorText:
          type: string
        input: {}
        providerExecuted:
          type: boolean
        providerMetadata: {}
        toolCallId:
          type: string
        toolName:
          type: string
        type:
          type: string
          enum:
          - tool-input-error
      required:
      - errorText
      - toolCallId
      - toolName
      - type
    StreamToolInputStartPart:
      type: object
      properties:
        dynamic:
          type: boolean
        providerExecuted:
          type: boolean
        toolCallId:
          type: string
        toolName:
          type: string
        type:
          type: string
          enum:
          - tool-input-start
      required:
      - toolCallId
      - toolName
      - type
    StreamToolOutputAvailablePart:
      type: object
      properties:
        dynamic:
          type: boolean
        output: {}
        providerExecuted:
          type: boolean
        toolCallId:
          type: string
        type:
          type: string
          enum:
          - tool-output-available
      required:
      - toolCallId
      - type
    StreamToolOutputErrorPart:
      type: object
      properties:
        dynamic:
          type: boolean
        errorText:
          type: string
        providerExecuted:
          type: boolean
        toolCallId:
          type: string
        type:
          type: string
          enum:
          - tool-output-error
      required:
      - errorText
      - toolCallId
      - type
    Task:
      type: object
      properties:
        done:
          type: boolean
          default: false
          example: false
        id:
          type: number
          example: 1
        name:
          type: string
          example: Learn hono
          minLength: 1
      required:
      - id
      - name
    TeamInfo:
      type: object
      properties:
        description:
          type: string
        hidden:
          type: boolean
        htmlUrl:
          type: string
        id:
          type: integer
          format: int64
        labels:
          type: array
          items:
            $ref: "#/components/schemas/LabelInfo"
        members:
          type: array
          items:
            $ref: "#/components/schemas/UserInfo"
        membershipCount:
          type: integer
          format: int32
        name:
          type: string
        organization:
          type: string
        parentId:
          type: integer
          format: int64
        privacy:
          type: string
          enum:
          - SECRET
          - CLOSED
        repoPermissionCount:
          type: integer
          format: int32
        repositories:
          type: array
          items:
            $ref: "#/components/schemas/RepositoryInfo"
      required:
      - hidden
      - id
      - labels
      - members
      - membershipCount
      - name
      - repoPermissionCount
      - repositories
    UserInfo:
      type: object
      properties:
        avatarUrl:
          type: string
        email:
          type: string
        htmlUrl:
          type: string
        id:
          type: integer
          format: int64
        leaguePoints:
          type: integer
          format: int32
        login:
          type: string
        name:
          type: string
      required:
      - avatarUrl
      - htmlUrl
      - id
      - login
      - name
    UserProfile:
      type: object
      properties:
        contributedRepositories:
          type: array
          items:
            $ref: "#/components/schemas/RepositoryInfo"
        firstContribution:
          type: string
          format: date-time
        openPullRequests:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestInfo"
        reviewActivity:
          type: array
          items:
            $ref: "#/components/schemas/PullRequestReviewInfo"
        userInfo:
          $ref: "#/components/schemas/UserInfo"
      required:
      - contributedRepositories
      - firstContribution
      - userInfo
    UserSettings:
      type: object
      properties:
        receiveNotifications:
          type: boolean
    UserTeams:
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
          format: int64
        login:
          type: string
        name:
          type: string
        teams:
          type: array
          items:
            $ref: "#/components/schemas/TeamInfo"
          uniqueItems: true
        url:
          type: string
      required:
      - id
      - login
      - name
      - teams
      - url
    VoteMessageRequest:
      type: object
      properties:
        isUpvoted:
          type: boolean
      required:
      - isUpvoted
