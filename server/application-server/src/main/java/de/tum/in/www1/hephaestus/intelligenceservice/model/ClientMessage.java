/*
 * Hephaestus Intelligence Service API
 * API documentation for the Hephaestus Intelligence Service.
 *
 * The version of the OpenAPI document: 0.9.0-rc.5
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.in.www1.hephaestus.intelligenceservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.in.www1.hephaestus.intelligenceservice.model.ClientAttachment;
import de.tum.in.www1.hephaestus.intelligenceservice.model.ToolInvocation;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.hibernate.validator.constraints.*;

/**
 * PERFECT MATCH for actual frontend payload: {role&#x3D;user, content&#x3D;hello, parts&#x3D;[{type&#x3D;text, text&#x3D;hello}]}
 */
@JsonPropertyOrder({
  ClientMessage.JSON_PROPERTY_ANNOTATIONS,
  ClientMessage.JSON_PROPERTY_CONTENT,
  ClientMessage.JSON_PROPERTY_CREATED_AT,
  ClientMessage.JSON_PROPERTY_DATA,
  ClientMessage.JSON_PROPERTY_EXPERIMENTAL_ATTACHMENTS,
  ClientMessage.JSON_PROPERTY_ID,
  ClientMessage.JSON_PROPERTY_PARTS,
  ClientMessage.JSON_PROPERTY_REASONING,
  ClientMessage.JSON_PROPERTY_ROLE,
  ClientMessage.JSON_PROPERTY_TOOL_INVOCATIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class ClientMessage extends HashMap<String, Object> {
  public static final String JSON_PROPERTY_ANNOTATIONS = "annotations";
  private JsonNullable<List<String>> annotations = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_CONTENT = "content";
  private String content;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  private JsonNullable<String> createdAt = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DATA = "data";
  private JsonNullable<String> data = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_EXPERIMENTAL_ATTACHMENTS = "experimental_attachments";
  private JsonNullable<List<ClientAttachment>> experimentalAttachments = JsonNullable.<List<ClientAttachment>>undefined();

  public static final String JSON_PROPERTY_ID = "id";
  private JsonNullable<String> id = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PARTS = "parts";
  private JsonNullable<List<Map<String, String>>> parts = JsonNullable.<List<Map<String, String>>>undefined();

  public static final String JSON_PROPERTY_REASONING = "reasoning";
  private JsonNullable<String> reasoning = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ROLE = "role";
  private String role;

  public static final String JSON_PROPERTY_TOOL_INVOCATIONS = "toolInvocations";
  private JsonNullable<List<ToolInvocation>> toolInvocations = JsonNullable.<List<ToolInvocation>>undefined();

  public ClientMessage() {

  }

  public ClientMessage annotations(List<String> annotations) {
    this.annotations = JsonNullable.<List<String>>of(annotations);
    
    return this;
  }

  public ClientMessage addAnnotationsItem(String annotationsItem) {
    if (this.annotations == null || !this.annotations.isPresent()) {
      this.annotations = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.annotations.get().add(annotationsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<String> getAnnotations() {
        return annotations.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getAnnotations_JsonNullable() {
    return annotations;
  }
  
  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  public void setAnnotations_JsonNullable(JsonNullable<List<String>> annotations) {
    this.annotations = annotations;
  }

  public void setAnnotations(List<String> annotations) {
    this.annotations = JsonNullable.<List<String>>of(annotations);
  }

  public ClientMessage content(String content) {
    
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getContent() {
    return content;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContent(String content) {
    this.content = content;
  }

  public ClientMessage createdAt(String createdAt) {
    this.createdAt = JsonNullable.<String>of(createdAt);
    
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getCreatedAt() {
        return createdAt.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCreatedAt_JsonNullable() {
    return createdAt;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  public void setCreatedAt_JsonNullable(JsonNullable<String> createdAt) {
    this.createdAt = createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = JsonNullable.<String>of(createdAt);
  }

  public ClientMessage data(String data) {
    this.data = JsonNullable.<String>of(data);
    
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getData() {
        return data.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getData_JsonNullable() {
    return data;
  }
  
  @JsonProperty(JSON_PROPERTY_DATA)
  public void setData_JsonNullable(JsonNullable<String> data) {
    this.data = data;
  }

  public void setData(String data) {
    this.data = JsonNullable.<String>of(data);
  }

  public ClientMessage experimentalAttachments(List<ClientAttachment> experimentalAttachments) {
    this.experimentalAttachments = JsonNullable.<List<ClientAttachment>>of(experimentalAttachments);
    
    return this;
  }

  public ClientMessage addExperimentalAttachmentsItem(ClientAttachment experimentalAttachmentsItem) {
    if (this.experimentalAttachments == null || !this.experimentalAttachments.isPresent()) {
      this.experimentalAttachments = JsonNullable.<List<ClientAttachment>>of(new ArrayList<>());
    }
    try {
      this.experimentalAttachments.get().add(experimentalAttachmentsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get experimentalAttachments
   * @return experimentalAttachments
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<ClientAttachment> getExperimentalAttachments() {
        return experimentalAttachments.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXPERIMENTAL_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<ClientAttachment>> getExperimentalAttachments_JsonNullable() {
    return experimentalAttachments;
  }
  
  @JsonProperty(JSON_PROPERTY_EXPERIMENTAL_ATTACHMENTS)
  public void setExperimentalAttachments_JsonNullable(JsonNullable<List<ClientAttachment>> experimentalAttachments) {
    this.experimentalAttachments = experimentalAttachments;
  }

  public void setExperimentalAttachments(List<ClientAttachment> experimentalAttachments) {
    this.experimentalAttachments = JsonNullable.<List<ClientAttachment>>of(experimentalAttachments);
  }

  public ClientMessage id(String id) {
    this.id = JsonNullable.<String>of(id);
    
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getId() {
        return id.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getId_JsonNullable() {
    return id;
  }
  
  @JsonProperty(JSON_PROPERTY_ID)
  public void setId_JsonNullable(JsonNullable<String> id) {
    this.id = id;
  }

  public void setId(String id) {
    this.id = JsonNullable.<String>of(id);
  }

  public ClientMessage parts(List<Map<String, String>> parts) {
    this.parts = JsonNullable.<List<Map<String, String>>>of(parts);
    
    return this;
  }

  public ClientMessage addPartsItem(Map<String, String> partsItem) {
    if (this.parts == null || !this.parts.isPresent()) {
      this.parts = JsonNullable.<List<Map<String, String>>>of(new ArrayList<>());
    }
    try {
      this.parts.get().add(partsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get parts
   * @return parts
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<Map<String, String>> getParts() {
        return parts.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<Map<String, String>>> getParts_JsonNullable() {
    return parts;
  }
  
  @JsonProperty(JSON_PROPERTY_PARTS)
  public void setParts_JsonNullable(JsonNullable<List<Map<String, String>>> parts) {
    this.parts = parts;
  }

  public void setParts(List<Map<String, String>> parts) {
    this.parts = JsonNullable.<List<Map<String, String>>>of(parts);
  }

  public ClientMessage reasoning(String reasoning) {
    this.reasoning = JsonNullable.<String>of(reasoning);
    
    return this;
  }

  /**
   * Get reasoning
   * @return reasoning
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getReasoning() {
        return reasoning.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REASONING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getReasoning_JsonNullable() {
    return reasoning;
  }
  
  @JsonProperty(JSON_PROPERTY_REASONING)
  public void setReasoning_JsonNullable(JsonNullable<String> reasoning) {
    this.reasoning = reasoning;
  }

  public void setReasoning(String reasoning) {
    this.reasoning = JsonNullable.<String>of(reasoning);
  }

  public ClientMessage role(String role) {
    
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRole() {
    return role;
  }


  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRole(String role) {
    this.role = role;
  }

  public ClientMessage toolInvocations(List<ToolInvocation> toolInvocations) {
    this.toolInvocations = JsonNullable.<List<ToolInvocation>>of(toolInvocations);
    
    return this;
  }

  public ClientMessage addToolInvocationsItem(ToolInvocation toolInvocationsItem) {
    if (this.toolInvocations == null || !this.toolInvocations.isPresent()) {
      this.toolInvocations = JsonNullable.<List<ToolInvocation>>of(new ArrayList<>());
    }
    try {
      this.toolInvocations.get().add(toolInvocationsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get toolInvocations
   * @return toolInvocations
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<ToolInvocation> getToolInvocations() {
        return toolInvocations.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOOL_INVOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<ToolInvocation>> getToolInvocations_JsonNullable() {
    return toolInvocations;
  }
  
  @JsonProperty(JSON_PROPERTY_TOOL_INVOCATIONS)
  public void setToolInvocations_JsonNullable(JsonNullable<List<ToolInvocation>> toolInvocations) {
    this.toolInvocations = toolInvocations;
  }

  public void setToolInvocations(List<ToolInvocation> toolInvocations) {
    this.toolInvocations = JsonNullable.<List<ToolInvocation>>of(toolInvocations);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientMessage clientMessage = (ClientMessage) o;
    return equalsNullable(this.annotations, clientMessage.annotations) &&
        Objects.equals(this.content, clientMessage.content) &&
        equalsNullable(this.createdAt, clientMessage.createdAt) &&
        equalsNullable(this.data, clientMessage.data) &&
        equalsNullable(this.experimentalAttachments, clientMessage.experimentalAttachments) &&
        equalsNullable(this.id, clientMessage.id) &&
        equalsNullable(this.parts, clientMessage.parts) &&
        equalsNullable(this.reasoning, clientMessage.reasoning) &&
        Objects.equals(this.role, clientMessage.role) &&
        equalsNullable(this.toolInvocations, clientMessage.toolInvocations) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(annotations), content, hashCodeNullable(createdAt), hashCodeNullable(data), hashCodeNullable(experimentalAttachments), hashCodeNullable(id), hashCodeNullable(parts), hashCodeNullable(reasoning), role, hashCodeNullable(toolInvocations), super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientMessage {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    experimentalAttachments: ").append(toIndentedString(experimentalAttachments)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("    reasoning: ").append(toIndentedString(reasoning)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    toolInvocations: ").append(toIndentedString(toolInvocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

