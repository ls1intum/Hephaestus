/*
 * Hephaestus Intelligence Service API
 * API documentation for the Hephaestus Intelligence Service.
 *
 * The version of the OpenAPI document: 0.9.0-rc.5
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.in.www1.hephaestus.intelligenceservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.in.www1.hephaestus.intelligenceservice.model.ToolCall;
import de.tum.in.www1.hephaestus.intelligenceservice.model.ToolResult;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.hibernate.validator.constraints.*;

/**
 * The tool invocation
 */
@JsonPropertyOrder({
  Toolinvocation.JSON_PROPERTY_ARGS,
  Toolinvocation.JSON_PROPERTY_STATE,
  Toolinvocation.JSON_PROPERTY_STEP,
  Toolinvocation.JSON_PROPERTY_TOOL_CALL_ID,
  Toolinvocation.JSON_PROPERTY_TOOL_NAME,
  Toolinvocation.JSON_PROPERTY_RESULT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class Toolinvocation {
  public static final String JSON_PROPERTY_ARGS = "args";
  private Object args;

  public static final String JSON_PROPERTY_STATE = "state";
  private String state = "result";

  public static final String JSON_PROPERTY_STEP = "step";
  private Integer step;

  public static final String JSON_PROPERTY_TOOL_CALL_ID = "toolCallId";
  private String toolCallId;

  public static final String JSON_PROPERTY_TOOL_NAME = "toolName";
  private String toolName;

  public static final String JSON_PROPERTY_RESULT = "result";
  private Object result;

  public Toolinvocation() {
  }

  public Toolinvocation args(Object args) {
    
    this.args = args;
    return this;
  }

  /**
   * Get args
   * @return args
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ARGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getArgs() {
    return args;
  }


  @JsonProperty(JSON_PROPERTY_ARGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setArgs(Object args) {
    this.args = args;
  }

  public Toolinvocation state(String state) {
    
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(String state) {
    this.state = state;
  }

  public Toolinvocation step(Integer step) {
    
    this.step = step;
    return this;
  }

  /**
   * Get step
   * @return step
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStep() {
    return step;
  }


  @JsonProperty(JSON_PROPERTY_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStep(Integer step) {
    this.step = step;
  }

  public Toolinvocation toolCallId(String toolCallId) {
    
    this.toolCallId = toolCallId;
    return this;
  }

  /**
   * Get toolCallId
   * @return toolCallId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getToolCallId() {
    return toolCallId;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToolCallId(String toolCallId) {
    this.toolCallId = toolCallId;
  }

  public Toolinvocation toolName(String toolName) {
    
    this.toolName = toolName;
    return this;
  }

  /**
   * Get toolName
   * @return toolName
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOOL_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getToolName() {
    return toolName;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToolName(String toolName) {
    this.toolName = toolName;
  }

  public Toolinvocation result(Object result) {
    
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getResult() {
    return result;
  }


  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResult(Object result) {
    this.result = result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Toolinvocation toolinvocation = (Toolinvocation) o;
    return Objects.equals(this.args, toolinvocation.args) &&
        Objects.equals(this.state, toolinvocation.state) &&
        Objects.equals(this.step, toolinvocation.step) &&
        Objects.equals(this.toolCallId, toolinvocation.toolCallId) &&
        Objects.equals(this.toolName, toolinvocation.toolName) &&
        Objects.equals(this.result, toolinvocation.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, state, step, toolCallId, toolName, result);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Toolinvocation {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    toolCallId: ").append(toIndentedString(toolCallId)).append("\n");
    sb.append("    toolName: ").append(toIndentedString(toolName)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

