/*
 * Hephaestus Intelligence Service API
 * API documentation for the Hephaestus Intelligence Service.
 *
 * The version of the OpenAPI document: 0.9.0-rc.5
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.in.www1.hephaestus.intelligenceservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.in.www1.hephaestus.intelligenceservice.model.FileUIPart;
import de.tum.in.www1.hephaestus.intelligenceservice.model.ReasoningUIPart;
import de.tum.in.www1.hephaestus.intelligenceservice.model.ReasoningUIPartDetailsInner;
import de.tum.in.www1.hephaestus.intelligenceservice.model.Source;
import de.tum.in.www1.hephaestus.intelligenceservice.model.SourceUIPart;
import de.tum.in.www1.hephaestus.intelligenceservice.model.StepStartUIPart;
import de.tum.in.www1.hephaestus.intelligenceservice.model.TextUIPart;
import de.tum.in.www1.hephaestus.intelligenceservice.model.ToolInvocationUIPart;
import de.tum.in.www1.hephaestus.intelligenceservice.model.Toolinvocation;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.hibernate.validator.constraints.*;

/**
 * MessagePartsInner
 */
@JsonPropertyOrder({
  MessagePartsInner.JSON_PROPERTY_TEXT,
  MessagePartsInner.JSON_PROPERTY_TYPE,
  MessagePartsInner.JSON_PROPERTY_DETAILS,
  MessagePartsInner.JSON_PROPERTY_REASONING,
  MessagePartsInner.JSON_PROPERTY_TOOL_INVOCATION,
  MessagePartsInner.JSON_PROPERTY_SOURCE,
  MessagePartsInner.JSON_PROPERTY_DATA,
  MessagePartsInner.JSON_PROPERTY_MIME_TYPE
})
@JsonTypeName("Message_parts_inner")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class MessagePartsInner {
  public static final String JSON_PROPERTY_TEXT = "text";
  private String text;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type = "step-start";

  public static final String JSON_PROPERTY_DETAILS = "details";
  private List<ReasoningUIPartDetailsInner> details = new ArrayList<>();

  public static final String JSON_PROPERTY_REASONING = "reasoning";
  private String reasoning;

  public static final String JSON_PROPERTY_TOOL_INVOCATION = "toolInvocation";
  private Toolinvocation toolInvocation;

  public static final String JSON_PROPERTY_SOURCE = "source";
  private Source source;

  public static final String JSON_PROPERTY_DATA = "data";
  private String data;

  public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
  private String mimeType;

  public MessagePartsInner() {
  }

  public MessagePartsInner text(String text) {
    
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getText() {
    return text;
  }


  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setText(String text) {
    this.text = text;
  }

  public MessagePartsInner type(String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  public MessagePartsInner details(List<ReasoningUIPartDetailsInner> details) {
    
    this.details = details;
    return this;
  }

  public MessagePartsInner addDetailsItem(ReasoningUIPartDetailsInner detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ReasoningUIPartDetailsInner> getDetails() {
    return details;
  }


  @JsonProperty(JSON_PROPERTY_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetails(List<ReasoningUIPartDetailsInner> details) {
    this.details = details;
  }

  public MessagePartsInner reasoning(String reasoning) {
    
    this.reasoning = reasoning;
    return this;
  }

  /**
   * The reasoning text
   * @return reasoning
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REASONING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReasoning() {
    return reasoning;
  }


  @JsonProperty(JSON_PROPERTY_REASONING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReasoning(String reasoning) {
    this.reasoning = reasoning;
  }

  public MessagePartsInner toolInvocation(Toolinvocation toolInvocation) {
    
    this.toolInvocation = toolInvocation;
    return this;
  }

  /**
   * Get toolInvocation
   * @return toolInvocation
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOOL_INVOCATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Toolinvocation getToolInvocation() {
    return toolInvocation;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_INVOCATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToolInvocation(Toolinvocation toolInvocation) {
    this.toolInvocation = toolInvocation;
  }

  public MessagePartsInner source(Source source) {
    
    this.source = source;
    return this;
  }

  /**
   * The source.
   * @return source
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Source getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSource(Source source) {
    this.source = source;
  }

  public MessagePartsInner data(String data) {
    
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setData(String data) {
    this.data = data;
  }

  public MessagePartsInner mimeType(String mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Get mimeType
   * @return mimeType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMimeType() {
    return mimeType;
  }


  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagePartsInner messagePartsInner = (MessagePartsInner) o;
    return Objects.equals(this.text, messagePartsInner.text) &&
        Objects.equals(this.type, messagePartsInner.type) &&
        Objects.equals(this.details, messagePartsInner.details) &&
        Objects.equals(this.reasoning, messagePartsInner.reasoning) &&
        Objects.equals(this.toolInvocation, messagePartsInner.toolInvocation) &&
        Objects.equals(this.source, messagePartsInner.source) &&
        Objects.equals(this.data, messagePartsInner.data) &&
        Objects.equals(this.mimeType, messagePartsInner.mimeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, type, details, reasoning, toolInvocation, source, data, mimeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagePartsInner {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    reasoning: ").append(toIndentedString(reasoning)).append("\n");
    sb.append("    toolInvocation: ").append(toIndentedString(toolInvocation)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

