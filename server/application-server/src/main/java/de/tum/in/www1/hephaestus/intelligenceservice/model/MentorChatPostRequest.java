/*
 * Hephaestus Intelligence Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-rc.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.in.www1.hephaestus.intelligenceservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.in.www1.hephaestus.intelligenceservice.model.MentorChatPostRequestMessage;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.hibernate.validator.constraints.*;

/**
 * MentorChatPostRequest
 */
@JsonPropertyOrder({
  MentorChatPostRequest.JSON_PROPERTY_ID,
  MentorChatPostRequest.JSON_PROPERTY_MESSAGE,
  MentorChatPostRequest.JSON_PROPERTY_PREVIOUS_MESSAGE_ID
})
@JsonTypeName("_mentor_chat_post_request")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class MentorChatPostRequest {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private MentorChatPostRequestMessage message;

  public static final String JSON_PROPERTY_PREVIOUS_MESSAGE_ID = "previousMessageId";
  private UUID previousMessageId;

  public MentorChatPostRequest() {
  }

  public MentorChatPostRequest id(UUID id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }

  public MentorChatPostRequest message(MentorChatPostRequestMessage message) {
    
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MentorChatPostRequestMessage getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(MentorChatPostRequestMessage message) {
    this.message = message;
  }

  public MentorChatPostRequest previousMessageId(UUID previousMessageId) {
    
    this.previousMessageId = previousMessageId;
    return this;
  }

  /**
   * Get previousMessageId
   * @return previousMessageId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIOUS_MESSAGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getPreviousMessageId() {
    return previousMessageId;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_MESSAGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviousMessageId(UUID previousMessageId) {
    this.previousMessageId = previousMessageId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MentorChatPostRequest mentorChatPostRequest = (MentorChatPostRequest) o;
    return Objects.equals(this.id, mentorChatPostRequest.id) &&
        Objects.equals(this.message, mentorChatPostRequest.message) &&
        Objects.equals(this.previousMessageId, mentorChatPostRequest.previousMessageId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, message, previousMessageId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MentorChatPostRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    previousMessageId: ").append(toIndentedString(previousMessageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

