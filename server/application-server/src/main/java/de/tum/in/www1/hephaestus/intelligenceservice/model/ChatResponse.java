/*
 * Hephaestus Intelligence Service API
 * API documentation for the Hephaestus Intelligence Service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.in.www1.hephaestus.intelligenceservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * ChatResponse
 */
@JsonPropertyOrder({
  ChatResponse.JSON_PROPERTY_RESPONSE,
  ChatResponse.JSON_PROPERTY_THREAD_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class ChatResponse {
  public static final String JSON_PROPERTY_RESPONSE = "response";
  private String response;

  public static final String JSON_PROPERTY_THREAD_ID = "thread_id";
  private JsonNullable<String> threadId = JsonNullable.<String>undefined();

  public ChatResponse() {
  }

  public ChatResponse response(String response) {
    
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getResponse() {
    return response;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResponse(String response) {
    this.response = response;
  }

  public ChatResponse threadId(String threadId) {
    this.threadId = JsonNullable.<String>of(threadId);
    
    return this;
  }

  /**
   * Get threadId
   * @return threadId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getThreadId() {
        return threadId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_THREAD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getThreadId_JsonNullable() {
    return threadId;
  }
  
  @JsonProperty(JSON_PROPERTY_THREAD_ID)
  public void setThreadId_JsonNullable(JsonNullable<String> threadId) {
    this.threadId = threadId;
  }

  public void setThreadId(String threadId) {
    this.threadId = JsonNullable.<String>of(threadId);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChatResponse chatResponse = (ChatResponse) o;
    return Objects.equals(this.response, chatResponse.response) &&
        equalsNullable(this.threadId, chatResponse.threadId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(response, hashCodeNullable(threadId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChatResponse {\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    threadId: ").append(toIndentedString(threadId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

