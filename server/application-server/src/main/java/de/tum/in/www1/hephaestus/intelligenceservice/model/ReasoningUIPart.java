/*
 * Hephaestus Intelligence Service API
 * API documentation for the Hephaestus Intelligence Service.
 *
 * The version of the OpenAPI document: 0.9.0-rc.5
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.in.www1.hephaestus.intelligenceservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.in.www1.hephaestus.intelligenceservice.model.ReasoningUIPartDetailsInner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.hibernate.validator.constraints.*;

/**
 * A reasoning part of a message.
 */
@JsonPropertyOrder({
  ReasoningUIPart.JSON_PROPERTY_DETAILS,
  ReasoningUIPart.JSON_PROPERTY_REASONING,
  ReasoningUIPart.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class ReasoningUIPart {
  public static final String JSON_PROPERTY_DETAILS = "details";
  private List<ReasoningUIPartDetailsInner> details = new ArrayList<>();

  public static final String JSON_PROPERTY_REASONING = "reasoning";
  private String reasoning;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type = "reasoning";

  public ReasoningUIPart() {
  }

  public ReasoningUIPart details(List<ReasoningUIPartDetailsInner> details) {
    
    this.details = details;
    return this;
  }

  public ReasoningUIPart addDetailsItem(ReasoningUIPartDetailsInner detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ReasoningUIPartDetailsInner> getDetails() {
    return details;
  }


  @JsonProperty(JSON_PROPERTY_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetails(List<ReasoningUIPartDetailsInner> details) {
    this.details = details;
  }

  public ReasoningUIPart reasoning(String reasoning) {
    
    this.reasoning = reasoning;
    return this;
  }

  /**
   * The reasoning text
   * @return reasoning
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REASONING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReasoning() {
    return reasoning;
  }


  @JsonProperty(JSON_PROPERTY_REASONING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReasoning(String reasoning) {
    this.reasoning = reasoning;
  }

  public ReasoningUIPart type(String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReasoningUIPart reasoningUIPart = (ReasoningUIPart) o;
    return Objects.equals(this.details, reasoningUIPart.details) &&
        Objects.equals(this.reasoning, reasoningUIPart.reasoning) &&
        Objects.equals(this.type, reasoningUIPart.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, reasoning, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReasoningUIPart {\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    reasoning: ").append(toIndentedString(reasoning)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

