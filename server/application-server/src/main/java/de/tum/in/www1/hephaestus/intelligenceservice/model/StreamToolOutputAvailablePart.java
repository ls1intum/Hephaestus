/*
 * Hephaestus Intelligence Service API
 * API documentation for the Hephaestus Intelligence Service.
 *
 * The version of the OpenAPI document: 0.9.1-rc.5
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.in.www1.hephaestus.intelligenceservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.hibernate.validator.constraints.*;

/**
 * Tool output available event.
 */
@JsonPropertyOrder({
  StreamToolOutputAvailablePart.JSON_PROPERTY_DYNAMIC,
  StreamToolOutputAvailablePart.JSON_PROPERTY_OUTPUT,
  StreamToolOutputAvailablePart.JSON_PROPERTY_PROVIDER_EXECUTED,
  StreamToolOutputAvailablePart.JSON_PROPERTY_TOOL_CALL_ID,
  StreamToolOutputAvailablePart.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class StreamToolOutputAvailablePart {
  public static final String JSON_PROPERTY_DYNAMIC = "dynamic";
  private JsonNullable<Boolean> dynamic = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_OUTPUT = "output";
  private Object output;

  public static final String JSON_PROPERTY_PROVIDER_EXECUTED = "providerExecuted";
  private JsonNullable<Boolean> providerExecuted = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_TOOL_CALL_ID = "toolCallId";
  private String toolCallId;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type = "tool-output-available";

  public StreamToolOutputAvailablePart() {
  }

  public StreamToolOutputAvailablePart dynamic(Boolean dynamic) {
    this.dynamic = JsonNullable.<Boolean>of(dynamic);
    
    return this;
  }

  /**
   * Get dynamic
   * @return dynamic
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getDynamic() {
        return dynamic.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DYNAMIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getDynamic_JsonNullable() {
    return dynamic;
  }
  
  @JsonProperty(JSON_PROPERTY_DYNAMIC)
  public void setDynamic_JsonNullable(JsonNullable<Boolean> dynamic) {
    this.dynamic = dynamic;
  }

  public void setDynamic(Boolean dynamic) {
    this.dynamic = JsonNullable.<Boolean>of(dynamic);
  }

  public StreamToolOutputAvailablePart output(Object output) {
    
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getOutput() {
    return output;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOutput(Object output) {
    this.output = output;
  }

  public StreamToolOutputAvailablePart providerExecuted(Boolean providerExecuted) {
    this.providerExecuted = JsonNullable.<Boolean>of(providerExecuted);
    
    return this;
  }

  /**
   * Get providerExecuted
   * @return providerExecuted
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getProviderExecuted() {
        return providerExecuted.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROVIDER_EXECUTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getProviderExecuted_JsonNullable() {
    return providerExecuted;
  }
  
  @JsonProperty(JSON_PROPERTY_PROVIDER_EXECUTED)
  public void setProviderExecuted_JsonNullable(JsonNullable<Boolean> providerExecuted) {
    this.providerExecuted = providerExecuted;
  }

  public void setProviderExecuted(Boolean providerExecuted) {
    this.providerExecuted = JsonNullable.<Boolean>of(providerExecuted);
  }

  public StreamToolOutputAvailablePart toolCallId(String toolCallId) {
    
    this.toolCallId = toolCallId;
    return this;
  }

  /**
   * Get toolCallId
   * @return toolCallId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getToolCallId() {
    return toolCallId;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToolCallId(String toolCallId) {
    this.toolCallId = toolCallId;
  }

  public StreamToolOutputAvailablePart type(String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamToolOutputAvailablePart streamToolOutputAvailablePart = (StreamToolOutputAvailablePart) o;
    return equalsNullable(this.dynamic, streamToolOutputAvailablePart.dynamic) &&
        Objects.equals(this.output, streamToolOutputAvailablePart.output) &&
        equalsNullable(this.providerExecuted, streamToolOutputAvailablePart.providerExecuted) &&
        Objects.equals(this.toolCallId, streamToolOutputAvailablePart.toolCallId) &&
        Objects.equals(this.type, streamToolOutputAvailablePart.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(dynamic), output, hashCodeNullable(providerExecuted), toolCallId, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamToolOutputAvailablePart {\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    providerExecuted: ").append(toIndentedString(providerExecuted)).append("\n");
    sb.append("    toolCallId: ").append(toIndentedString(toolCallId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

