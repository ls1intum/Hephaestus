/*
 * Hephaestus Intelligence Service API
 * API documentation for the Hephaestus Intelligence Service.
 *
 * The version of the OpenAPI document: 0.9.1-rc.5
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.in.www1.hephaestus.intelligenceservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.hibernate.validator.constraints.*;

/**
 * WeatherHourly
 */
@JsonPropertyOrder({
  WeatherHourly.JSON_PROPERTY_TEMPERATURE2M,
  WeatherHourly.JSON_PROPERTY_TIME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class WeatherHourly {
  public static final String JSON_PROPERTY_TEMPERATURE2M = "temperature_2m";
  private List<BigDecimal> temperature2m = new ArrayList<>();

  public static final String JSON_PROPERTY_TIME = "time";
  private List<String> time = new ArrayList<>();

  public WeatherHourly() {
  }

  public WeatherHourly temperature2m(List<BigDecimal> temperature2m) {
    
    this.temperature2m = temperature2m;
    return this;
  }

  public WeatherHourly addTemperature2mItem(BigDecimal temperature2mItem) {
    if (this.temperature2m == null) {
      this.temperature2m = new ArrayList<>();
    }
    this.temperature2m.add(temperature2mItem);
    return this;
  }

  /**
   * Get temperature2m
   * @return temperature2m
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPERATURE2M)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<BigDecimal> getTemperature2m() {
    return temperature2m;
  }


  @JsonProperty(JSON_PROPERTY_TEMPERATURE2M)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemperature2m(List<BigDecimal> temperature2m) {
    this.temperature2m = temperature2m;
  }

  public WeatherHourly time(List<String> time) {
    
    this.time = time;
    return this;
  }

  public WeatherHourly addTimeItem(String timeItem) {
    if (this.time == null) {
      this.time = new ArrayList<>();
    }
    this.time.add(timeItem);
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getTime() {
    return time;
  }


  @JsonProperty(JSON_PROPERTY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTime(List<String> time) {
    this.time = time;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WeatherHourly weatherHourly = (WeatherHourly) o;
    return Objects.equals(this.temperature2m, weatherHourly.temperature2m) &&
        Objects.equals(this.time, weatherHourly.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(temperature2m, time);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WeatherHourly {\n");
    sb.append("    temperature2m: ").append(toIndentedString(temperature2m)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

