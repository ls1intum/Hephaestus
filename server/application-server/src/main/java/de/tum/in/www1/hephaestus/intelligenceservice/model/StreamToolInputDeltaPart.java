/*
 * Hephaestus Intelligence Service API
 * API documentation for the Hephaestus Intelligence Service.
 *
 * The version of the OpenAPI document: 0.9.0-rc.11
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.in.www1.hephaestus.intelligenceservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.hibernate.validator.constraints.*;

/**
 * Tool input delta event.
 */
@JsonPropertyOrder({
  StreamToolInputDeltaPart.JSON_PROPERTY_INPUT_TEXT_DELTA,
  StreamToolInputDeltaPart.JSON_PROPERTY_TOOL_CALL_ID,
  StreamToolInputDeltaPart.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class StreamToolInputDeltaPart {
  public static final String JSON_PROPERTY_INPUT_TEXT_DELTA = "inputTextDelta";
  private String inputTextDelta;

  public static final String JSON_PROPERTY_TOOL_CALL_ID = "toolCallId";
  private String toolCallId;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type = "tool-input-delta";

  public StreamToolInputDeltaPart() {
  }

  public StreamToolInputDeltaPart inputTextDelta(String inputTextDelta) {
    
    this.inputTextDelta = inputTextDelta;
    return this;
  }

  /**
   * Get inputTextDelta
   * @return inputTextDelta
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUT_TEXT_DELTA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInputTextDelta() {
    return inputTextDelta;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_TEXT_DELTA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputTextDelta(String inputTextDelta) {
    this.inputTextDelta = inputTextDelta;
  }

  public StreamToolInputDeltaPart toolCallId(String toolCallId) {
    
    this.toolCallId = toolCallId;
    return this;
  }

  /**
   * Get toolCallId
   * @return toolCallId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getToolCallId() {
    return toolCallId;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToolCallId(String toolCallId) {
    this.toolCallId = toolCallId;
  }

  public StreamToolInputDeltaPart type(String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamToolInputDeltaPart streamToolInputDeltaPart = (StreamToolInputDeltaPart) o;
    return Objects.equals(this.inputTextDelta, streamToolInputDeltaPart.inputTextDelta) &&
        Objects.equals(this.toolCallId, streamToolInputDeltaPart.toolCallId) &&
        Objects.equals(this.type, streamToolInputDeltaPart.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputTextDelta, toolCallId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamToolInputDeltaPart {\n");
    sb.append("    inputTextDelta: ").append(toIndentedString(inputTextDelta)).append("\n");
    sb.append("    toolCallId: ").append(toIndentedString(toolCallId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

