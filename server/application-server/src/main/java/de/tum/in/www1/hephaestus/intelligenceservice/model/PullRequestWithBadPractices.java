/*
 * Hephaestus Intelligence Service API
 * API documentation for the Hephaestus Intelligence Service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.in.www1.hephaestus.intelligenceservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.hibernate.validator.constraints.*;

/**
 * PullRequestWithBadPractices
 */
@JsonPropertyOrder({
  PullRequestWithBadPractices.JSON_PROPERTY_BAD_PRACTICE_IDS,
  PullRequestWithBadPractices.JSON_PROPERTY_PULL_REQUEST_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class PullRequestWithBadPractices {
  public static final String JSON_PROPERTY_BAD_PRACTICE_IDS = "bad_practice_ids";
  private List<String> badPracticeIds = new ArrayList<>();

  public static final String JSON_PROPERTY_PULL_REQUEST_ID = "pull_request_id";
  private String pullRequestId;

  public PullRequestWithBadPractices() {
  }

  public PullRequestWithBadPractices badPracticeIds(List<String> badPracticeIds) {
    
    this.badPracticeIds = badPracticeIds;
    return this;
  }

  public PullRequestWithBadPractices addBadPracticeIdsItem(String badPracticeIdsItem) {
    if (this.badPracticeIds == null) {
      this.badPracticeIds = new ArrayList<>();
    }
    this.badPracticeIds.add(badPracticeIdsItem);
    return this;
  }

  /**
   * Get badPracticeIds
   * @return badPracticeIds
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BAD_PRACTICE_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getBadPracticeIds() {
    return badPracticeIds;
  }


  @JsonProperty(JSON_PROPERTY_BAD_PRACTICE_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBadPracticeIds(List<String> badPracticeIds) {
    this.badPracticeIds = badPracticeIds;
  }

  public PullRequestWithBadPractices pullRequestId(String pullRequestId) {
    
    this.pullRequestId = pullRequestId;
    return this;
  }

  /**
   * Get pullRequestId
   * @return pullRequestId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PULL_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPullRequestId() {
    return pullRequestId;
  }


  @JsonProperty(JSON_PROPERTY_PULL_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPullRequestId(String pullRequestId) {
    this.pullRequestId = pullRequestId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullRequestWithBadPractices pullRequestWithBadPractices = (PullRequestWithBadPractices) o;
    return Objects.equals(this.badPracticeIds, pullRequestWithBadPractices.badPracticeIds) &&
        Objects.equals(this.pullRequestId, pullRequestWithBadPractices.pullRequestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badPracticeIds, pullRequestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullRequestWithBadPractices {\n");
    sb.append("    badPracticeIds: ").append(toIndentedString(badPracticeIds)).append("\n");
    sb.append("    pullRequestId: ").append(toIndentedString(pullRequestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

