# coding: utf-8
"""
Generated SQLAlchemy models for the Hephaestus database schema.

This file is automatically generated by sqlacodegen. Do not edit manually.
"""
from typing import Any, List, Optional
from sqlalchemy import (
    BigInteger,
    Boolean,
    CheckConstraint,
    Column,
    DateTime,
    ForeignKeyConstraint,
    Identity,
    Index,
    Integer,
    PrimaryKeyConstraint,
    SmallInteger,
    String,
    Table,
    Text,
    UniqueConstraint,
    Uuid,
    text,
)
from sqlalchemy.dialects.postgresql import JSONB, OID, TIMESTAMP
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship
import datetime
import uuid


class Base(DeclarativeBase):
    pass


class ChatMessage(Base):
    __tablename__ = "chat_message"
    __table_args__ = (
        ForeignKeyConstraint(
            ["parent_message_id"],
            ["chat_message.id"],
            name="FKd0fewjs0l68rq2bww9h8o4cmb",
        ),
        ForeignKeyConstraint(
            ["thread_id"], ["chat_thread.id"], name="FK8s34d909gxc4xrlvml8gag9kh"
        ),
        PrimaryKeyConstraint("id", name="chat_messagePK"),
    )
    id: Mapped[uuid.UUID] = mapped_column(Uuid, primary_key=True)
    created_at: Mapped[datetime.datetime] = mapped_column(TIMESTAMP(True, 6))
    role: Mapped[str] = mapped_column(String(16))
    thread_id: Mapped[uuid.UUID] = mapped_column(Uuid)
    metadata_: Mapped[Optional[dict]] = mapped_column("metadata", JSONB)
    parent_message_id: Mapped[Optional[uuid.UUID]] = mapped_column(Uuid)
    parent_message: Mapped[Optional["ChatMessage"]] = relationship(
        "ChatMessage", remote_side=[id], back_populates="parent_message_reverse"
    )
    parent_message_reverse: Mapped[List["ChatMessage"]] = relationship(
        "ChatMessage", remote_side=[parent_message_id], back_populates="parent_message"
    )
    thread: Mapped["ChatThread"] = relationship(
        "ChatThread", foreign_keys=[thread_id], back_populates="chat_message"
    )
    chat_thread: Mapped[Optional["ChatThread"]] = relationship(
        "ChatThread",
        uselist=False,
        foreign_keys="[ChatThread.selected_leaf_message_id]",
        back_populates="selected_leaf_message",
    )
    chat_message_part: Mapped[List["ChatMessagePart"]] = relationship(
        "ChatMessagePart", back_populates="message"
    )


class ChatMessageVote(Base):
    __tablename__ = "chat_message_vote"
    __table_args__ = (PrimaryKeyConstraint("message_id", name="chat_message_votePK"),)
    message_id: Mapped[uuid.UUID] = mapped_column(Uuid, primary_key=True)
    created_at: Mapped[datetime.datetime] = mapped_column(TIMESTAMP(True, 6))
    is_upvoted: Mapped[bool] = mapped_column(Boolean)
    updated_at: Mapped[datetime.datetime] = mapped_column(TIMESTAMP(True, 6))


class ChatThread(Base):
    __tablename__ = "chat_thread"
    __table_args__ = (
        ForeignKeyConstraint(
            ["selected_leaf_message_id"],
            ["chat_message.id"],
            name="FK34beodgwi0g7kn66svlk4hlfr",
        ),
        ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="FKikdxlx9viomcwrgxj7fbyfsew"
        ),
        PrimaryKeyConstraint("id", name="chat_threadPK"),
        UniqueConstraint(
            "selected_leaf_message_id",
            name="uc_chat_threadselected_leaf_message_id_col",
        ),
    )
    id: Mapped[uuid.UUID] = mapped_column(Uuid, primary_key=True)
    created_at: Mapped[datetime.datetime] = mapped_column(TIMESTAMP(True, 6))
    title: Mapped[Optional[str]] = mapped_column(Text)
    selected_leaf_message_id: Mapped[Optional[uuid.UUID]] = mapped_column(Uuid)
    user_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    chat_message: Mapped[List["ChatMessage"]] = relationship(
        "ChatMessage", foreign_keys="[ChatMessage.thread_id]", back_populates="thread"
    )
    selected_leaf_message: Mapped[Optional["ChatMessage"]] = relationship(
        "ChatMessage",
        foreign_keys=[selected_leaf_message_id],
        back_populates="chat_thread",
    )
    user: Mapped[Optional["User"]] = relationship("User", back_populates="chat_thread")


t_databasechangelog = Table(
    "databasechangelog",
    Base.metadata,
    Column("id", String(255), nullable=False),
    Column("author", String(255), nullable=False),
    Column("filename", String(255), nullable=False),
    Column("dateexecuted", DateTime, nullable=False),
    Column("orderexecuted", Integer, nullable=False),
    Column("exectype", String(10), nullable=False),
    Column("md5sum", String(35)),
    Column("description", String(255)),
    Column("comments", String(255)),
    Column("tag", String(255)),
    Column("liquibase", String(20)),
    Column("contexts", String(255)),
    Column("labels", String(255)),
    Column("deployment_id", String(10)),
)


class Databasechangeloglock(Base):
    __tablename__ = "databasechangeloglock"
    __table_args__ = (PrimaryKeyConstraint("id", name="databasechangeloglock_pkey"),)
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    locked: Mapped[bool] = mapped_column(Boolean)
    lockgranted: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime)
    lockedby: Mapped[Optional[str]] = mapped_column(String(255))


class Repository(Base):
    __tablename__ = "repository"
    __table_args__ = (PrimaryKeyConstraint("id", name="repository_pkey"),)
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    has_issues: Mapped[bool] = mapped_column(Boolean)
    has_projects: Mapped[bool] = mapped_column(Boolean)
    has_wiki: Mapped[bool] = mapped_column(Boolean)
    is_archived: Mapped[bool] = mapped_column(Boolean)
    is_disabled: Mapped[bool] = mapped_column(Boolean)
    is_private: Mapped[bool] = mapped_column(Boolean)
    stargazers_count: Mapped[int] = mapped_column(Integer)
    watchers_count: Mapped[int] = mapped_column(Integer)
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    updated_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    default_branch: Mapped[Optional[str]] = mapped_column(String(255))
    description: Mapped[Optional[str]] = mapped_column(String(255))
    homepage: Mapped[Optional[str]] = mapped_column(String(255))
    html_url: Mapped[Optional[str]] = mapped_column(String(255))
    name: Mapped[Optional[str]] = mapped_column(String(255))
    name_with_owner: Mapped[Optional[str]] = mapped_column(String(255))
    pushed_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    visibility: Mapped[Optional[str]] = mapped_column(String(255))
    team: Mapped[List["Team"]] = relationship(
        "Team", secondary="team_repositories", back_populates="repository"
    )
    label: Mapped[List["Label"]] = relationship("Label", back_populates="repository")
    milestone: Mapped[List["Milestone"]] = relationship(
        "Milestone", back_populates="repository"
    )
    team_repository_permission: Mapped[List["TeamRepositoryPermission"]] = relationship(
        "TeamRepositoryPermission", back_populates="repository"
    )
    team_v2_repository_permission: Mapped[List["TeamV2RepositoryPermission"]] = (
        relationship("TeamV2RepositoryPermission", back_populates="repository")
    )
    issue: Mapped[List["Issue"]] = relationship("Issue", back_populates="repository")


class Team(Base):
    __tablename__ = "team"
    __table_args__ = (
        CheckConstraint(
            "privacy::text = ANY (ARRAY['SECRET'::character varying, 'CLOSED'::character varying]::text[])",
            name="team_privacy_check",
        ),
        PrimaryKeyConstraint("id", name="teamPK"),
    )
    id: Mapped[int] = mapped_column(
        BigInteger,
        Identity(
            start=1,
            increment=1,
            minvalue=1,
            maxvalue=9223372036854775807,
            cycle=False,
            cache=1,
        ),
        primary_key=True,
    )
    hidden: Mapped[bool] = mapped_column(Boolean, server_default=text("false"))
    color: Mapped[Optional[str]] = mapped_column(String(255))
    name: Mapped[Optional[str]] = mapped_column(String(255))
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(TIMESTAMP(True, 6))
    updated_at: Mapped[Optional[datetime.datetime]] = mapped_column(TIMESTAMP(True, 6))
    description: Mapped[Optional[str]] = mapped_column(Text)
    html_url: Mapped[Optional[str]] = mapped_column(Text)
    last_synced_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(True, 6)
    )
    organization: Mapped[Optional[str]] = mapped_column(String(255))
    parent_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    privacy: Mapped[Optional[str]] = mapped_column(String(32))
    repository: Mapped[List["Repository"]] = relationship(
        "Repository", secondary="team_repositories", back_populates="team"
    )
    user: Mapped[List["User"]] = relationship(
        "User", secondary="team_members", back_populates="team"
    )
    label: Mapped[List["Label"]] = relationship(
        "Label", secondary="team_labels", back_populates="team"
    )
    team_membership: Mapped[List["TeamMembership"]] = relationship(
        "TeamMembership", back_populates="team"
    )
    team_repository_permission: Mapped[List["TeamRepositoryPermission"]] = relationship(
        "TeamRepositoryPermission", back_populates="team"
    )


class TeamV2(Base):
    __tablename__ = "team_v2"
    __table_args__ = (PrimaryKeyConstraint("id", name="team_v2PK"),)
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(TIMESTAMP(True, 6))
    updated_at: Mapped[Optional[datetime.datetime]] = mapped_column(TIMESTAMP(True, 6))
    description: Mapped[Optional[str]] = mapped_column(Text)
    html_url: Mapped[Optional[str]] = mapped_column(Text)
    last_synced_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(True, 6)
    )
    name: Mapped[Optional[str]] = mapped_column(String(255))
    organization: Mapped[Optional[str]] = mapped_column(String(255))
    parent_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    privacy: Mapped[Optional[str]] = mapped_column(String(32))
    team_v2_membership: Mapped[List["TeamV2Membership"]] = relationship(
        "TeamV2Membership", back_populates="team"
    )
    team_v2_repository_permission: Mapped[List["TeamV2RepositoryPermission"]] = (
        relationship("TeamV2RepositoryPermission", back_populates="team")
    )


class User(Base):
    __tablename__ = "user"
    __table_args__ = (PrimaryKeyConstraint("id", name="user_pkey"),)
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    followers: Mapped[int] = mapped_column(Integer)
    following: Mapped[int] = mapped_column(Integer)
    league_points: Mapped[int] = mapped_column(Integer, server_default=text("0"))
    notifications_enabled: Mapped[bool] = mapped_column(
        Boolean, server_default=text("true")
    )
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    updated_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    avatar_url: Mapped[Optional[str]] = mapped_column(String(255))
    blog: Mapped[Optional[str]] = mapped_column(String(255))
    company: Mapped[Optional[str]] = mapped_column(String(255))
    description: Mapped[Optional[str]] = mapped_column(String(255))
    email: Mapped[Optional[str]] = mapped_column(String(255))
    html_url: Mapped[Optional[str]] = mapped_column(String(255))
    location: Mapped[Optional[str]] = mapped_column(String(255))
    login: Mapped[Optional[str]] = mapped_column(String(255))
    name: Mapped[Optional[str]] = mapped_column(String(255))
    type: Mapped[Optional[str]] = mapped_column(String(255))
    chat_thread: Mapped[List["ChatThread"]] = relationship(
        "ChatThread", back_populates="user"
    )
    team: Mapped[List["Team"]] = relationship(
        "Team", secondary="team_members", back_populates="user"
    )
    document: Mapped[List["Document"]] = relationship("Document", back_populates="user")
    milestone: Mapped[List["Milestone"]] = relationship(
        "Milestone", back_populates="creator"
    )
    team_membership: Mapped[List["TeamMembership"]] = relationship(
        "TeamMembership", back_populates="user"
    )
    team_v2_membership: Mapped[List["TeamV2Membership"]] = relationship(
        "TeamV2Membership", back_populates="user"
    )
    issue: Mapped[List["Issue"]] = relationship(
        "Issue", foreign_keys="[Issue.author_id]", back_populates="author"
    )
    issue_: Mapped[List["Issue"]] = relationship(
        "Issue", foreign_keys="[Issue.merged_by_id]", back_populates="merged_by"
    )
    issue1: Mapped[List["Issue"]] = relationship(
        "Issue", secondary="issue_assignee", back_populates="user"
    )
    pull_request: Mapped[List["Issue"]] = relationship(
        "Issue", secondary="pull_request_requested_reviewers", back_populates="user_"
    )
    issue_comment: Mapped[List["IssueComment"]] = relationship(
        "IssueComment", back_populates="author"
    )
    pull_request_review: Mapped[List["PullRequestReview"]] = relationship(
        "PullRequestReview", back_populates="author"
    )
    pull_request_review_comment: Mapped[List["PullRequestReviewComment"]] = (
        relationship("PullRequestReviewComment", back_populates="author")
    )


class Workspace(Base):
    __tablename__ = "workspace"
    __table_args__ = (PrimaryKeyConstraint("id", name="workspacePK"),)
    id: Mapped[int] = mapped_column(
        BigInteger,
        Identity(
            start=1,
            increment=1,
            minvalue=1,
            maxvalue=9223372036854775807,
            cycle=False,
            cache=1,
        ),
        primary_key=True,
    )
    users_synced_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(precision=6)
    )
    repository_to_monitor: Mapped[List["RepositoryToMonitor"]] = relationship(
        "RepositoryToMonitor", back_populates="workspace"
    )


class ChatMessagePart(Base):
    __tablename__ = "chat_message_part"
    __table_args__ = (
        ForeignKeyConstraint(
            ["message_id"], ["chat_message.id"], name="FKkfle3niou3f9r63mc3u8vi1na"
        ),
        PrimaryKeyConstraint("message_id", "order_index", name="chat_message_partPK"),
    )
    message_id: Mapped[uuid.UUID] = mapped_column(Uuid, primary_key=True)
    order_index: Mapped[int] = mapped_column(Integer, primary_key=True)
    type: Mapped[str] = mapped_column(String(32))
    content: Mapped[Optional[dict]] = mapped_column(JSONB)
    original_type: Mapped[Optional[str]] = mapped_column(String(128))
    message: Mapped["ChatMessage"] = relationship(
        "ChatMessage", back_populates="chat_message_part"
    )


class Document(Base):
    __tablename__ = "document"
    __table_args__ = (
        ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="FKjhdxdv9sijhujiynqbb5jc010"
        ),
        PrimaryKeyConstraint("id", "version_number", name="documentPK"),
        Index("idx_document_created_at", "created_at"),
        Index("idx_document_id", "id"),
        Index("idx_document_user_id", "user_id"),
    )
    id: Mapped[uuid.UUID] = mapped_column(Uuid, primary_key=True)
    version_number: Mapped[int] = mapped_column(Integer, primary_key=True)
    created_at: Mapped[datetime.datetime] = mapped_column(TIMESTAMP(True, 6))
    kind: Mapped[str] = mapped_column(String(255))
    title: Mapped[str] = mapped_column(String(255))
    user_id: Mapped[int] = mapped_column(BigInteger)
    content: Mapped[Optional[str]] = mapped_column(Text)
    user: Mapped["User"] = relationship("User", back_populates="document")


class Label(Base):
    __tablename__ = "label"
    __table_args__ = (
        ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], name="fk2951edbl9g9y8ee1q97e2ff75"
        ),
        PrimaryKeyConstraint("id", name="label_pkey"),
    )
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    color: Mapped[Optional[str]] = mapped_column(String(255))
    description: Mapped[Optional[str]] = mapped_column(String(255))
    name: Mapped[Optional[str]] = mapped_column(String(255))
    repository_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    repository: Mapped[Optional["Repository"]] = relationship(
        "Repository", back_populates="label"
    )
    team: Mapped[List["Team"]] = relationship(
        "Team", secondary="team_labels", back_populates="label"
    )
    issue: Mapped[List["Issue"]] = relationship(
        "Issue", secondary="issue_label", back_populates="label"
    )


class Milestone(Base):
    __tablename__ = "milestone"
    __table_args__ = (
        ForeignKeyConstraint(
            ["creator_id"], ["user.id"], name="fkg6ieho7gomiumy85puy6l13f1"
        ),
        ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], name="fkbjhs37s6qmqtd330gu9mit6w0"
        ),
        PrimaryKeyConstraint("id", name="milestone_pkey"),
    )
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    number: Mapped[int] = mapped_column(Integer)
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    updated_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    closed_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    description: Mapped[Optional[Any]] = mapped_column(OID)
    due_on: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    html_url: Mapped[Optional[str]] = mapped_column(String(255))
    state: Mapped[Optional[str]] = mapped_column(String(255))
    title: Mapped[Optional[str]] = mapped_column(String(255))
    creator_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    repository_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    creator: Mapped[Optional["User"]] = relationship("User", back_populates="milestone")
    repository: Mapped[Optional["Repository"]] = relationship(
        "Repository", back_populates="milestone"
    )
    issue: Mapped[List["Issue"]] = relationship("Issue", back_populates="milestone")


class RepositoryToMonitor(Base):
    __tablename__ = "repository_to_monitor"
    __table_args__ = (
        ForeignKeyConstraint(
            ["workspace_id"], ["workspace.id"], name="FKdkxnkm4a2wyw0d5k63gh2st64"
        ),
        PrimaryKeyConstraint("id", name="repository_to_monitorPK"),
    )
    id: Mapped[int] = mapped_column(
        BigInteger,
        Identity(
            start=1,
            increment=1,
            minvalue=1,
            maxvalue=9223372036854775807,
            cycle=False,
            cache=1,
        ),
        primary_key=True,
    )
    issues_and_pull_requests_synced_at: Mapped[Optional[datetime.datetime]] = (
        mapped_column(TIMESTAMP(precision=6))
    )
    labels_synced_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(precision=6)
    )
    milestones_synced_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(precision=6)
    )
    name_with_owner: Mapped[Optional[str]] = mapped_column(String(255))
    repository_synced_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(precision=6)
    )
    workspace_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    workspace: Mapped[Optional["Workspace"]] = relationship(
        "Workspace", back_populates="repository_to_monitor"
    )


t_team_members = Table(
    "team_members",
    Base.metadata,
    Column("team_id", BigInteger, primary_key=True, nullable=False),
    Column("user_id", BigInteger, primary_key=True, nullable=False),
    ForeignKeyConstraint(["team_id"], ["team.id"], name="FKb3toat7ors5scfmd3n69dhmr1"),
    ForeignKeyConstraint(["user_id"], ["user.id"], name="FKrk1tw9123clx7w5wjx6b58qch"),
    PrimaryKeyConstraint("team_id", "user_id", name="team_membersPK"),
)


class TeamMembership(Base):
    __tablename__ = "team_membership"
    __table_args__ = (
        CheckConstraint(
            "role::text = ANY (ARRAY['MEMBER'::character varying, 'MAINTAINER'::character varying]::text[])",
            name="team_membership_role_check",
        ),
        ForeignKeyConstraint(
            ["team_id"], ["team.id"], name="fkrf92vmiawfvyhxcmigcg10opm"
        ),
        ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="fknkpwi3whks92uvhn5qe71v4k6"
        ),
        PrimaryKeyConstraint("team_id", "user_id", name="team_membership_pkey"),
    )
    user_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    team_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    role: Mapped[Optional[str]] = mapped_column(String(32))
    team: Mapped["Team"] = relationship("Team", back_populates="team_membership")
    user: Mapped["User"] = relationship("User", back_populates="team_membership")


t_team_repositories = Table(
    "team_repositories",
    Base.metadata,
    Column("team_id", BigInteger, primary_key=True, nullable=False),
    Column("repository_id", BigInteger, primary_key=True, nullable=False),
    ForeignKeyConstraint(
        ["repository_id"], ["repository.id"], name="FKg67ljxfdoy2i15wkfskdefhvf"
    ),
    ForeignKeyConstraint(["team_id"], ["team.id"], name="FKip72ume6ebpeowoopiylw3gib"),
    PrimaryKeyConstraint("team_id", "repository_id", name="team_repositoriesPK"),
)


class TeamRepositoryPermission(Base):
    __tablename__ = "team_repository_permission"
    __table_args__ = (
        CheckConstraint(
            "permission::text = ANY (ARRAY['READ'::character varying, 'WRITE'::character varying, 'MAINTAIN'::character varying, 'ADMIN'::character varying]::text[])",
            name="team_repository_permission_permission_check",
        ),
        ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], name="fk92gtctw6ca02527qjja7gns9f"
        ),
        ForeignKeyConstraint(
            ["team_id"], ["team.id"], name="fk7qxvqq8p6690vtdux47lsg8b1"
        ),
        PrimaryKeyConstraint(
            "repository_id", "team_id", name="team_repository_permission_pkey"
        ),
    )
    permission: Mapped[str] = mapped_column(String(32))
    repository_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    team_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    repository: Mapped["Repository"] = relationship(
        "Repository", back_populates="team_repository_permission"
    )
    team: Mapped["Team"] = relationship(
        "Team", back_populates="team_repository_permission"
    )


class TeamV2Membership(Base):
    __tablename__ = "team_v2_membership"
    __table_args__ = (
        ForeignKeyConstraint(
            ["team_id"], ["team_v2.id"], name="FKqx9knktjv7ep34em8xxj22im0"
        ),
        ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="FK72jl22tdts2ia0icqa5qot044"
        ),
        PrimaryKeyConstraint("team_id", "user_id", name="team_v2_membershipPK"),
    )
    user_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    team_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    role: Mapped[Optional[str]] = mapped_column(String(32))
    team: Mapped["TeamV2"] = relationship("TeamV2", back_populates="team_v2_membership")
    user: Mapped["User"] = relationship("User", back_populates="team_v2_membership")


class TeamV2RepositoryPermission(Base):
    __tablename__ = "team_v2_repository_permission"
    __table_args__ = (
        ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], name="FKkkg4iyyc4nn31erml7j72u6cl"
        ),
        ForeignKeyConstraint(
            ["team_id"], ["team_v2.id"], name="FK803huikp5crsrk7v28kv09vmi"
        ),
        PrimaryKeyConstraint(
            "repository_id", "team_id", name="team_v2_repository_permissionPK"
        ),
    )
    permission: Mapped[str] = mapped_column(String(32))
    repository_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    team_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    repository: Mapped["Repository"] = relationship(
        "Repository", back_populates="team_v2_repository_permission"
    )
    team: Mapped["TeamV2"] = relationship(
        "TeamV2", back_populates="team_v2_repository_permission"
    )


class Issue(Base):
    __tablename__ = "issue"
    __table_args__ = (
        ForeignKeyConstraint(
            ["author_id"], ["user.id"], name="fkrwr6v8fiqetuiuvfjcvie8s85"
        ),
        ForeignKeyConstraint(
            ["merged_by_id"], ["user.id"], name="fkqvnu6vslj5txt8xencru8m6x4"
        ),
        ForeignKeyConstraint(
            ["milestone_id"], ["milestone.id"], name="fk7t1o4tuel06m9bn4dppqmiod6"
        ),
        ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], name="fk76s4b6ncspm9bk35y49xh4s9t"
        ),
        PrimaryKeyConstraint("id", name="issue_pkey"),
    )
    issue_type: Mapped[str] = mapped_column(String(31))
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    comments_count: Mapped[int] = mapped_column(Integer)
    is_locked: Mapped[bool] = mapped_column(Boolean)
    number: Mapped[int] = mapped_column(Integer)
    has_pull_request: Mapped[bool] = mapped_column(Boolean)
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    updated_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    body: Mapped[Optional[Any]] = mapped_column(OID)
    closed_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    html_url: Mapped[Optional[str]] = mapped_column(String(255))
    state: Mapped[Optional[str]] = mapped_column(String(255))
    title: Mapped[Optional[str]] = mapped_column(String(255))
    additions: Mapped[Optional[int]] = mapped_column(Integer)
    changed_files: Mapped[Optional[int]] = mapped_column(Integer)
    commits: Mapped[Optional[int]] = mapped_column(Integer)
    deletions: Mapped[Optional[int]] = mapped_column(Integer)
    is_draft: Mapped[Optional[bool]] = mapped_column(Boolean)
    is_mergeable: Mapped[Optional[bool]] = mapped_column(Boolean)
    is_merged: Mapped[Optional[bool]] = mapped_column(Boolean)
    maintainer_can_modify: Mapped[Optional[bool]] = mapped_column(Boolean)
    merge_commit_sha: Mapped[Optional[str]] = mapped_column(String(255))
    mergeable_state: Mapped[Optional[str]] = mapped_column(String(255))
    merged_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    author_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    milestone_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    repository_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    merged_by_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    last_sync_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(precision=6)
    )
    bad_practice_summary: Mapped[Optional[Any]] = mapped_column(OID)
    last_detection_time: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(True, 6)
    )
    author: Mapped[Optional["User"]] = relationship(
        "User", foreign_keys=[author_id], back_populates="issue"
    )
    merged_by: Mapped[Optional["User"]] = relationship(
        "User", foreign_keys=[merged_by_id], back_populates="issue_"
    )
    milestone: Mapped[Optional["Milestone"]] = relationship(
        "Milestone", back_populates="issue"
    )
    repository: Mapped[Optional["Repository"]] = relationship(
        "Repository", back_populates="issue"
    )
    user: Mapped[List["User"]] = relationship(
        "User", secondary="issue_assignee", back_populates="issue1"
    )
    label: Mapped[List["Label"]] = relationship(
        "Label", secondary="issue_label", back_populates="issue"
    )
    user_: Mapped[List["User"]] = relationship(
        "User",
        secondary="pull_request_requested_reviewers",
        back_populates="pull_request",
    )
    bad_practice_detection: Mapped[List["BadPracticeDetection"]] = relationship(
        "BadPracticeDetection", back_populates="pullrequest"
    )
    issue_comment: Mapped[List["IssueComment"]] = relationship(
        "IssueComment", back_populates="issue"
    )
    pull_request_review: Mapped[List["PullRequestReview"]] = relationship(
        "PullRequestReview", back_populates="pull_request"
    )
    pull_request_review_comment: Mapped[List["PullRequestReviewComment"]] = (
        relationship("PullRequestReviewComment", back_populates="pull_request")
    )
    pullrequestbadpractice: Mapped[List["Pullrequestbadpractice"]] = relationship(
        "Pullrequestbadpractice", back_populates="pullrequest"
    )


t_team_labels = Table(
    "team_labels",
    Base.metadata,
    Column("team_id", BigInteger, primary_key=True, nullable=False),
    Column("label_id", BigInteger, primary_key=True, nullable=False),
    ForeignKeyConstraint(
        ["label_id"], ["label.id"], name="FKa8aajjyqj8uwnqtrrbg3a9v5o"
    ),
    ForeignKeyConstraint(["team_id"], ["team.id"], name="FK3f9iwbjmf3gyflex7xoofnnbh"),
    PrimaryKeyConstraint("team_id", "label_id", name="team_labelsPK"),
)


class BadPracticeDetection(Base):
    __tablename__ = "bad_practice_detection"
    __table_args__ = (
        ForeignKeyConstraint(
            ["pullrequest_id"], ["issue.id"], name="FKhk2vrsr2rdq2gb3cjnvieh3nw"
        ),
        PrimaryKeyConstraint("id", name="bad_practice_detectionPK"),
    )
    id: Mapped[int] = mapped_column(
        BigInteger,
        Identity(
            start=1,
            increment=1,
            minvalue=1,
            maxvalue=9223372036854775807,
            cycle=False,
            cache=1,
        ),
        primary_key=True,
    )
    detection_time: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(True, 6)
    )
    summary: Mapped[Optional[Any]] = mapped_column(OID)
    trace_id: Mapped[Optional[str]] = mapped_column(String(255))
    pullrequest_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    pullrequest: Mapped[Optional["Issue"]] = relationship(
        "Issue", back_populates="bad_practice_detection"
    )
    pullrequestbadpractice: Mapped[List["Pullrequestbadpractice"]] = relationship(
        "Pullrequestbadpractice", back_populates="bad_practice_detection"
    )


t_issue_assignee = Table(
    "issue_assignee",
    Base.metadata,
    Column("issue_id", BigInteger, primary_key=True, nullable=False),
    Column("user_id", BigInteger, primary_key=True, nullable=False),
    ForeignKeyConstraint(
        ["issue_id"], ["issue.id"], name="fkocgmsva4p5e8ic9k5dbjqa15u"
    ),
    ForeignKeyConstraint(["user_id"], ["user.id"], name="fk2cfu8w8wjb9vosy4hbrme0rqe"),
    PrimaryKeyConstraint("issue_id", "user_id", name="issue_assignee_pkey"),
)


class IssueComment(Base):
    __tablename__ = "issue_comment"
    __table_args__ = (
        ForeignKeyConstraint(
            ["author_id"], ["user.id"], name="fkdy6oeojymud1wna20olqgyt31"
        ),
        ForeignKeyConstraint(
            ["issue_id"], ["issue.id"], name="fk8wy5rxggrte2ntcq80g7o7210"
        ),
        PrimaryKeyConstraint("id", name="issue_comment_pkey"),
    )
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    updated_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    author_association: Mapped[Optional[str]] = mapped_column(String(255))
    body: Mapped[Optional[Any]] = mapped_column(OID)
    html_url: Mapped[Optional[str]] = mapped_column(String(255))
    author_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    issue_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    author: Mapped[Optional["User"]] = relationship(
        "User", back_populates="issue_comment"
    )
    issue: Mapped[Optional["Issue"]] = relationship(
        "Issue", back_populates="issue_comment"
    )


t_issue_label = Table(
    "issue_label",
    Base.metadata,
    Column("issue_id", BigInteger, primary_key=True, nullable=False),
    Column("label_id", BigInteger, primary_key=True, nullable=False),
    ForeignKeyConstraint(
        ["issue_id"], ["issue.id"], name="fkit5n9c0frugu5m8xqsxtps63r"
    ),
    ForeignKeyConstraint(["label_id"], ["label.id"], name="fkxbk5rr30kkb6k4ech7x4vh9h"),
    PrimaryKeyConstraint("issue_id", "label_id", name="issue_label_pkey"),
)
t_pull_request_requested_reviewers = Table(
    "pull_request_requested_reviewers",
    Base.metadata,
    Column("pull_request_id", BigInteger, primary_key=True, nullable=False),
    Column("user_id", BigInteger, primary_key=True, nullable=False),
    ForeignKeyConstraint(
        ["pull_request_id"], ["issue.id"], name="fk6dld06xx8rh9xhqfnca070a0i"
    ),
    ForeignKeyConstraint(["user_id"], ["user.id"], name="fkioq4g5aksr97l6qyl4g5l63tn"),
    PrimaryKeyConstraint(
        "pull_request_id", "user_id", name="pull_request_requested_reviewers_pkey"
    ),
)


class PullRequestReview(Base):
    __tablename__ = "pull_request_review"
    __table_args__ = (
        ForeignKeyConstraint(
            ["author_id"], ["user.id"], name="fkeehfcwrodfu61gremlcvhgir5"
        ),
        ForeignKeyConstraint(
            ["pull_request_id"], ["issue.id"], name="fkio96gq2jetvy6a4in9nl8vkvd"
        ),
        PrimaryKeyConstraint("id", name="pull_request_review_pkey"),
    )
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    is_dismissed: Mapped[bool] = mapped_column(Boolean)
    body: Mapped[Optional[Any]] = mapped_column(OID)
    commit_id: Mapped[Optional[str]] = mapped_column(String(255))
    html_url: Mapped[Optional[str]] = mapped_column(String(255))
    state: Mapped[Optional[str]] = mapped_column(String(255))
    submitted_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    author_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    pull_request_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    author: Mapped[Optional["User"]] = relationship(
        "User", back_populates="pull_request_review"
    )
    pull_request: Mapped[Optional["Issue"]] = relationship(
        "Issue", back_populates="pull_request_review"
    )
    pull_request_review_comment: Mapped[List["PullRequestReviewComment"]] = (
        relationship("PullRequestReviewComment", back_populates="review")
    )


class PullRequestReviewComment(Base):
    __tablename__ = "pull_request_review_comment"
    __table_args__ = (
        ForeignKeyConstraint(
            ["author_id"], ["user.id"], name="fktl08ieowbl171xem2bciho7kw"
        ),
        ForeignKeyConstraint(
            ["pull_request_id"], ["issue.id"], name="fkohqvdiswptbm0h8cniq7r1tgq"
        ),
        ForeignKeyConstraint(
            ["review_id"],
            ["pull_request_review.id"],
            name="fkbx1g5jpdegymhyv9pbk2jdgfw",
        ),
        PrimaryKeyConstraint("id", name="pull_request_review_comment_pkey"),
    )
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    line: Mapped[int] = mapped_column(Integer)
    original_line: Mapped[int] = mapped_column(Integer)
    original_position: Mapped[int] = mapped_column(Integer)
    position: Mapped[int] = mapped_column(Integer)
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    updated_at: Mapped[Optional[datetime.datetime]] = mapped_column(DateTime(True))
    author_association: Mapped[Optional[str]] = mapped_column(String(255))
    body: Mapped[Optional[Any]] = mapped_column(OID)
    commit_id: Mapped[Optional[str]] = mapped_column(String(255))
    diff_hunk: Mapped[Optional[Any]] = mapped_column(OID)
    html_url: Mapped[Optional[str]] = mapped_column(String(255))
    original_commit_id: Mapped[Optional[str]] = mapped_column(String(255))
    original_start_line: Mapped[Optional[int]] = mapped_column(Integer)
    path: Mapped[Optional[str]] = mapped_column(String(255))
    side: Mapped[Optional[str]] = mapped_column(String(255))
    start_line: Mapped[Optional[int]] = mapped_column(Integer)
    start_side: Mapped[Optional[str]] = mapped_column(String(255))
    author_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    pull_request_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    review_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    author: Mapped[Optional["User"]] = relationship(
        "User", back_populates="pull_request_review_comment"
    )
    pull_request: Mapped[Optional["Issue"]] = relationship(
        "Issue", back_populates="pull_request_review_comment"
    )
    review: Mapped[Optional["PullRequestReview"]] = relationship(
        "PullRequestReview", back_populates="pull_request_review_comment"
    )


class Pullrequestbadpractice(Base):
    __tablename__ = "pullrequestbadpractice"
    __table_args__ = (
        ForeignKeyConstraint(
            ["bad_practice_detection_id"],
            ["bad_practice_detection.id"],
            name="FKdn50l1oul09kq3142ku39gnlp",
        ),
        ForeignKeyConstraint(
            ["pullrequest_id"], ["issue.id"], name="FK1m1jhw92ublt7ya0d557sg5j"
        ),
        PrimaryKeyConstraint("id", name="pullrequestbadpracticePK"),
    )
    id: Mapped[int] = mapped_column(
        BigInteger,
        Identity(
            start=1,
            increment=1,
            minvalue=1,
            maxvalue=9223372036854775807,
            cycle=False,
            cache=1,
        ),
        primary_key=True,
    )
    description: Mapped[Optional[Any]] = mapped_column(OID)
    title: Mapped[Optional[str]] = mapped_column(String(255))
    pullrequest_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    state: Mapped[Optional[int]] = mapped_column(SmallInteger, server_default=text("0"))
    detection_time: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(True, 6)
    )
    last_update_time: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(True, 6)
    )
    user_state: Mapped[Optional[int]] = mapped_column(SmallInteger)
    detection_pullrequest_lifecycle_state: Mapped[Optional[int]] = mapped_column(
        SmallInteger
    )
    detection_trace_id: Mapped[Optional[str]] = mapped_column(String(255))
    bad_practice_detection_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    bad_practice_detection: Mapped[Optional["BadPracticeDetection"]] = relationship(
        "BadPracticeDetection", back_populates="pullrequestbadpractice"
    )
    pullrequest: Mapped[Optional["Issue"]] = relationship(
        "Issue", back_populates="pullrequestbadpractice"
    )
    bad_practice_feedback: Mapped[List["BadPracticeFeedback"]] = relationship(
        "BadPracticeFeedback", back_populates="pull_request_bad_practice"
    )


class BadPracticeFeedback(Base):
    __tablename__ = "bad_practice_feedback"
    __table_args__ = (
        ForeignKeyConstraint(
            ["pull_request_bad_practice_id"],
            ["pullrequestbadpractice.id"],
            name="FK34k5tg4qb6gy4g7tn9q8uhogl",
        ),
        PrimaryKeyConstraint("id", name="bad_practice_feedbackPK"),
    )
    id: Mapped[int] = mapped_column(
        BigInteger,
        Identity(
            start=1,
            increment=1,
            minvalue=1,
            maxvalue=9223372036854775807,
            cycle=False,
            cache=1,
        ),
        primary_key=True,
    )
    explanation: Mapped[Optional[Any]] = mapped_column(OID)
    type: Mapped[Optional[str]] = mapped_column(String(255))
    pull_request_bad_practice_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    creation_time: Mapped[Optional[datetime.datetime]] = mapped_column(
        TIMESTAMP(True, 6)
    )
    pull_request_bad_practice: Mapped[Optional["Pullrequestbadpractice"]] = (
        relationship("Pullrequestbadpractice", back_populates="bad_practice_feedback")
    )
