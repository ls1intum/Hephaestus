components:
  schemas:
    BadPractice:
      description: A detected bad practice in a pull request.
      properties:
        description:
          description: The description of the bad practice.
          title: Description
          type: string
        status:
          $ref: '#/components/schemas/BadPracticeStatus'
          description: The status of the bad practice.
        title:
          description: The title of the bad practice.
          title: Title
          type: string
      required:
      - title
      - description
      - status
      title: BadPractice
      type: object
    BadPracticeStatus:
      enum:
      - Good Practice
      - Fixed
      - Critical Issue
      - Normal Issue
      - Minor Issue
      - Won't Fix
      - Wrong
      title: BadPracticeStatus
      type: string
    DetectorRequest:
      properties:
        bad_practice_summary:
          title: Bad Practice Summary
          type: string
        bad_practices:
          items:
            $ref: '#/components/schemas/BadPractice'
          title: Bad Practices
          type: array
        description:
          title: Description
          type: string
        lifecycle_state:
          title: Lifecycle State
          type: string
        pull_request_number:
          title: Pull Request Number
          type: integer
        pull_request_template:
          title: Pull Request Template
          type: string
        repository_name:
          title: Repository Name
          type: string
        title:
          title: Title
          type: string
      required:
      - title
      - description
      - lifecycle_state
      - repository_name
      - pull_request_number
      - bad_practice_summary
      - bad_practices
      - pull_request_template
      title: DetectorRequest
      type: object
    DetectorResponse:
      properties:
        bad_practice_summary:
          title: Bad Practice Summary
          type: string
        bad_practices:
          items:
            $ref: '#/components/schemas/BadPractice'
          title: Bad Practices
          type: array
        trace_id:
          title: Trace Id
          type: string
      required:
      - bad_practice_summary
      - bad_practices
      - trace_id
      title: DetectorResponse
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    HealthCheck:
      description: Response model to validate and return when performing a health
        check.
      properties:
        status:
          default: OK
          title: Status
          type: string
      title: HealthCheck
      type: object
    MentorRequest:
      properties:
        content:
          title: Content
          type: string
        session_id:
          title: Session Id
          type: string
      required:
      - session_id
      - content
      title: MentorRequest
      type: object
    MentorResponse:
      properties:
        closed:
          default: false
          title: Closed
          type: boolean
        content:
          title: Content
          type: string
      required:
      - content
      title: MentorResponse
      type: object
    MentorStartRequest:
      properties:
        dev_progress:
          title: Dev Progress
          type: string
        previous_session_id:
          title: Previous Session Id
          type: string
        session_id:
          title: Session Id
          type: string
        user_id:
          title: User Id
          type: string
      required:
      - session_id
      - user_id
      - previous_session_id
      - dev_progress
      title: MentorStartRequest
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  contact:
    email: felixtj.dietrich@tum.de
    name: Felix T.J. Dietrich
  description: API documentation for the Hephaestus Intelligence Service.
  title: Hephaestus Intelligence Service API
  version: 0.8.0
openapi: 3.1.0
paths:
  /detector/:
    post:
      operationId: detect_detector__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetectorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectorResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Detect bad practices for given pull request.
      tags:
      - detector
  /health:
    get:
      description: "## Perform a Health Check\nEndpoint to perform a healthcheck on.\
        \ This endpoint can primarily be used Docker\nto ensure a robust container\
        \ orchestration and management is in place. Other\nservices which rely on\
        \ proper functioning of the API service will not deploy if this\nendpoint\
        \ returns any other HTTP status code except 200 (OK).\nReturns:\n    HealthCheck:\
        \ Returns a JSON response with the health status"
      operationId: get_health_health_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: Return HTTP Status Code 200 (OK)
      summary: Perform a Health Check
      tags:
      - healthcheck
  /mentor/:
    post:
      operationId: generate_mentor__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Continue a chat session with an LLM.
      tags:
      - mentor
  /mentor/health:
    get:
      operationId: status_mentor_health_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Check if the intelligence service is running
      tags:
      - mentor
  /mentor/start:
    post:
      operationId: start_mentor_start_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentorStartRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Start a chat session with an LLM.
      tags:
      - mentor
