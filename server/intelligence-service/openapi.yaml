components:
  schemas:
    BadPractice:
      description: A detected bad practice in a pull request.
      properties:
        description:
          description: The description of the bad practice.
          title: Description
          type: string
        status:
          $ref: '#/components/schemas/BadPracticeStatus'
          description: The status of the bad practice.
        title:
          description: The title of the bad practice.
          title: Title
          type: string
      required:
      - title
      - description
      - status
      title: BadPractice
      type: object
    BadPracticeStatus:
      enum:
      - Good Practice
      - Fixed
      - Critical Issue
      - Normal Issue
      - Minor Issue
      - Won't Fix
      - Wrong
      title: BadPracticeStatus
      type: string
    ChatRequest:
      properties:
        messages:
          description: A list of messages in the chat conversation
          items:
            $ref: '#/components/schemas/Message'
          title: Messages
          type: array
      title: ChatRequest
      type: object
    DetectorRequest:
      properties:
        bad_practice_summary:
          title: Bad Practice Summary
          type: string
        bad_practices:
          items:
            $ref: '#/components/schemas/BadPractice'
          title: Bad Practices
          type: array
        description:
          title: Description
          type: string
        lifecycle_state:
          title: Lifecycle State
          type: string
        pull_request_number:
          title: Pull Request Number
          type: integer
        pull_request_template:
          title: Pull Request Template
          type: string
        repository_name:
          title: Repository Name
          type: string
        title:
          title: Title
          type: string
      required:
      - title
      - description
      - lifecycle_state
      - repository_name
      - pull_request_number
      - bad_practice_summary
      - bad_practices
      - pull_request_template
      title: DetectorRequest
      type: object
    DetectorResponse:
      properties:
        bad_practice_summary:
          title: Bad Practice Summary
          type: string
        bad_practices:
          items:
            $ref: '#/components/schemas/BadPractice'
          title: Bad Practices
          type: array
        trace_id:
          title: Trace Id
          type: string
      required:
      - bad_practice_summary
      - bad_practices
      - trace_id
      title: DetectorResponse
      type: object
    FileUIPart:
      description: A file part of a message.
      properties:
        data:
          title: Data
          type: string
        mimeType:
          title: Mimetype
          type: string
        type:
          const: file
          default: file
          title: Type
          type: string
      required:
      - mimeType
      - data
      title: FileUIPart
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    HealthCheck:
      description: Response model to validate and return when performing a health
        check.
      properties:
        status:
          default: OK
          title: Status
          type: string
      title: HealthCheck
      type: object
    Message:
      additionalProperties: true
      properties:
        createdAt:
          anyOf:
          - type: string
          - type: 'null'
          description: The timestamp of the message
          title: Createdat
        id:
          description: A unique identifier for the message
          title: Id
          type: string
        parts:
          description: 'The parts of the message. Use this for rendering the message
            in the UI.


            Assistant messages can have text, reasoning, and tool invocation parts.

            User messages can have text parts.'
          items:
            anyOf:
            - $ref: '#/components/schemas/TextUIPart'
            - $ref: '#/components/schemas/ReasoningUIPart'
            - $ref: '#/components/schemas/ToolInvocationUIPart'
            - $ref: '#/components/schemas/SourceUIPart'
            - $ref: '#/components/schemas/FileUIPart'
            - $ref: '#/components/schemas/StepStartUIPart'
          title: Parts
          type: array
        role:
          description: The role of the message sender
          enum:
          - user
          - assistant
          - system
          title: Role
          type: string
      required:
      - id
      - role
      title: Message
      type: object
    ReasoningOpenDetail:
      properties:
        signature:
          anyOf:
          - type: string
          - type: 'null'
          title: Signature
        text:
          title: Text
          type: string
        type:
          const: text
          default: text
          title: Type
          type: string
      required:
      - text
      title: ReasoningOpenDetail
      type: object
    ReasoningRedactedDetail:
      properties:
        data:
          title: Data
          type: string
        type:
          const: redacted
          default: redacted
          title: Type
          type: string
      required:
      - data
      title: ReasoningRedactedDetail
      type: object
    ReasoningUIPart:
      description: A reasoning part of a message.
      properties:
        details:
          items:
            anyOf:
            - $ref: '#/components/schemas/ReasoningOpenDetail'
            - $ref: '#/components/schemas/ReasoningRedactedDetail'
          title: Details
          type: array
        reasoning:
          description: The reasoning text
          title: Reasoning
          type: string
        type:
          const: reasoning
          default: reasoning
          title: Type
          type: string
      required:
      - reasoning
      title: ReasoningUIPart
      type: object
    Source:
      properties:
        id:
          description: The ID of the source.
          title: Id
          type: string
        providerMetadata:
          anyOf:
          - type: object
          - type: 'null'
          description: Additional provider metadata for the source.
          title: Providermetadata
        sourceType:
          const: url
          default: url
          title: Sourcetype
          type: string
        title:
          anyOf:
          - type: string
          - type: 'null'
          description: The title of the source.
          title: Title
        url:
          description: The URL of the source.
          title: Url
          type: string
      required:
      - id
      - url
      - providerMetadata
      title: Source
      type: object
    SourceUIPart:
      description: A source part of a message.
      properties:
        source:
          $ref: '#/components/schemas/Source'
          description: The source.
        type:
          const: source
          default: source
          title: Type
          type: string
      required:
      - source
      title: SourceUIPart
      type: object
    StepStartUIPart:
      description: A step boundary part of a message.
      properties:
        type:
          const: step-start
          default: step-start
          title: Type
          type: string
      title: StepStartUIPart
      type: object
    TextUIPart:
      description: A text part of a message.
      properties:
        text:
          title: Text
          type: string
        type:
          const: text
          default: text
          title: Type
          type: string
      required:
      - text
      title: TextUIPart
      type: object
    ToolCall:
      properties:
        args:
          title: Args
          type: object
        state:
          const: call
          default: call
          title: State
          type: string
        step:
          anyOf:
          - type: integer
          - type: 'null'
          title: Step
        toolCallId:
          title: Toolcallid
          type: string
        toolName:
          title: Toolname
          type: string
      required:
      - toolCallId
      - toolName
      - args
      title: ToolCall
      type: object
    ToolInvocationUIPart:
      description: A tool invocation part of a message.
      properties:
        toolInvocation:
          anyOf:
          - $ref: '#/components/schemas/ToolCall'
          - $ref: '#/components/schemas/ToolResult'
          description: The tool invocation
          title: Toolinvocation
        type:
          const: tool-invocation
          default: tool-invocation
          title: Type
          type: string
      required:
      - toolInvocation
      title: ToolInvocationUIPart
      type: object
    ToolResult:
      properties:
        args:
          title: Args
          type: object
        result:
          title: Result
          type: object
        state:
          const: result
          title: State
          type: string
        step:
          anyOf:
          - type: integer
          - type: 'null'
          title: Step
        toolCallId:
          title: Toolcallid
          type: string
        toolName:
          title: Toolname
          type: string
      required:
      - state
      - toolCallId
      - toolName
      - args
      - result
      title: ToolResult
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  contact:
    email: felixtj.dietrich@tum.de
    name: Felix T.J. Dietrich
  description: API documentation for the Hephaestus Intelligence Service.
  title: Hephaestus Intelligence Service API
  version: 0.9.0-rc.5
openapi: 3.1.0
paths:
  /detector/:
    post:
      operationId: detect_detector__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetectorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectorResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Detect bad practices for given pull request.
      tags:
      - detector
  /health:
    get:
      description: "## Perform a Health Check\nEndpoint to perform a healthcheck on.\
        \ This endpoint can primarily be used Docker\nto ensure a robust container\
        \ orchestration and management is in place. Other\nservices which rely on\
        \ proper functioning of the API service will not deploy if this\nendpoint\
        \ returns any other HTTP status code except 200 (OK).\nReturns:\n    HealthCheck:\
        \ Returns a JSON response with the health status"
      operationId: get_health_health_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: Return HTTP Status Code 200 (OK)
      summary: Perform a Health Check
      tags:
      - healthcheck
  /mentor/chat:
    post:
      operationId: handle_chat_data_mentor_chat_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
            text/plain:
              examples:
                first-chunk:
                  summary: Typical data stream frame
                  value: 0:"Hello World!"
          description: Data stream for Vercel AI SDK
          headers:
            x-vercel-ai-data-stream:
              description: Protocol version for Vercel AI streaming
              schema:
                example: v1
                type: string
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Handle Chat Data
      tags:
      - mentor
