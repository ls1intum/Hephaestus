#!/usr/bin/env python3
"""
Generate SQLAlchemy models from the database schema.

This script connects to the PostgreSQL database and generates SQLAlchemy models
using sqlacodegen. Uses the application-server database directly.
"""

import os
import sys
import subprocess
from pathlib import Path


def get_database_url() -> str:
    """Get database URL from environment or use defaults."""
    host = os.getenv("DB_HOST", "localhost")
    port = os.getenv("DB_PORT", "5432")
    database = os.getenv("DB_NAME", "hephaestus")
    username = os.getenv("DB_USER", "root")
    password = os.getenv("DB_PASSWORD", "root")

    return f"postgresql+psycopg://{username}:{password}@{host}:{port}/{database}"


def generate_db_models(output_file: Path) -> None:
    """Generate SQLAlchemy models using sqlacodegen."""

    database_url = get_database_url()

    # Prepare sqlacodegen command - we're already running inside poetry environment
    cmd = ["sqlacodegen", "--generator", "declarative", database_url]

    print(f"🔧 Generating models from database: {database_url}")

    try:
        # Run sqlacodegen and capture output
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)

        # File header
        header = '''# coding: utf-8
"""
Generated SQLAlchemy models for the Hephaestus database schema.

This file is automatically generated by sqlacodegen. Do not edit manually.
"""
'''

        # Write the generated models to output file
        with open(output_file, "w") as f:
            f.write(header)

            # Filter out non-Python lines (like pgvector messages)
            lines = result.stdout.split("\n")
            filtered_lines = []
            for line in lines:
                # Skip lines that don't look like Python code
                if line.strip() and not line.strip().startswith("Using "):
                    filtered_lines.append(line)

            f.write("\n".join(filtered_lines))

        print(f"✅ Models generated successfully at: {output_file}")

    except subprocess.CalledProcessError as e:
        print(f"❌ sqlacodegen failed: {e}")
        print(f"stdout: {e.stdout}")
        print(f"stderr: {e.stderr}")
        raise


def main():
    """Main entry point for the model generation script."""

    # Define output file path
    script_dir = Path(__file__).parent
    models_dir = script_dir.parent / "app" / "db"
    models_file = models_dir / "models_gen.py"

    print("🚀 Starting SQLAlchemy model generation...")
    print(f"📁 Output file: {models_file}")

    # Ensure output directory exists
    models_dir.mkdir(parents=True, exist_ok=True)

    try:
        # Generate the models
        generate_db_models(models_file)
        print("✅ Model generation completed successfully!")

    except Exception as e:
        print(f"❌ Model generation failed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
