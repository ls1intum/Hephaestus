// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  LeaderboardEntry,
  LeagueChange,
} from '../models/index.js';
import {
    LeaderboardEntryFromJSON,
    LeaderboardEntryToJSON,
    LeagueChangeFromJSON,
    LeagueChangeToJSON,
} from '../models/index.js';

export interface LeaderboardApiGetLeaderboardRequest {
    after: Date;
    before: Date;
    team?: string;
    sort?: GetLeaderboardSortEnum;
}

export interface LeaderboardApiGetUserLeagueStatsRequest {
    login: string;
    LeaderboardEntry: LeaderboardEntry;
}

/**
 * LeaderboardApi - interface
 * 
 * @export
 * @interface LeaderboardApiInterface
 */
export interface LeaderboardApiInterface {
    /**
     * 
     * @param {Date} after 
     * @param {Date} before 
     * @param {string} [team] 
     * @param {'SCORE' | 'LEAGUE_POINTS'} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardApiInterface
     */
    getLeaderboardRaw(requestParameters: LeaderboardApiGetLeaderboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LeaderboardEntry>>>;

    /**
     */
    getLeaderboard(after: Date, before: Date, team?: string, sort?: GetLeaderboardSortEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LeaderboardEntry>>;

    /**
     * 
     * @param {string} login 
     * @param {LeaderboardEntry} LeaderboardEntry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardApiInterface
     */
    getUserLeagueStatsRaw(requestParameters: LeaderboardApiGetUserLeagueStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeagueChange>>;

    /**
     */
    getUserLeagueStats(login: string, LeaderboardEntry: LeaderboardEntry, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeagueChange>;

}

/**
 * 
 */
export class LeaderboardApi extends runtime.BaseAPI implements LeaderboardApiInterface {

    /**
     */
    async getLeaderboardRaw(requestParameters: LeaderboardApiGetLeaderboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LeaderboardEntry>>> {
        if (requestParameters['after'] == null) {
            throw new runtime.RequiredError(
                'after',
                'Required parameter "after" was null or undefined when calling getLeaderboard().'
            );
        }

        if (requestParameters['before'] == null) {
            throw new runtime.RequiredError(
                'before',
                'Required parameter "before" was null or undefined when calling getLeaderboard().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = (requestParameters['after'] as any).toISOString();
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = (requestParameters['before'] as any).toISOString();
        }

        if (requestParameters['team'] != null) {
            queryParameters['team'] = requestParameters['team'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/leaderboard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LeaderboardEntryFromJSON));
    }

    /**
     */
    async getLeaderboard(after: Date, before: Date, team?: string, sort?: GetLeaderboardSortEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LeaderboardEntry>> {
        const response = await this.getLeaderboardRaw({ after: after, before: before, team: team, sort: sort }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserLeagueStatsRaw(requestParameters: LeaderboardApiGetUserLeagueStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeagueChange>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling getUserLeagueStats().'
            );
        }

        if (requestParameters['LeaderboardEntry'] == null) {
            throw new runtime.RequiredError(
                'LeaderboardEntry',
                'Required parameter "LeaderboardEntry" was null or undefined when calling getUserLeagueStats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['login'] != null) {
            queryParameters['login'] = requestParameters['login'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/leaderboard`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeaderboardEntryToJSON(requestParameters['LeaderboardEntry']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeagueChangeFromJSON(jsonValue));
    }

    /**
     */
    async getUserLeagueStats(login: string, LeaderboardEntry: LeaderboardEntry, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeagueChange> {
        const response = await this.getUserLeagueStatsRaw({ login: login, LeaderboardEntry: LeaderboardEntry }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetLeaderboardSortEnum = {
    SCORE: 'SCORE',
    LEAGUE_POINTS: 'LEAGUE_POINTS',
    unknown_default_open_api: '11184809'
} as const;
export type GetLeaderboardSortEnum = typeof GetLeaderboardSortEnum[keyof typeof GetLeaderboardSortEnum];
