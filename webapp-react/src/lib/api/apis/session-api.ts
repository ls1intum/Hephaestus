/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Session,
} from '../models/index.js';
import {
    SessionFromJSON,
    SessionToJSON,
} from '../models/index.js';

/**
 * SessionApi - interface
 * 
 * @export
 * @interface SessionApiInterface
 */
export interface SessionApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    createNewSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>>;

    /**
     */
    createNewSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    getAllSessionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Session>>>;

    /**
     */
    getAllSessions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Session>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    getLastSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>>;

    /**
     */
    getLastSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session>;

}

/**
 * 
 */
export class SessionApi extends runtime.BaseAPI implements SessionApiInterface {

    /**
     */
    async createNewSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mentor/sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     */
    async createNewSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
        const response = await this.createNewSessionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllSessionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Session>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mentor/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionFromJSON));
    }

    /**
     */
    async getAllSessions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Session>> {
        const response = await this.getAllSessionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getLastSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mentor/sessions/last`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     */
    async getLastSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
        const response = await this.getLastSessionRaw(initOverrides);
        return await response.value();
    }

}
