/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  TeamInfo,
  UserInfo,
  UserTeams,
} from '../models/index.js';
import {
    TeamInfoFromJSON,
    TeamInfoToJSON,
    UserInfoFromJSON,
    UserInfoToJSON,
    UserTeamsFromJSON,
    UserTeamsToJSON,
} from '../models/index.js';

export interface WorkspaceApiAddLabelToTeamRequest {
    teamId: number;
    repositoryId: number;
    label: string;
}

export interface WorkspaceApiAddRepositoryToMonitorRequest {
    owner: string;
    name: string;
}

export interface WorkspaceApiAddRepositoryToTeamRequest {
    teamId: number;
    repositoryOwner: string;
    repositoryName: string;
}

export interface WorkspaceApiAddTeamToUserRequest {
    login: string;
    teamId: number;
}

export interface WorkspaceApiCreateTeamRequest {
    TeamInfo: TeamInfo;
}

export interface WorkspaceApiDeleteTeamRequest {
    teamId: number;
}

export interface WorkspaceApiRemoveLabelFromTeamRequest {
    teamId: number;
    labelId: number;
}

export interface WorkspaceApiRemoveRepositoryFromTeamRequest {
    teamId: number;
    repositoryOwner: string;
    repositoryName: string;
}

export interface WorkspaceApiRemoveRepositoryToMonitorRequest {
    owner: string;
    name: string;
}

export interface WorkspaceApiRemoveUserFromTeamRequest {
    login: string;
    teamId: number;
}

/**
 * WorkspaceApi - interface
 * 
 * @export
 * @interface WorkspaceApiInterface
 */
export interface WorkspaceApiInterface {
    /**
     * 
     * @param {number} teamId 
     * @param {number} repositoryId 
     * @param {string} label 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    addLabelToTeamRaw(requestParameters: WorkspaceApiAddLabelToTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>>;

    /**
     */
    addLabelToTeam(teamId: number, repositoryId: number, label: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo>;

    /**
     * 
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    addRepositoryToMonitorRaw(requestParameters: WorkspaceApiAddRepositoryToMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    addRepositoryToMonitor(owner: string, name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} teamId 
     * @param {string} repositoryOwner 
     * @param {string} repositoryName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    addRepositoryToTeamRaw(requestParameters: WorkspaceApiAddRepositoryToTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>>;

    /**
     */
    addRepositoryToTeam(teamId: number, repositoryOwner: string, repositoryName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo>;

    /**
     * 
     * @param {string} login 
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    addTeamToUserRaw(requestParameters: WorkspaceApiAddTeamToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>>;

    /**
     */
    addTeamToUser(login: string, teamId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    automaticallyAssignTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    automaticallyAssignTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {TeamInfo} TeamInfo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    createTeamRaw(requestParameters: WorkspaceApiCreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>>;

    /**
     */
    createTeam(TeamInfo: TeamInfo, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo>;

    /**
     * 
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteTeamRaw(requestParameters: WorkspaceApiDeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>>;

    /**
     */
    deleteTeam(teamId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    getRepositoriesToMonitorRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     */
    getRepositoriesToMonitor(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    getUsersWithTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserTeams>>>;

    /**
     */
    getUsersWithTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserTeams>>;

    /**
     * 
     * @param {number} teamId 
     * @param {number} labelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    removeLabelFromTeamRaw(requestParameters: WorkspaceApiRemoveLabelFromTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>>;

    /**
     */
    removeLabelFromTeam(teamId: number, labelId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo>;

    /**
     * 
     * @param {number} teamId 
     * @param {string} repositoryOwner 
     * @param {string} repositoryName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    removeRepositoryFromTeamRaw(requestParameters: WorkspaceApiRemoveRepositoryFromTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>>;

    /**
     */
    removeRepositoryFromTeam(teamId: number, repositoryOwner: string, repositoryName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo>;

    /**
     * 
     * @param {string} owner 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    removeRepositoryToMonitorRaw(requestParameters: WorkspaceApiRemoveRepositoryToMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    removeRepositoryToMonitor(owner: string, name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} login 
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    removeUserFromTeamRaw(requestParameters: WorkspaceApiRemoveUserFromTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>>;

    /**
     */
    removeUserFromTeam(login: string, teamId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    resetAndRecalculateLeaguesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    resetAndRecalculateLeagues(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class WorkspaceApi extends runtime.BaseAPI implements WorkspaceApiInterface {

    /**
     */
    async addLabelToTeamRaw(requestParameters: WorkspaceApiAddLabelToTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling addLabelToTeam().'
            );
        }

        if (requestParameters['repositoryId'] == null) {
            throw new runtime.RequiredError(
                'repositoryId',
                'Required parameter "repositoryId" was null or undefined when calling addLabelToTeam().'
            );
        }

        if (requestParameters['label'] == null) {
            throw new runtime.RequiredError(
                'label',
                'Required parameter "label" was null or undefined when calling addLabelToTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/team/{teamId}/label/{repositoryId}/{label}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))).replace(`{${"repositoryId"}}`, encodeURIComponent(String(requestParameters['repositoryId']))).replace(`{${"label"}}`, encodeURIComponent(String(requestParameters['label']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamInfoFromJSON(jsonValue));
    }

    /**
     */
    async addLabelToTeam(teamId: number, repositoryId: number, label: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo> {
        const response = await this.addLabelToTeamRaw({ teamId: teamId, repositoryId: repositoryId, label: label }, initOverrides);
        return await response.value();
    }

    /**
     */
    async addRepositoryToMonitorRaw(requestParameters: WorkspaceApiAddRepositoryToMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling addRepositoryToMonitor().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addRepositoryToMonitor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/repositories/{owner}/{name}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addRepositoryToMonitor(owner: string, name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addRepositoryToMonitorRaw({ owner: owner, name: name }, initOverrides);
    }

    /**
     */
    async addRepositoryToTeamRaw(requestParameters: WorkspaceApiAddRepositoryToTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling addRepositoryToTeam().'
            );
        }

        if (requestParameters['repositoryOwner'] == null) {
            throw new runtime.RequiredError(
                'repositoryOwner',
                'Required parameter "repositoryOwner" was null or undefined when calling addRepositoryToTeam().'
            );
        }

        if (requestParameters['repositoryName'] == null) {
            throw new runtime.RequiredError(
                'repositoryName',
                'Required parameter "repositoryName" was null or undefined when calling addRepositoryToTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/team/{teamId}/repository/{repositoryOwner}/{repositoryName}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))).replace(`{${"repositoryOwner"}}`, encodeURIComponent(String(requestParameters['repositoryOwner']))).replace(`{${"repositoryName"}}`, encodeURIComponent(String(requestParameters['repositoryName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamInfoFromJSON(jsonValue));
    }

    /**
     */
    async addRepositoryToTeam(teamId: number, repositoryOwner: string, repositoryName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo> {
        const response = await this.addRepositoryToTeamRaw({ teamId: teamId, repositoryOwner: repositoryOwner, repositoryName: repositoryName }, initOverrides);
        return await response.value();
    }

    /**
     */
    async addTeamToUserRaw(requestParameters: WorkspaceApiAddTeamToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling addTeamToUser().'
            );
        }

        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling addTeamToUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/user/{login}/team/{teamId}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     */
    async addTeamToUser(login: string, teamId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.addTeamToUserRaw({ login: login, teamId: teamId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async automaticallyAssignTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/teams/autoassign`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async automaticallyAssignTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.automaticallyAssignTeamsRaw(initOverrides);
    }

    /**
     */
    async createTeamRaw(requestParameters: WorkspaceApiCreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>> {
        if (requestParameters['TeamInfo'] == null) {
            throw new runtime.RequiredError(
                'TeamInfo',
                'Required parameter "TeamInfo" was null or undefined when calling createTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/teams`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TeamInfoToJSON(requestParameters['TeamInfo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamInfoFromJSON(jsonValue));
    }

    /**
     */
    async createTeam(TeamInfo: TeamInfo, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo> {
        const response = await this.createTeamRaw({ TeamInfo: TeamInfo }, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTeamRaw(requestParameters: WorkspaceApiDeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling deleteTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/team/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamInfoFromJSON(jsonValue));
    }

    /**
     */
    async deleteTeam(teamId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo> {
        const response = await this.deleteTeamRaw({ teamId: teamId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRepositoriesToMonitorRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/repositories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getRepositoriesToMonitor(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getRepositoriesToMonitorRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getUsersWithTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserTeams>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserTeamsFromJSON));
    }

    /**
     */
    async getUsersWithTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserTeams>> {
        const response = await this.getUsersWithTeamsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async removeLabelFromTeamRaw(requestParameters: WorkspaceApiRemoveLabelFromTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling removeLabelFromTeam().'
            );
        }

        if (requestParameters['labelId'] == null) {
            throw new runtime.RequiredError(
                'labelId',
                'Required parameter "labelId" was null or undefined when calling removeLabelFromTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/team/{teamId}/label/{labelId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))).replace(`{${"labelId"}}`, encodeURIComponent(String(requestParameters['labelId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamInfoFromJSON(jsonValue));
    }

    /**
     */
    async removeLabelFromTeam(teamId: number, labelId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo> {
        const response = await this.removeLabelFromTeamRaw({ teamId: teamId, labelId: labelId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeRepositoryFromTeamRaw(requestParameters: WorkspaceApiRemoveRepositoryFromTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling removeRepositoryFromTeam().'
            );
        }

        if (requestParameters['repositoryOwner'] == null) {
            throw new runtime.RequiredError(
                'repositoryOwner',
                'Required parameter "repositoryOwner" was null or undefined when calling removeRepositoryFromTeam().'
            );
        }

        if (requestParameters['repositoryName'] == null) {
            throw new runtime.RequiredError(
                'repositoryName',
                'Required parameter "repositoryName" was null or undefined when calling removeRepositoryFromTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/team/{teamId}/repository/{repositoryOwner}/{repositoryName}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))).replace(`{${"repositoryOwner"}}`, encodeURIComponent(String(requestParameters['repositoryOwner']))).replace(`{${"repositoryName"}}`, encodeURIComponent(String(requestParameters['repositoryName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamInfoFromJSON(jsonValue));
    }

    /**
     */
    async removeRepositoryFromTeam(teamId: number, repositoryOwner: string, repositoryName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo> {
        const response = await this.removeRepositoryFromTeamRaw({ teamId: teamId, repositoryOwner: repositoryOwner, repositoryName: repositoryName }, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeRepositoryToMonitorRaw(requestParameters: WorkspaceApiRemoveRepositoryToMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling removeRepositoryToMonitor().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removeRepositoryToMonitor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/repositories/{owner}/{name}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeRepositoryToMonitor(owner: string, name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeRepositoryToMonitorRaw({ owner: owner, name: name }, initOverrides);
    }

    /**
     */
    async removeUserFromTeamRaw(requestParameters: WorkspaceApiRemoveUserFromTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling removeUserFromTeam().'
            );
        }

        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling removeUserFromTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/user/{login}/team/{teamId}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     */
    async removeUserFromTeam(login: string, teamId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.removeUserFromTeamRaw({ login: login, teamId: teamId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async resetAndRecalculateLeaguesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/league/reset`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resetAndRecalculateLeagues(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetAndRecalculateLeaguesRaw(initOverrides);
    }

}
