// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Activity,
  BadPracticeFeedback,
  PullRequestBadPractice,
} from '../models/index.js';
import {
    ActivityFromJSON,
    ActivityToJSON,
    BadPracticeFeedbackFromJSON,
    BadPracticeFeedbackToJSON,
    PullRequestBadPracticeFromJSON,
    PullRequestBadPracticeToJSON,
} from '../models/index.js';

export interface ActivityApiDetectBadPracticesByUserRequest {
    login: string;
}

export interface ActivityApiDetectBadPracticesForPullRequestRequest {
    pullRequestId: number;
}

export interface ActivityApiGetActivityByUserRequest {
    login: string;
}

export interface ActivityApiProvideFeedbackForBadPracticeRequest {
    badPracticeId: number;
    BadPracticeFeedback: BadPracticeFeedback;
}

export interface ActivityApiResolveBadPracticeRequest {
    badPracticeId: number;
    state: ResolveBadPracticeStateEnum;
}

/**
 * ActivityApi - interface
 * 
 * @export
 * @interface ActivityApiInterface
 */
export interface ActivityApiInterface {
    /**
     * 
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    detectBadPracticesByUserRaw(requestParameters: ActivityApiDetectBadPracticesByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PullRequestBadPractice>>>;

    /**
     */
    detectBadPracticesByUser(login: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PullRequestBadPractice>>;

    /**
     * 
     * @param {number} pullRequestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    detectBadPracticesForPullRequestRaw(requestParameters: ActivityApiDetectBadPracticesForPullRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PullRequestBadPractice>>>;

    /**
     */
    detectBadPracticesForPullRequest(pullRequestId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PullRequestBadPractice>>;

    /**
     * 
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    getActivityByUserRaw(requestParameters: ActivityApiGetActivityByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>>;

    /**
     */
    getActivityByUser(login: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity>;

    /**
     * 
     * @param {number} badPracticeId 
     * @param {BadPracticeFeedback} BadPracticeFeedback 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    provideFeedbackForBadPracticeRaw(requestParameters: ActivityApiProvideFeedbackForBadPracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    provideFeedbackForBadPractice(badPracticeId: number, BadPracticeFeedback: BadPracticeFeedback, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} badPracticeId 
     * @param {'GOOD_PRACTICE' | 'FIXED' | 'CRITICAL_ISSUE' | 'NORMAL_ISSUE' | 'MINOR_ISSUE' | 'WONT_FIX' | 'WRONG'} state 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    resolveBadPracticeRaw(requestParameters: ActivityApiResolveBadPracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    resolveBadPractice(badPracticeId: number, state: ResolveBadPracticeStateEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ActivityApi extends runtime.BaseAPI implements ActivityApiInterface {

    /**
     */
    async detectBadPracticesByUserRaw(requestParameters: ActivityApiDetectBadPracticesByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PullRequestBadPractice>>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling detectBadPracticesByUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activity/user/{login}/badpractices`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PullRequestBadPracticeFromJSON));
    }

    /**
     */
    async detectBadPracticesByUser(login: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PullRequestBadPractice>> {
        const response = await this.detectBadPracticesByUserRaw({ login: login }, initOverrides);
        return await response.value();
    }

    /**
     */
    async detectBadPracticesForPullRequestRaw(requestParameters: ActivityApiDetectBadPracticesForPullRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PullRequestBadPractice>>> {
        if (requestParameters['pullRequestId'] == null) {
            throw new runtime.RequiredError(
                'pullRequestId',
                'Required parameter "pullRequestId" was null or undefined when calling detectBadPracticesForPullRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activity/pullrequest/{pullRequestId}/badpractices`.replace(`{${"pullRequestId"}}`, encodeURIComponent(String(requestParameters['pullRequestId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PullRequestBadPracticeFromJSON));
    }

    /**
     */
    async detectBadPracticesForPullRequest(pullRequestId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PullRequestBadPractice>> {
        const response = await this.detectBadPracticesForPullRequestRaw({ pullRequestId: pullRequestId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getActivityByUserRaw(requestParameters: ActivityApiGetActivityByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling getActivityByUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activity/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     */
    async getActivityByUser(login: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity> {
        const response = await this.getActivityByUserRaw({ login: login }, initOverrides);
        return await response.value();
    }

    /**
     */
    async provideFeedbackForBadPracticeRaw(requestParameters: ActivityApiProvideFeedbackForBadPracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['badPracticeId'] == null) {
            throw new runtime.RequiredError(
                'badPracticeId',
                'Required parameter "badPracticeId" was null or undefined when calling provideFeedbackForBadPractice().'
            );
        }

        if (requestParameters['BadPracticeFeedback'] == null) {
            throw new runtime.RequiredError(
                'BadPracticeFeedback',
                'Required parameter "BadPracticeFeedback" was null or undefined when calling provideFeedbackForBadPractice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/activity/badpractice/{badPracticeId}/feedback`.replace(`{${"badPracticeId"}}`, encodeURIComponent(String(requestParameters['badPracticeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BadPracticeFeedbackToJSON(requestParameters['BadPracticeFeedback']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async provideFeedbackForBadPractice(badPracticeId: number, BadPracticeFeedback: BadPracticeFeedback, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.provideFeedbackForBadPracticeRaw({ badPracticeId: badPracticeId, BadPracticeFeedback: BadPracticeFeedback }, initOverrides);
    }

    /**
     */
    async resolveBadPracticeRaw(requestParameters: ActivityApiResolveBadPracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['badPracticeId'] == null) {
            throw new runtime.RequiredError(
                'badPracticeId',
                'Required parameter "badPracticeId" was null or undefined when calling resolveBadPractice().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling resolveBadPractice().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activity/badpractice/{badPracticeId}/resolve`.replace(`{${"badPracticeId"}}`, encodeURIComponent(String(requestParameters['badPracticeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resolveBadPractice(badPracticeId: number, state: ResolveBadPracticeStateEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resolveBadPracticeRaw({ badPracticeId: badPracticeId, state: state }, initOverrides);
    }

}

/**
 * @export
 */
export const ResolveBadPracticeStateEnum = {
    GOOD_PRACTICE: 'GOOD_PRACTICE',
    FIXED: 'FIXED',
    CRITICAL_ISSUE: 'CRITICAL_ISSUE',
    NORMAL_ISSUE: 'NORMAL_ISSUE',
    MINOR_ISSUE: 'MINOR_ISSUE',
    WONT_FIX: 'WONT_FIX',
    WRONG: 'WRONG',
    unknown_default_open_api: '11184809'
} as const;
export type ResolveBadPracticeStateEnum = typeof ResolveBadPracticeStateEnum[keyof typeof ResolveBadPracticeStateEnum];
