/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Contributor,
  MetaData,
} from '../models/index.js';
import {
    ContributorFromJSON,
    ContributorToJSON,
    MetaDataFromJSON,
    MetaDataToJSON,
} from '../models/index.js';

/**
 * MetaApi - interface
 * 
 * @export
 * @interface MetaApiInterface
 */
export interface MetaApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    getContributorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Contributor>>>;

    /**
     */
    getContributors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Contributor>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    getMetaDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaData>>;

    /**
     */
    getMetaData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaData>;

}

/**
 * 
 */
export class MetaApi extends runtime.BaseAPI implements MetaApiInterface {

    /**
     */
    async getContributorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Contributor>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meta/contributors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContributorFromJSON));
    }

    /**
     */
    async getContributors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Contributor>> {
        const response = await this.getContributorsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getMetaDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meta`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaDataFromJSON(jsonValue));
    }

    /**
     */
    async getMetaData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaData> {
        const response = await this.getMetaDataRaw(initOverrides);
        return await response.value();
    }

}
