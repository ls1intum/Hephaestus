/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  UserProfile,
  UserSettings,
} from '../models/index.js';
import {
    UserProfileFromJSON,
    UserProfileToJSON,
    UserSettingsFromJSON,
    UserSettingsToJSON,
} from '../models/index.js';

export interface UserApiGetUserProfileRequest {
    login: string;
}

export interface UserApiUpdateUserSettingsRequest {
    UserSettings: UserSettings;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    deleteUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserProfileRaw(requestParameters: UserApiGetUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfile>>;

    /**
     */
    getUserProfile(login: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfile>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettings>>;

    /**
     */
    getUserSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettings>;

    /**
     * 
     * @param {UserSettings} UserSettings 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateUserSettingsRaw(requestParameters: UserApiUpdateUserSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettings>>;

    /**
     */
    updateUserSettings(UserSettings: UserSettings, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettings>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     */
    async deleteUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(initOverrides);
    }

    /**
     */
    async getUserProfileRaw(requestParameters: UserApiGetUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling getUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{login}/profile`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     */
    async getUserProfile(login: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfile> {
        const response = await this.getUserProfileRaw({ login: login }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSettingsFromJSON(jsonValue));
    }

    /**
     */
    async getUserSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettings> {
        const response = await this.getUserSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserSettingsRaw(requestParameters: UserApiUpdateUserSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettings>> {
        if (requestParameters['UserSettings'] == null) {
            throw new runtime.RequiredError(
                'UserSettings',
                'Required parameter "UserSettings" was null or undefined when calling updateUserSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSettingsToJSON(requestParameters['UserSettings']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSettingsFromJSON(jsonValue));
    }

    /**
     */
    async updateUserSettings(UserSettings: UserSettings, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettings> {
        const response = await this.updateUserSettingsRaw({ UserSettings: UserSettings }, initOverrides);
        return await response.value();
    }

}
