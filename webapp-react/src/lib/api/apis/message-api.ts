// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Message,
} from '../models/index.js';
import {
    MessageFromJSON,
    MessageToJSON,
} from '../models/index.js';

export interface MessageApiCreateMessageRequest {
    sessionId: number;
    body: string;
}

export interface MessageApiGetMessagesRequest {
    sessionId: number;
}

/**
 * MessageApi - interface
 * 
 * @export
 * @interface MessageApiInterface
 */
export interface MessageApiInterface {
    /**
     * 
     * @param {number} sessionId 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApiInterface
     */
    createMessageRaw(requestParameters: MessageApiCreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>>;

    /**
     */
    createMessage(sessionId: number, body: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message>;

    /**
     * 
     * @param {number} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApiInterface
     */
    getMessagesRaw(requestParameters: MessageApiGetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Message>>>;

    /**
     */
    getMessages(sessionId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Message>>;

}

/**
 * 
 */
export class MessageApi extends runtime.BaseAPI implements MessageApiInterface {

    /**
     */
    async createMessageRaw(requestParameters: MessageApiCreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling createMessage().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mentor/sessions/{sessionId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters['sessionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     */
    async createMessage(sessionId: number, body: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.createMessageRaw({ sessionId: sessionId, body: body }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMessagesRaw(requestParameters: MessageApiGetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Message>>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling getMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mentor/sessions/{sessionId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters['sessionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageFromJSON));
    }

    /**
     */
    async getMessages(sessionId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Message>> {
        const response = await this.getMessagesRaw({ sessionId: sessionId }, initOverrides);
        return await response.value();
    }

}
