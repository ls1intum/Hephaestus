// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  TeamInfo,
} from '../models/index.js';
import {
    TeamInfoFromJSON,
    TeamInfoToJSON,
} from '../models/index.js';

export interface TeamApiHideTeamRequest {
    id: number;
    body: boolean;
}

/**
 * TeamApi - interface
 * 
 * @export
 * @interface TeamApiInterface
 */
export interface TeamApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    getTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamInfo>>>;

    /**
     */
    getTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamInfo>>;

    /**
     * 
     * @param {number} id 
     * @param {boolean} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    hideTeamRaw(requestParameters: TeamApiHideTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>>;

    /**
     */
    hideTeam(id: number, body: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo>;

}

/**
 * 
 */
export class TeamApi extends runtime.BaseAPI implements TeamApiInterface {

    /**
     */
    async getTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/team/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamInfoFromJSON));
    }

    /**
     */
    async getTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamInfo>> {
        const response = await this.getTeamsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async hideTeamRaw(requestParameters: TeamApiHideTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamInfo>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling hideTeam().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling hideTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/team/{id}/hide`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamInfoFromJSON(jsonValue));
    }

    /**
     */
    async hideTeam(id: number, body: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamInfo> {
        const response = await this.hideTeamRaw({ id: id, body: body }, initOverrides);
        return await response.value();
    }

}
