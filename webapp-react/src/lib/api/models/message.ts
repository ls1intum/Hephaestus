/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    sentAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    sender: MessageSenderEnum;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    content: string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    sessionId: number;
}


/**
 * @export
 */
export const MessageSenderEnum = {
    MENTOR: 'MENTOR',
    USER: 'USER',
    unknown_default_open_api: '11184809'
} as const;
export type MessageSenderEnum = typeof MessageSenderEnum[keyof typeof MessageSenderEnum];


/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): value is Message {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('sentAt' in value) || value['sentAt'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('sessionId' in value) || value['sessionId'] === undefined) return false;
    return true;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sentAt': (new Date(json['sentAt'])),
        'sender': json['sender'],
        'content': json['content'],
        'sessionId': json['sessionId'],
    };
}

export function MessageToJSON(value?: Message | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'sentAt': ((value['sentAt']).toISOString()),
        'sender': value['sender'],
        'content': value['content'],
        'sessionId': value['sessionId'],
    };
}

