// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { TeamInfo } from './team-info.js';
import {
    TeamInfoFromJSON,
    TeamInfoFromJSONTyped,
    TeamInfoToJSON,
} from './team-info.js';

/**
 * 
 * @export
 * @interface UserTeams
 */
export interface UserTeams {
    /**
     * 
     * @type {number}
     * @memberof UserTeams
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserTeams
     */
    login: string;
    /**
     * 
     * @type {string}
     * @memberof UserTeams
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserTeams
     */
    url: string;
    /**
     * 
     * @type {Set<TeamInfo>}
     * @memberof UserTeams
     */
    teams: Set<TeamInfo>;
}

/**
 * Check if a given object implements the UserTeams interface.
 */
export function instanceOfUserTeams(value: object): value is UserTeams {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('login' in value) || value['login'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('teams' in value) || value['teams'] === undefined) return false;
    return true;
}

export function UserTeamsFromJSON(json: any): UserTeams {
    return UserTeamsFromJSONTyped(json, false);
}

export function UserTeamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserTeams {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'login': json['login'],
        'name': json['name'],
        'url': json['url'],
        'teams': (new Set((json['teams'] as Array<any>).map(TeamInfoFromJSON))),
    };
}

export function UserTeamsToJSON(value?: UserTeams | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'login': value['login'],
        'name': value['name'],
        'url': value['url'],
        'teams': (Array.from(value['teams'] as Set<any>).map(TeamInfoToJSON)),
    };
}

