/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { LabelInfo } from './label-info.js';
import {
    LabelInfoFromJSON,
    LabelInfoFromJSONTyped,
    LabelInfoToJSON,
} from './label-info.js';
import type { RepositoryInfo } from './repository-info.js';
import {
    RepositoryInfoFromJSON,
    RepositoryInfoFromJSONTyped,
    RepositoryInfoToJSON,
} from './repository-info.js';
import type { UserInfo } from './user-info.js';
import {
    UserInfoFromJSON,
    UserInfoFromJSONTyped,
    UserInfoToJSON,
} from './user-info.js';

/**
 * 
 * @export
 * @interface TeamInfo
 */
export interface TeamInfo {
    /**
     * 
     * @type {number}
     * @memberof TeamInfo
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof TeamInfo
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeamInfo
     */
    color: string;
    /**
     * 
     * @type {Array<RepositoryInfo>}
     * @memberof TeamInfo
     */
    repositories: Array<RepositoryInfo>;
    /**
     * 
     * @type {Array<LabelInfo>}
     * @memberof TeamInfo
     */
    labels: Array<LabelInfo>;
    /**
     * 
     * @type {Array<UserInfo>}
     * @memberof TeamInfo
     */
    members: Array<UserInfo>;
    /**
     * 
     * @type {boolean}
     * @memberof TeamInfo
     */
    hidden: boolean;
}

/**
 * Check if a given object implements the TeamInfo interface.
 */
export function instanceOfTeamInfo(value: object): value is TeamInfo {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('color' in value) || value['color'] === undefined) return false;
    if (!('repositories' in value) || value['repositories'] === undefined) return false;
    if (!('labels' in value) || value['labels'] === undefined) return false;
    if (!('members' in value) || value['members'] === undefined) return false;
    if (!('hidden' in value) || value['hidden'] === undefined) return false;
    return true;
}

export function TeamInfoFromJSON(json: any): TeamInfo {
    return TeamInfoFromJSONTyped(json, false);
}

export function TeamInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'color': json['color'],
        'repositories': ((json['repositories'] as Array<any>).map(RepositoryInfoFromJSON)),
        'labels': ((json['labels'] as Array<any>).map(LabelInfoFromJSON)),
        'members': ((json['members'] as Array<any>).map(UserInfoFromJSON)),
        'hidden': json['hidden'],
    };
}

export function TeamInfoToJSON(value?: TeamInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'color': value['color'],
        'repositories': ((value['repositories'] as Array<any>).map(RepositoryInfoToJSON)),
        'labels': ((value['labels'] as Array<any>).map(LabelInfoToJSON)),
        'members': ((value['members'] as Array<any>).map(UserInfoToJSON)),
        'hidden': value['hidden'],
    };
}

