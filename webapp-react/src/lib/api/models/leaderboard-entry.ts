/* tslint:disable */
/* eslint-disable */
/**
 * Hephaestus API
 * API documentation for the Hephaestus application server.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: felixtj.dietrich@tum.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { PullRequestInfo } from './pull-request-info.js';
import {
    PullRequestInfoFromJSON,
    PullRequestInfoFromJSONTyped,
    PullRequestInfoToJSON,
} from './pull-request-info.js';
import type { UserInfo } from './user-info.js';
import {
    UserInfoFromJSON,
    UserInfoFromJSONTyped,
    UserInfoToJSON,
} from './user-info.js';

/**
 * 
 * @export
 * @interface LeaderboardEntry
 */
export interface LeaderboardEntry {
    /**
     * 
     * @type {number}
     * @memberof LeaderboardEntry
     */
    rank: number;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardEntry
     */
    score: number;
    /**
     * 
     * @type {UserInfo}
     * @memberof LeaderboardEntry
     */
    user: UserInfo;
    /**
     * 
     * @type {Array<PullRequestInfo>}
     * @memberof LeaderboardEntry
     */
    reviewedPullRequests: Array<PullRequestInfo>;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardEntry
     */
    numberOfReviewedPRs: number;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardEntry
     */
    numberOfApprovals: number;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardEntry
     */
    numberOfChangeRequests: number;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardEntry
     */
    numberOfComments: number;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardEntry
     */
    numberOfUnknowns: number;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardEntry
     */
    numberOfCodeComments: number;
}

/**
 * Check if a given object implements the LeaderboardEntry interface.
 */
export function instanceOfLeaderboardEntry(value: object): value is LeaderboardEntry {
    if (!('rank' in value) || value['rank'] === undefined) return false;
    if (!('score' in value) || value['score'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('reviewedPullRequests' in value) || value['reviewedPullRequests'] === undefined) return false;
    if (!('numberOfReviewedPRs' in value) || value['numberOfReviewedPRs'] === undefined) return false;
    if (!('numberOfApprovals' in value) || value['numberOfApprovals'] === undefined) return false;
    if (!('numberOfChangeRequests' in value) || value['numberOfChangeRequests'] === undefined) return false;
    if (!('numberOfComments' in value) || value['numberOfComments'] === undefined) return false;
    if (!('numberOfUnknowns' in value) || value['numberOfUnknowns'] === undefined) return false;
    if (!('numberOfCodeComments' in value) || value['numberOfCodeComments'] === undefined) return false;
    return true;
}

export function LeaderboardEntryFromJSON(json: any): LeaderboardEntry {
    return LeaderboardEntryFromJSONTyped(json, false);
}

export function LeaderboardEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): LeaderboardEntry {
    if (json == null) {
        return json;
    }
    return {
        
        'rank': json['rank'],
        'score': json['score'],
        'user': UserInfoFromJSON(json['user']),
        'reviewedPullRequests': ((json['reviewedPullRequests'] as Array<any>).map(PullRequestInfoFromJSON)),
        'numberOfReviewedPRs': json['numberOfReviewedPRs'],
        'numberOfApprovals': json['numberOfApprovals'],
        'numberOfChangeRequests': json['numberOfChangeRequests'],
        'numberOfComments': json['numberOfComments'],
        'numberOfUnknowns': json['numberOfUnknowns'],
        'numberOfCodeComments': json['numberOfCodeComments'],
    };
}

export function LeaderboardEntryToJSON(value?: LeaderboardEntry | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'rank': value['rank'],
        'score': value['score'],
        'user': UserInfoToJSON(value['user']),
        'reviewedPullRequests': ((value['reviewedPullRequests'] as Array<any>).map(PullRequestInfoToJSON)),
        'numberOfReviewedPRs': value['numberOfReviewedPRs'],
        'numberOfApprovals': value['numberOfApprovals'],
        'numberOfChangeRequests': value['numberOfChangeRequests'],
        'numberOfComments': value['numberOfComments'],
        'numberOfUnknowns': value['numberOfUnknowns'],
        'numberOfCodeComments': value['numberOfCodeComments'],
    };
}

