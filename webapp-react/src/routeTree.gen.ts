/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as ImprintImport } from './routes/imprint'
import { Route as AboutImport } from './routes/about'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as AuthenticatedTeamsImport } from './routes/_authenticated/teams'
import { Route as AuthenticatedSettingsImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedMentorImport } from './routes/_authenticated/mentor'
import { Route as AuthenticatedWorkspaceIndexImport } from './routes/_authenticated/workspace/index'
import { Route as AuthenticatedWorkspaceUsersImport } from './routes/_authenticated/workspace/users'
import { Route as AuthenticatedWorkspaceTeamsImport } from './routes/_authenticated/workspace/teams'
import { Route as AuthenticatedUserUsernameIndexImport } from './routes/_authenticated/user/$username/index'
import { Route as AuthenticatedUserUsernameActivityImport } from './routes/_authenticated/user/$username/activity'

// Create/Update Routes

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const ImprintRoute = ImprintImport.update({
  id: '/imprint',
  path: '/imprint',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedTeamsRoute = AuthenticatedTeamsImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedSettingsRoute = AuthenticatedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedMentorRoute = AuthenticatedMentorImport.update({
  id: '/mentor',
  path: '/mentor',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedWorkspaceIndexRoute =
  AuthenticatedWorkspaceIndexImport.update({
    id: '/workspace/',
    path: '/workspace/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedWorkspaceUsersRoute =
  AuthenticatedWorkspaceUsersImport.update({
    id: '/workspace/users',
    path: '/workspace/users',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedWorkspaceTeamsRoute =
  AuthenticatedWorkspaceTeamsImport.update({
    id: '/workspace/teams',
    path: '/workspace/teams',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedUserUsernameIndexRoute =
  AuthenticatedUserUsernameIndexImport.update({
    id: '/user/$username/',
    path: '/user/$username/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedUserUsernameActivityRoute =
  AuthenticatedUserUsernameActivityImport.update({
    id: '/user/$username/activity',
    path: '/user/$username/activity',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/imprint': {
      id: '/imprint'
      path: '/imprint'
      fullPath: '/imprint'
      preLoaderRoute: typeof ImprintImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/mentor': {
      id: '/_authenticated/mentor'
      path: '/mentor'
      fullPath: '/mentor'
      preLoaderRoute: typeof AuthenticatedMentorImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/teams': {
      id: '/_authenticated/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof AuthenticatedTeamsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/workspace/teams': {
      id: '/_authenticated/workspace/teams'
      path: '/workspace/teams'
      fullPath: '/workspace/teams'
      preLoaderRoute: typeof AuthenticatedWorkspaceTeamsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/workspace/users': {
      id: '/_authenticated/workspace/users'
      path: '/workspace/users'
      fullPath: '/workspace/users'
      preLoaderRoute: typeof AuthenticatedWorkspaceUsersImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/workspace/': {
      id: '/_authenticated/workspace/'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof AuthenticatedWorkspaceIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/user/$username/activity': {
      id: '/_authenticated/user/$username/activity'
      path: '/user/$username/activity'
      fullPath: '/user/$username/activity'
      preLoaderRoute: typeof AuthenticatedUserUsernameActivityImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/user/$username/': {
      id: '/_authenticated/user/$username/'
      path: '/user/$username'
      fullPath: '/user/$username'
      preLoaderRoute: typeof AuthenticatedUserUsernameIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedMentorRoute: typeof AuthenticatedMentorRoute
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
  AuthenticatedTeamsRoute: typeof AuthenticatedTeamsRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedWorkspaceTeamsRoute: typeof AuthenticatedWorkspaceTeamsRoute
  AuthenticatedWorkspaceUsersRoute: typeof AuthenticatedWorkspaceUsersRoute
  AuthenticatedWorkspaceIndexRoute: typeof AuthenticatedWorkspaceIndexRoute
  AuthenticatedUserUsernameActivityRoute: typeof AuthenticatedUserUsernameActivityRoute
  AuthenticatedUserUsernameIndexRoute: typeof AuthenticatedUserUsernameIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedMentorRoute: AuthenticatedMentorRoute,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
  AuthenticatedTeamsRoute: AuthenticatedTeamsRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedWorkspaceTeamsRoute: AuthenticatedWorkspaceTeamsRoute,
  AuthenticatedWorkspaceUsersRoute: AuthenticatedWorkspaceUsersRoute,
  AuthenticatedWorkspaceIndexRoute: AuthenticatedWorkspaceIndexRoute,
  AuthenticatedUserUsernameActivityRoute:
    AuthenticatedUserUsernameActivityRoute,
  AuthenticatedUserUsernameIndexRoute: AuthenticatedUserUsernameIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/imprint': typeof ImprintRoute
  '/privacy': typeof PrivacyRoute
  '/mentor': typeof AuthenticatedMentorRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/teams': typeof AuthenticatedTeamsRoute
  '/': typeof AuthenticatedIndexRoute
  '/workspace/teams': typeof AuthenticatedWorkspaceTeamsRoute
  '/workspace/users': typeof AuthenticatedWorkspaceUsersRoute
  '/workspace': typeof AuthenticatedWorkspaceIndexRoute
  '/user/$username/activity': typeof AuthenticatedUserUsernameActivityRoute
  '/user/$username': typeof AuthenticatedUserUsernameIndexRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/imprint': typeof ImprintRoute
  '/privacy': typeof PrivacyRoute
  '/mentor': typeof AuthenticatedMentorRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/teams': typeof AuthenticatedTeamsRoute
  '/': typeof AuthenticatedIndexRoute
  '/workspace/teams': typeof AuthenticatedWorkspaceTeamsRoute
  '/workspace/users': typeof AuthenticatedWorkspaceUsersRoute
  '/workspace': typeof AuthenticatedWorkspaceIndexRoute
  '/user/$username/activity': typeof AuthenticatedUserUsernameActivityRoute
  '/user/$username': typeof AuthenticatedUserUsernameIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/imprint': typeof ImprintRoute
  '/privacy': typeof PrivacyRoute
  '/_authenticated/mentor': typeof AuthenticatedMentorRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
  '/_authenticated/teams': typeof AuthenticatedTeamsRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/workspace/teams': typeof AuthenticatedWorkspaceTeamsRoute
  '/_authenticated/workspace/users': typeof AuthenticatedWorkspaceUsersRoute
  '/_authenticated/workspace/': typeof AuthenticatedWorkspaceIndexRoute
  '/_authenticated/user/$username/activity': typeof AuthenticatedUserUsernameActivityRoute
  '/_authenticated/user/$username/': typeof AuthenticatedUserUsernameIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/about'
    | '/imprint'
    | '/privacy'
    | '/mentor'
    | '/settings'
    | '/teams'
    | '/'
    | '/workspace/teams'
    | '/workspace/users'
    | '/workspace'
    | '/user/$username/activity'
    | '/user/$username'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/imprint'
    | '/privacy'
    | '/mentor'
    | '/settings'
    | '/teams'
    | '/'
    | '/workspace/teams'
    | '/workspace/users'
    | '/workspace'
    | '/user/$username/activity'
    | '/user/$username'
  id:
    | '__root__'
    | '/_authenticated'
    | '/about'
    | '/imprint'
    | '/privacy'
    | '/_authenticated/mentor'
    | '/_authenticated/settings'
    | '/_authenticated/teams'
    | '/_authenticated/'
    | '/_authenticated/workspace/teams'
    | '/_authenticated/workspace/users'
    | '/_authenticated/workspace/'
    | '/_authenticated/user/$username/activity'
    | '/_authenticated/user/$username/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AboutRoute: typeof AboutRoute
  ImprintRoute: typeof ImprintRoute
  PrivacyRoute: typeof PrivacyRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AboutRoute: AboutRoute,
  ImprintRoute: ImprintRoute,
  PrivacyRoute: PrivacyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/about",
        "/imprint",
        "/privacy"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/mentor",
        "/_authenticated/settings",
        "/_authenticated/teams",
        "/_authenticated/",
        "/_authenticated/workspace/teams",
        "/_authenticated/workspace/users",
        "/_authenticated/workspace/",
        "/_authenticated/user/$username/activity",
        "/_authenticated/user/$username/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/imprint": {
      "filePath": "imprint.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/_authenticated/mentor": {
      "filePath": "_authenticated/mentor.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/settings": {
      "filePath": "_authenticated/settings.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/teams": {
      "filePath": "_authenticated/teams.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/workspace/teams": {
      "filePath": "_authenticated/workspace/teams.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/workspace/users": {
      "filePath": "_authenticated/workspace/users.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/workspace/": {
      "filePath": "_authenticated/workspace/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/user/$username/activity": {
      "filePath": "_authenticated/user/$username/activity.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/user/$username/": {
      "filePath": "_authenticated/user/$username/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
