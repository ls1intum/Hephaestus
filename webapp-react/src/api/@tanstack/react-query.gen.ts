// This file is auto-generated by @hey-api/openapi-ts

import { type Options, removeUserFromTeam, addTeamToUser, createTeam, automaticallyAssignTeams, resetAndRecalculateLeagues, removeRepositoryFromTeam, addRepositoryToTeam, addLabelToTeam, removeRepositoryToMonitor, addRepositoryToMonitor, getUserSettings, updateUserSettings, hideTeam, getLeaderboard, getUserLeagueStats, detectBadPracticesByUser, detectBadPracticesForPullRequest, resolveBadPractice, provideFeedbackForBadPractice, getUsersWithTeams, getRepositoriesToMonitor, getUserProfile, getTeams, getMetaData, getContributors, getActivityByUser, deleteTeam, removeLabelFromTeam, deleteUser } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { RemoveUserFromTeamData, RemoveUserFromTeamResponse, AddTeamToUserData, AddTeamToUserResponse, CreateTeamData, CreateTeamResponse, AutomaticallyAssignTeamsData, ResetAndRecalculateLeaguesData, RemoveRepositoryFromTeamData, RemoveRepositoryFromTeamResponse, AddRepositoryToTeamData, AddRepositoryToTeamResponse, AddLabelToTeamData, AddLabelToTeamResponse, RemoveRepositoryToMonitorData, AddRepositoryToMonitorData, GetUserSettingsData, UpdateUserSettingsData, UpdateUserSettingsResponse, HideTeamData, HideTeamResponse, GetLeaderboardData, GetLeaderboardResponse, GetUserLeagueStatsData, GetUserLeagueStatsResponse, DetectBadPracticesByUserData, DetectBadPracticesForPullRequestData, ResolveBadPracticeData, ProvideFeedbackForBadPracticeData, GetUsersWithTeamsData, GetRepositoriesToMonitorData, GetUserProfileData, GetTeamsData, GetMetaDataData, GetContributorsData, GetActivityByUserData, DeleteTeamData, DeleteTeamResponse, RemoveLabelFromTeamData, RemoveLabelFromTeamResponse, DeleteUserData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export const removeUserFromTeamMutation = (options?: Partial<Options<RemoveUserFromTeamData>>): UseMutationOptions<RemoveUserFromTeamResponse, DefaultError, Options<RemoveUserFromTeamData>> => {
    const mutationOptions: UseMutationOptions<RemoveUserFromTeamResponse, DefaultError, Options<RemoveUserFromTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeUserFromTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addTeamToUserMutation = (options?: Partial<Options<AddTeamToUserData>>): UseMutationOptions<AddTeamToUserResponse, DefaultError, Options<AddTeamToUserData>> => {
    const mutationOptions: UseMutationOptions<AddTeamToUserResponse, DefaultError, Options<AddTeamToUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addTeamToUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createTeamMutation = (options?: Partial<Options<CreateTeamData>>): UseMutationOptions<CreateTeamResponse, DefaultError, Options<CreateTeamData>> => {
    const mutationOptions: UseMutationOptions<CreateTeamResponse, DefaultError, Options<CreateTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const automaticallyAssignTeamsMutation = (options?: Partial<Options<AutomaticallyAssignTeamsData>>): UseMutationOptions<unknown, DefaultError, Options<AutomaticallyAssignTeamsData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<AutomaticallyAssignTeamsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await automaticallyAssignTeams({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resetAndRecalculateLeaguesMutation = (options?: Partial<Options<ResetAndRecalculateLeaguesData>>): UseMutationOptions<unknown, DefaultError, Options<ResetAndRecalculateLeaguesData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ResetAndRecalculateLeaguesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resetAndRecalculateLeagues({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const removeRepositoryFromTeamMutation = (options?: Partial<Options<RemoveRepositoryFromTeamData>>): UseMutationOptions<RemoveRepositoryFromTeamResponse, DefaultError, Options<RemoveRepositoryFromTeamData>> => {
    const mutationOptions: UseMutationOptions<RemoveRepositoryFromTeamResponse, DefaultError, Options<RemoveRepositoryFromTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeRepositoryFromTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const addRepositoryToTeamQueryKey = (options: Options<AddRepositoryToTeamData>) => createQueryKey('addRepositoryToTeam', options);

export const addRepositoryToTeamOptions = (options: Options<AddRepositoryToTeamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addRepositoryToTeam({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addRepositoryToTeamQueryKey(options)
    });
};

export const addRepositoryToTeamMutation = (options?: Partial<Options<AddRepositoryToTeamData>>): UseMutationOptions<AddRepositoryToTeamResponse, DefaultError, Options<AddRepositoryToTeamData>> => {
    const mutationOptions: UseMutationOptions<AddRepositoryToTeamResponse, DefaultError, Options<AddRepositoryToTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addRepositoryToTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addLabelToTeamQueryKey = (options: Options<AddLabelToTeamData>) => createQueryKey('addLabelToTeam', options);

export const addLabelToTeamOptions = (options: Options<AddLabelToTeamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addLabelToTeam({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addLabelToTeamQueryKey(options)
    });
};

export const addLabelToTeamMutation = (options?: Partial<Options<AddLabelToTeamData>>): UseMutationOptions<AddLabelToTeamResponse, DefaultError, Options<AddLabelToTeamData>> => {
    const mutationOptions: UseMutationOptions<AddLabelToTeamResponse, DefaultError, Options<AddLabelToTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addLabelToTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const removeRepositoryToMonitorMutation = (options?: Partial<Options<RemoveRepositoryToMonitorData>>): UseMutationOptions<unknown, DefaultError, Options<RemoveRepositoryToMonitorData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<RemoveRepositoryToMonitorData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeRepositoryToMonitor({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addRepositoryToMonitorQueryKey = (options: Options<AddRepositoryToMonitorData>) => createQueryKey('addRepositoryToMonitor', options);

export const addRepositoryToMonitorOptions = (options: Options<AddRepositoryToMonitorData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addRepositoryToMonitor({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addRepositoryToMonitorQueryKey(options)
    });
};

export const addRepositoryToMonitorMutation = (options?: Partial<Options<AddRepositoryToMonitorData>>): UseMutationOptions<unknown, DefaultError, Options<AddRepositoryToMonitorData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<AddRepositoryToMonitorData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addRepositoryToMonitor({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserSettingsQueryKey = (options?: Options<GetUserSettingsData>) => createQueryKey('getUserSettings', options);

export const getUserSettingsOptions = (options?: Options<GetUserSettingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserSettings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserSettingsQueryKey(options)
    });
};

export const updateUserSettingsQueryKey = (options: Options<UpdateUserSettingsData>) => createQueryKey('updateUserSettings', options);

export const updateUserSettingsOptions = (options: Options<UpdateUserSettingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await updateUserSettings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: updateUserSettingsQueryKey(options)
    });
};

export const updateUserSettingsMutation = (options?: Partial<Options<UpdateUserSettingsData>>): UseMutationOptions<UpdateUserSettingsResponse, DefaultError, Options<UpdateUserSettingsData>> => {
    const mutationOptions: UseMutationOptions<UpdateUserSettingsResponse, DefaultError, Options<UpdateUserSettingsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateUserSettings({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const hideTeamQueryKey = (options: Options<HideTeamData>) => createQueryKey('hideTeam', options);

export const hideTeamOptions = (options: Options<HideTeamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hideTeam({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: hideTeamQueryKey(options)
    });
};

export const hideTeamMutation = (options?: Partial<Options<HideTeamData>>): UseMutationOptions<HideTeamResponse, DefaultError, Options<HideTeamData>> => {
    const mutationOptions: UseMutationOptions<HideTeamResponse, DefaultError, Options<HideTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await hideTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLeaderboardQueryKey = (options: Options<GetLeaderboardData>) => createQueryKey('getLeaderboard', options);

export const getLeaderboardOptions = (options: Options<GetLeaderboardData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLeaderboard({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLeaderboardQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getLeaderboardInfiniteQueryKey = (options: Options<GetLeaderboardData>): QueryKey<Options<GetLeaderboardData>> => createQueryKey('getLeaderboard', options, true);

export const getLeaderboardInfiniteOptions = (options: Options<GetLeaderboardData>) => {
    return infiniteQueryOptions<GetLeaderboardResponse, DefaultError, InfiniteData<GetLeaderboardResponse>, QueryKey<Options<GetLeaderboardData>>, Date | Pick<QueryKey<Options<GetLeaderboardData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetLeaderboardData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    after: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getLeaderboard({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLeaderboardInfiniteQueryKey(options)
    });
};

export const getUserLeagueStatsQueryKey = (options: Options<GetUserLeagueStatsData>) => createQueryKey('getUserLeagueStats', options);

export const getUserLeagueStatsOptions = (options: Options<GetUserLeagueStatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserLeagueStats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserLeagueStatsQueryKey(options)
    });
};

export const getUserLeagueStatsMutation = (options?: Partial<Options<GetUserLeagueStatsData>>): UseMutationOptions<GetUserLeagueStatsResponse, DefaultError, Options<GetUserLeagueStatsData>> => {
    const mutationOptions: UseMutationOptions<GetUserLeagueStatsResponse, DefaultError, Options<GetUserLeagueStatsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getUserLeagueStats({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const detectBadPracticesByUserQueryKey = (options: Options<DetectBadPracticesByUserData>) => createQueryKey('detectBadPracticesByUser', options);

export const detectBadPracticesByUserOptions = (options: Options<DetectBadPracticesByUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await detectBadPracticesByUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: detectBadPracticesByUserQueryKey(options)
    });
};

export const detectBadPracticesByUserMutation = (options?: Partial<Options<DetectBadPracticesByUserData>>): UseMutationOptions<unknown, DefaultError, Options<DetectBadPracticesByUserData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DetectBadPracticesByUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await detectBadPracticesByUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const detectBadPracticesForPullRequestQueryKey = (options: Options<DetectBadPracticesForPullRequestData>) => createQueryKey('detectBadPracticesForPullRequest', options);

export const detectBadPracticesForPullRequestOptions = (options: Options<DetectBadPracticesForPullRequestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await detectBadPracticesForPullRequest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: detectBadPracticesForPullRequestQueryKey(options)
    });
};

export const detectBadPracticesForPullRequestMutation = (options?: Partial<Options<DetectBadPracticesForPullRequestData>>): UseMutationOptions<unknown, DefaultError, Options<DetectBadPracticesForPullRequestData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DetectBadPracticesForPullRequestData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await detectBadPracticesForPullRequest({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resolveBadPracticeQueryKey = (options: Options<ResolveBadPracticeData>) => createQueryKey('resolveBadPractice', options);

export const resolveBadPracticeOptions = (options: Options<ResolveBadPracticeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resolveBadPractice({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resolveBadPracticeQueryKey(options)
    });
};

export const resolveBadPracticeMutation = (options?: Partial<Options<ResolveBadPracticeData>>): UseMutationOptions<unknown, DefaultError, Options<ResolveBadPracticeData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ResolveBadPracticeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resolveBadPractice({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const provideFeedbackForBadPracticeQueryKey = (options: Options<ProvideFeedbackForBadPracticeData>) => createQueryKey('provideFeedbackForBadPractice', options);

export const provideFeedbackForBadPracticeOptions = (options: Options<ProvideFeedbackForBadPracticeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await provideFeedbackForBadPractice({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: provideFeedbackForBadPracticeQueryKey(options)
    });
};

export const provideFeedbackForBadPracticeMutation = (options?: Partial<Options<ProvideFeedbackForBadPracticeData>>): UseMutationOptions<unknown, DefaultError, Options<ProvideFeedbackForBadPracticeData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ProvideFeedbackForBadPracticeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await provideFeedbackForBadPractice({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUsersWithTeamsQueryKey = (options?: Options<GetUsersWithTeamsData>) => createQueryKey('getUsersWithTeams', options);

export const getUsersWithTeamsOptions = (options?: Options<GetUsersWithTeamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsersWithTeams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersWithTeamsQueryKey(options)
    });
};

export const getRepositoriesToMonitorQueryKey = (options?: Options<GetRepositoriesToMonitorData>) => createQueryKey('getRepositoriesToMonitor', options);

export const getRepositoriesToMonitorOptions = (options?: Options<GetRepositoriesToMonitorData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRepositoriesToMonitor({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRepositoriesToMonitorQueryKey(options)
    });
};

export const getUserProfileQueryKey = (options: Options<GetUserProfileData>) => createQueryKey('getUserProfile', options);

export const getUserProfileOptions = (options: Options<GetUserProfileData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserProfile({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserProfileQueryKey(options)
    });
};

export const getTeamsQueryKey = (options?: Options<GetTeamsData>) => createQueryKey('getTeams', options);

export const getTeamsOptions = (options?: Options<GetTeamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTeams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTeamsQueryKey(options)
    });
};

export const getMetaDataQueryKey = (options?: Options<GetMetaDataData>) => createQueryKey('getMetaData', options);

export const getMetaDataOptions = (options?: Options<GetMetaDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMetaData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMetaDataQueryKey(options)
    });
};

export const getContributorsQueryKey = (options?: Options<GetContributorsData>) => createQueryKey('getContributors', options);

export const getContributorsOptions = (options?: Options<GetContributorsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getContributors({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getContributorsQueryKey(options)
    });
};

export const getActivityByUserQueryKey = (options: Options<GetActivityByUserData>) => createQueryKey('getActivityByUser', options);

export const getActivityByUserOptions = (options: Options<GetActivityByUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getActivityByUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getActivityByUserQueryKey(options)
    });
};

export const deleteTeamMutation = (options?: Partial<Options<DeleteTeamData>>): UseMutationOptions<DeleteTeamResponse, DefaultError, Options<DeleteTeamData>> => {
    const mutationOptions: UseMutationOptions<DeleteTeamResponse, DefaultError, Options<DeleteTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const removeLabelFromTeamMutation = (options?: Partial<Options<RemoveLabelFromTeamData>>): UseMutationOptions<RemoveLabelFromTeamResponse, DefaultError, Options<RemoveLabelFromTeamData>> => {
    const mutationOptions: UseMutationOptions<RemoveLabelFromTeamResponse, DefaultError, Options<RemoveLabelFromTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeLabelFromTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteUserMutation = (options?: Partial<Options<DeleteUserData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteUserData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};