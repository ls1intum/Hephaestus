// This file is auto-generated by @hey-api/openapi-ts

export type PullRequestInfo = {
    id: number;
    number: number;
    title: string;
    state: 'OPEN' | 'CLOSED';
    isDraft: boolean;
    isMerged: boolean;
    commentsCount: number;
    author?: UserInfo;
    labels?: Array<LabelInfo>;
    assignees?: Array<UserInfo>;
    repository?: RepositoryInfo;
    additions: number;
    deletions: number;
    mergedAt?: Date;
    closedAt?: Date;
    htmlUrl: string;
    createdAt?: Date;
    updatedAt?: Date;
};

export type Message = {
    id: number;
    sentAt: Date;
    sender: 'MENTOR' | 'USER';
    content: string;
    sessionId: number;
};

export type UserProfile = {
    userInfo: UserInfo;
    firstContribution: Date;
    contributedRepositories: Array<RepositoryInfo>;
    reviewActivity?: Array<PullRequestReviewInfo>;
    openPullRequests?: Array<PullRequestInfo>;
};

export type RepositoryInfo = {
    id: number;
    name: string;
    nameWithOwner: string;
    description?: string;
    htmlUrl: string;
};

export type UserSettings = {
    receiveNotifications?: boolean;
};

export type UserTeams = {
    id: number;
    login: string;
    name: string;
    url: string;
    teams: Array<TeamInfo>;
};

export type PullRequestWithBadPractices = {
    id: number;
    number: number;
    title: string;
    state: 'OPEN' | 'CLOSED';
    isDraft: boolean;
    isMerged: boolean;
    labels: Array<LabelInfo>;
    repository: RepositoryInfo;
    additions: number;
    deletions: number;
    htmlUrl: string;
    createdAt: Date;
    updatedAt: Date;
    badPracticeSummary: string;
    badPractices: Array<PullRequestBadPractice>;
    oldBadPractices: Array<PullRequestBadPractice>;
};

export type PullRequestBaseInfo = {
    id: number;
    number: number;
    title: string;
    state: 'OPEN' | 'CLOSED';
    isDraft: boolean;
    isMerged: boolean;
    repository?: RepositoryInfo;
    htmlUrl: string;
};

export type Contributor = {
    id: number;
    login: string;
    name: string;
    avatarUrl: string;
    htmlUrl: string;
    contributions?: number;
};

export type Activity = {
    pullRequests: Array<PullRequestWithBadPractices>;
};

export type UserInfo = {
    id: number;
    login: string;
    email?: string;
    avatarUrl: string;
    name: string;
    htmlUrl: string;
    leaguePoints?: number;
};

export type TeamInfo = {
    id: number;
    name: string;
    color: string;
    repositories: Array<RepositoryInfo>;
    labels: Array<LabelInfo>;
    members: Array<UserInfo>;
    hidden: boolean;
};

export type PullRequestBadPractice = {
    id: number;
    title: string;
    description: string;
    state: 'GOOD_PRACTICE' | 'FIXED' | 'CRITICAL_ISSUE' | 'NORMAL_ISSUE' | 'MINOR_ISSUE' | 'WONT_FIX' | 'WRONG';
};

export type LeagueChange = {
    login: string;
    leaguePointsChange: number;
};

export type LabelInfo = {
    id: number;
    name: string;
    color: string;
    repository?: RepositoryInfo;
};

export type BadPracticeFeedback = {
    type: string;
    explanation: string;
};

export type PullRequestReviewInfo = {
    id: number;
    isDismissed: boolean;
    state: 'COMMENTED' | 'APPROVED' | 'CHANGES_REQUESTED' | 'UNKNOWN';
    codeComments: number;
    author?: UserInfo;
    pullRequest?: PullRequestBaseInfo;
    htmlUrl: string;
    score: number;
    submittedAt?: Date;
};

export type MetaData = {
    teams: Array<TeamInfo>;
    scheduledDay: string;
    scheduledTime: string;
};

export type ChatRequest = {
    messages: Array<{
        [key: string]: {
            [key: string]: unknown;
        };
    }>;
};

export type LeaderboardEntry = {
    rank: number;
    score: number;
    user: UserInfo;
    reviewedPullRequests: Array<PullRequestInfo>;
    numberOfReviewedPRs: number;
    numberOfApprovals: number;
    numberOfChangeRequests: number;
    numberOfComments: number;
    numberOfUnknowns: number;
    numberOfCodeComments: number;
};

export type Session = {
    id: number;
    createdAt: Date;
    isClosed: boolean;
};

export type RemoveUserFromTeamData = {
    body?: never;
    path: {
        login: string;
        teamId: number;
    };
    query?: never;
    url: '/workspace/user/{login}/team/{teamId}';
};

export type RemoveUserFromTeamResponses = {
    /**
     * OK
     */
    200: UserInfo;
};

export type RemoveUserFromTeamResponse = RemoveUserFromTeamResponses[keyof RemoveUserFromTeamResponses];

export type AddTeamToUserData = {
    body?: never;
    path: {
        login: string;
        teamId: number;
    };
    query?: never;
    url: '/workspace/user/{login}/team/{teamId}';
};

export type AddTeamToUserResponses = {
    /**
     * OK
     */
    200: UserInfo;
};

export type AddTeamToUserResponse = AddTeamToUserResponses[keyof AddTeamToUserResponses];

export type CreateTeamData = {
    body: TeamInfo;
    path?: never;
    query?: never;
    url: '/workspace/teams';
};

export type CreateTeamResponses = {
    /**
     * OK
     */
    200: TeamInfo;
};

export type CreateTeamResponse = CreateTeamResponses[keyof CreateTeamResponses];

export type AutomaticallyAssignTeamsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspace/teams/autoassign';
};

export type AutomaticallyAssignTeamsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ResetAndRecalculateLeaguesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspace/league/reset';
};

export type ResetAndRecalculateLeaguesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RemoveRepositoryFromTeamData = {
    body?: never;
    path: {
        teamId: number;
        repositoryOwner: string;
        repositoryName: string;
    };
    query?: never;
    url: '/workspace/team/{teamId}/repository/{repositoryOwner}/{repositoryName}';
};

export type RemoveRepositoryFromTeamResponses = {
    /**
     * OK
     */
    200: TeamInfo;
};

export type RemoveRepositoryFromTeamResponse = RemoveRepositoryFromTeamResponses[keyof RemoveRepositoryFromTeamResponses];

export type AddRepositoryToTeamData = {
    body?: never;
    path: {
        teamId: number;
        repositoryOwner: string;
        repositoryName: string;
    };
    query?: never;
    url: '/workspace/team/{teamId}/repository/{repositoryOwner}/{repositoryName}';
};

export type AddRepositoryToTeamResponses = {
    /**
     * OK
     */
    200: TeamInfo;
};

export type AddRepositoryToTeamResponse = AddRepositoryToTeamResponses[keyof AddRepositoryToTeamResponses];

export type AddLabelToTeamData = {
    body?: never;
    path: {
        teamId: number;
        repositoryId: number;
        label: string;
    };
    query?: never;
    url: '/workspace/team/{teamId}/label/{repositoryId}/{label}';
};

export type AddLabelToTeamResponses = {
    /**
     * OK
     */
    200: TeamInfo;
};

export type AddLabelToTeamResponse = AddLabelToTeamResponses[keyof AddLabelToTeamResponses];

export type RemoveRepositoryToMonitorData = {
    body?: never;
    path: {
        owner: string;
        name: string;
    };
    query?: never;
    url: '/workspace/repositories/{owner}/{name}';
};

export type RemoveRepositoryToMonitorResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type AddRepositoryToMonitorData = {
    body?: never;
    path: {
        owner: string;
        name: string;
    };
    query?: never;
    url: '/workspace/repositories/{owner}/{name}';
};

export type AddRepositoryToMonitorResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUserSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/settings';
};

export type GetUserSettingsResponses = {
    /**
     * OK
     */
    200: UserSettings;
};

export type GetUserSettingsResponse = GetUserSettingsResponses[keyof GetUserSettingsResponses];

export type UpdateUserSettingsData = {
    body: UserSettings;
    path?: never;
    query?: never;
    url: '/user/settings';
};

export type UpdateUserSettingsResponses = {
    /**
     * OK
     */
    200: UserSettings;
};

export type UpdateUserSettingsResponse = UpdateUserSettingsResponses[keyof UpdateUserSettingsResponses];

export type HideTeamData = {
    body: boolean;
    path: {
        id: number;
    };
    query?: never;
    url: '/team/{id}/hide';
};

export type HideTeamResponses = {
    /**
     * OK
     */
    200: TeamInfo;
};

export type HideTeamResponse = HideTeamResponses[keyof HideTeamResponses];

export type GetAllSessionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mentor/sessions';
};

export type GetAllSessionsResponses = {
    /**
     * OK
     */
    200: Array<Session>;
};

export type GetAllSessionsResponse = GetAllSessionsResponses[keyof GetAllSessionsResponses];

export type CreateNewSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mentor/sessions';
};

export type CreateNewSessionResponses = {
    /**
     * OK
     */
    200: Session;
};

export type CreateNewSessionResponse = CreateNewSessionResponses[keyof CreateNewSessionResponses];

export type GetMessagesData = {
    body?: never;
    path: {
        sessionId: number;
    };
    query?: never;
    url: '/mentor/sessions/{sessionId}';
};

export type GetMessagesResponses = {
    /**
     * OK
     */
    200: Array<Message>;
};

export type GetMessagesResponse = GetMessagesResponses[keyof GetMessagesResponses];

export type CreateMessageData = {
    body: string;
    path: {
        sessionId: number;
    };
    query?: never;
    url: '/mentor/sessions/{sessionId}';
};

export type CreateMessageResponses = {
    /**
     * OK
     */
    200: Message;
};

export type CreateMessageResponse = CreateMessageResponses[keyof CreateMessageResponses];

export type ChatData = {
    body: ChatRequest;
    path?: never;
    query?: never;
    url: '/mentor/chat';
};

export type ChatResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type ChatResponse = ChatResponses[keyof ChatResponses];

export type GetLeaderboardData = {
    body?: never;
    path?: never;
    query: {
        after: Date;
        before: Date;
        team?: string;
        sort?: 'SCORE' | 'LEAGUE_POINTS';
    };
    url: '/leaderboard';
};

export type GetLeaderboardResponses = {
    /**
     * OK
     */
    200: Array<LeaderboardEntry>;
};

export type GetLeaderboardResponse = GetLeaderboardResponses[keyof GetLeaderboardResponses];

export type GetUserLeagueStatsData = {
    body: LeaderboardEntry;
    path?: never;
    query: {
        login: string;
    };
    url: '/leaderboard';
};

export type GetUserLeagueStatsResponses = {
    /**
     * OK
     */
    200: LeagueChange;
};

export type GetUserLeagueStatsResponse = GetUserLeagueStatsResponses[keyof GetUserLeagueStatsResponses];

export type DetectBadPracticesByUserData = {
    body?: never;
    path: {
        login: string;
    };
    query?: never;
    url: '/activity/user/{login}/badpractices';
};

export type DetectBadPracticesByUserResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DetectBadPracticesForPullRequestData = {
    body?: never;
    path: {
        pullRequestId: number;
    };
    query?: never;
    url: '/activity/pullrequest/{pullRequestId}/badpractices';
};

export type DetectBadPracticesForPullRequestResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ResolveBadPracticeData = {
    body?: never;
    path: {
        badPracticeId: number;
    };
    query: {
        state: 'GOOD_PRACTICE' | 'FIXED' | 'CRITICAL_ISSUE' | 'NORMAL_ISSUE' | 'MINOR_ISSUE' | 'WONT_FIX' | 'WRONG';
    };
    url: '/activity/badpractice/{badPracticeId}/resolve';
};

export type ResolveBadPracticeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ProvideFeedbackForBadPracticeData = {
    body: BadPracticeFeedback;
    path: {
        badPracticeId: number;
    };
    query?: never;
    url: '/activity/badpractice/{badPracticeId}/feedback';
};

export type ProvideFeedbackForBadPracticeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUsersWithTeamsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspace/users';
};

export type GetUsersWithTeamsResponses = {
    /**
     * OK
     */
    200: Array<UserTeams>;
};

export type GetUsersWithTeamsResponse = GetUsersWithTeamsResponses[keyof GetUsersWithTeamsResponses];

export type GetRepositoriesToMonitorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspace/repositories';
};

export type GetRepositoriesToMonitorResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type GetRepositoriesToMonitorResponse = GetRepositoriesToMonitorResponses[keyof GetRepositoriesToMonitorResponses];

export type GetUserProfileData = {
    body?: never;
    path: {
        login: string;
    };
    query?: never;
    url: '/user/{login}/profile';
};

export type GetUserProfileResponses = {
    /**
     * OK
     */
    200: UserProfile;
};

export type GetUserProfileResponse = GetUserProfileResponses[keyof GetUserProfileResponses];

export type GetTeamsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/team/all';
};

export type GetTeamsResponses = {
    /**
     * OK
     */
    200: Array<TeamInfo>;
};

export type GetTeamsResponse = GetTeamsResponses[keyof GetTeamsResponses];

export type GetMetaDataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/meta';
};

export type GetMetaDataResponses = {
    /**
     * OK
     */
    200: MetaData;
};

export type GetMetaDataResponse = GetMetaDataResponses[keyof GetMetaDataResponses];

export type GetContributorsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/meta/contributors';
};

export type GetContributorsResponses = {
    /**
     * OK
     */
    200: Array<Contributor>;
};

export type GetContributorsResponse = GetContributorsResponses[keyof GetContributorsResponses];

export type GetLastSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mentor/sessions/last';
};

export type GetLastSessionResponses = {
    /**
     * OK
     */
    200: Session;
};

export type GetLastSessionResponse = GetLastSessionResponses[keyof GetLastSessionResponses];

export type GetActivityByUserData = {
    body?: never;
    path: {
        login: string;
    };
    query?: never;
    url: '/activity/{login}';
};

export type GetActivityByUserResponses = {
    /**
     * OK
     */
    200: Activity;
};

export type GetActivityByUserResponse = GetActivityByUserResponses[keyof GetActivityByUserResponses];

export type DeleteTeamData = {
    body?: never;
    path: {
        teamId: number;
    };
    query?: never;
    url: '/workspace/team/{teamId}';
};

export type DeleteTeamResponses = {
    /**
     * OK
     */
    200: TeamInfo;
};

export type DeleteTeamResponse = DeleteTeamResponses[keyof DeleteTeamResponses];

export type RemoveLabelFromTeamData = {
    body?: never;
    path: {
        teamId: number;
        labelId: number;
    };
    query?: never;
    url: '/workspace/team/{teamId}/label/{labelId}';
};

export type RemoveLabelFromTeamResponses = {
    /**
     * OK
     */
    200: TeamInfo;
};

export type RemoveLabelFromTeamResponse = RemoveLabelFromTeamResponses[keyof RemoveLabelFromTeamResponses];

export type DeleteUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user';
};

export type DeleteUserResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};