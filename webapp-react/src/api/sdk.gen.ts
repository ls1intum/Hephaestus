// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { RemoveUserFromTeamData, RemoveUserFromTeamResponse, AddTeamToUserData, AddTeamToUserResponse, CreateTeamData, CreateTeamResponse, AutomaticallyAssignTeamsData, ResetAndRecalculateLeaguesData, RemoveRepositoryFromTeamData, RemoveRepositoryFromTeamResponse, AddRepositoryToTeamData, AddRepositoryToTeamResponse, AddLabelToTeamData, AddLabelToTeamResponse, RemoveRepositoryToMonitorData, AddRepositoryToMonitorData, GetUserSettingsData, GetUserSettingsResponse, UpdateUserSettingsData, UpdateUserSettingsResponse, HideTeamData, HideTeamResponse, GetAllSessionsData, GetAllSessionsResponse, CreateNewSessionData, CreateNewSessionResponse, GetMessagesData, GetMessagesResponse, CreateMessageData, CreateMessageResponse, GetLeaderboardData, GetLeaderboardResponse, GetUserLeagueStatsData, GetUserLeagueStatsResponse, DetectBadPracticesByUserData, DetectBadPracticesByUserResponse, DetectBadPracticesForPullRequestData, DetectBadPracticesForPullRequestResponse, ResolveBadPracticeData, ProvideFeedbackForBadPracticeData, GetUsersWithTeamsData, GetUsersWithTeamsResponse, GetRepositoriesToMonitorData, GetRepositoriesToMonitorResponse, GetUserProfileData, GetUserProfileResponse, GetTeamsData, GetTeamsResponse, GetMetaDataData, GetMetaDataResponse, GetContributorsData, GetContributorsResponse, GetLastSessionData, GetLastSessionResponse, GetActivityByUserData, GetActivityByUserResponse, DeleteTeamData, DeleteTeamResponse, RemoveLabelFromTeamData, RemoveLabelFromTeamResponse, DeleteUserData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const removeUserFromTeam = <ThrowOnError extends boolean = false>(options: Options<RemoveUserFromTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveUserFromTeamResponse, unknown, ThrowOnError>({
        url: '/workspace/user/{login}/team/{teamId}',
        ...options
    });
};

export const addTeamToUser = <ThrowOnError extends boolean = false>(options: Options<AddTeamToUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddTeamToUserResponse, unknown, ThrowOnError>({
        url: '/workspace/user/{login}/team/{teamId}',
        ...options
    });
};

export const createTeam = <ThrowOnError extends boolean = false>(options: Options<CreateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateTeamResponse, unknown, ThrowOnError>({
        url: '/workspace/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const automaticallyAssignTeams = <ThrowOnError extends boolean = false>(options?: Options<AutomaticallyAssignTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/workspace/teams/autoassign',
        ...options
    });
};

export const resetAndRecalculateLeagues = <ThrowOnError extends boolean = false>(options?: Options<ResetAndRecalculateLeaguesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/workspace/league/reset',
        ...options
    });
};

export const removeRepositoryFromTeam = <ThrowOnError extends boolean = false>(options: Options<RemoveRepositoryFromTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveRepositoryFromTeamResponse, unknown, ThrowOnError>({
        url: '/workspace/team/{teamId}/repository/{repositoryOwner}/{repositoryName}',
        ...options
    });
};

export const addRepositoryToTeam = <ThrowOnError extends boolean = false>(options: Options<AddRepositoryToTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddRepositoryToTeamResponse, unknown, ThrowOnError>({
        url: '/workspace/team/{teamId}/repository/{repositoryOwner}/{repositoryName}',
        ...options
    });
};

export const addLabelToTeam = <ThrowOnError extends boolean = false>(options: Options<AddLabelToTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddLabelToTeamResponse, unknown, ThrowOnError>({
        url: '/workspace/team/{teamId}/label/{repositoryId}/{label}',
        ...options
    });
};

export const removeRepositoryToMonitor = <ThrowOnError extends boolean = false>(options: Options<RemoveRepositoryToMonitorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/workspace/repositories/{owner}/{name}',
        ...options
    });
};

export const addRepositoryToMonitor = <ThrowOnError extends boolean = false>(options: Options<AddRepositoryToMonitorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/workspace/repositories/{owner}/{name}',
        ...options
    });
};

export const getUserSettings = <ThrowOnError extends boolean = false>(options?: Options<GetUserSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSettingsResponse, unknown, ThrowOnError>({
        url: '/user/settings',
        ...options
    });
};

export const updateUserSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateUserSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateUserSettingsResponse, unknown, ThrowOnError>({
        url: '/user/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const hideTeam = <ThrowOnError extends boolean = false>(options: Options<HideTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HideTeamResponse, unknown, ThrowOnError>({
        url: '/team/{id}/hide',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllSessions = <ThrowOnError extends boolean = false>(options?: Options<GetAllSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSessionsResponse, unknown, ThrowOnError>({
        url: '/mentor/sessions',
        ...options
    });
};

export const createNewSession = <ThrowOnError extends boolean = false>(options?: Options<CreateNewSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateNewSessionResponse, unknown, ThrowOnError>({
        url: '/mentor/sessions',
        ...options
    });
};

export const getMessages = <ThrowOnError extends boolean = false>(options: Options<GetMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessagesResponse, unknown, ThrowOnError>({
        url: '/mentor/sessions/{sessionId}',
        ...options
    });
};

export const createMessage = <ThrowOnError extends boolean = false>(options: Options<CreateMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMessageResponse, unknown, ThrowOnError>({
        url: '/mentor/sessions/{sessionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getLeaderboard = <ThrowOnError extends boolean = false>(options: Options<GetLeaderboardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLeaderboardResponse, unknown, ThrowOnError>({
        url: '/leaderboard',
        ...options
    });
};

export const getUserLeagueStats = <ThrowOnError extends boolean = false>(options: Options<GetUserLeagueStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetUserLeagueStatsResponse, unknown, ThrowOnError>({
        url: '/leaderboard',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const detectBadPracticesByUser = <ThrowOnError extends boolean = false>(options: Options<DetectBadPracticesByUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DetectBadPracticesByUserResponse, unknown, ThrowOnError>({
        url: '/activity/user/{login}/badpractices',
        ...options
    });
};

export const detectBadPracticesForPullRequest = <ThrowOnError extends boolean = false>(options: Options<DetectBadPracticesForPullRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DetectBadPracticesForPullRequestResponse, unknown, ThrowOnError>({
        url: '/activity/pullrequest/{pullRequestId}/badpractices',
        ...options
    });
};

export const resolveBadPractice = <ThrowOnError extends boolean = false>(options: Options<ResolveBadPracticeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/activity/badpractice/{badPracticeId}/resolve',
        ...options
    });
};

export const provideFeedbackForBadPractice = <ThrowOnError extends boolean = false>(options: Options<ProvideFeedbackForBadPracticeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/activity/badpractice/{badPracticeId}/feedback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getUsersWithTeams = <ThrowOnError extends boolean = false>(options?: Options<GetUsersWithTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersWithTeamsResponse, unknown, ThrowOnError>({
        url: '/workspace/users',
        ...options
    });
};

export const getRepositoriesToMonitor = <ThrowOnError extends boolean = false>(options?: Options<GetRepositoriesToMonitorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRepositoriesToMonitorResponse, unknown, ThrowOnError>({
        url: '/workspace/repositories',
        ...options
    });
};

export const getUserProfile = <ThrowOnError extends boolean = false>(options: Options<GetUserProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserProfileResponse, unknown, ThrowOnError>({
        url: '/user/{login}/profile',
        ...options
    });
};

export const getTeams = <ThrowOnError extends boolean = false>(options?: Options<GetTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTeamsResponse, unknown, ThrowOnError>({
        url: '/team/all',
        ...options
    });
};

export const getMetaData = <ThrowOnError extends boolean = false>(options?: Options<GetMetaDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMetaDataResponse, unknown, ThrowOnError>({
        url: '/meta',
        ...options
    });
};

export const getContributors = <ThrowOnError extends boolean = false>(options?: Options<GetContributorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetContributorsResponse, unknown, ThrowOnError>({
        url: '/meta/contributors',
        ...options
    });
};

export const getLastSession = <ThrowOnError extends boolean = false>(options?: Options<GetLastSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLastSessionResponse, unknown, ThrowOnError>({
        url: '/mentor/sessions/last',
        ...options
    });
};

export const getActivityByUser = <ThrowOnError extends boolean = false>(options: Options<GetActivityByUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActivityByUserResponse, unknown, ThrowOnError>({
        url: '/activity/{login}',
        ...options
    });
};

export const deleteTeam = <ThrowOnError extends boolean = false>(options: Options<DeleteTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTeamResponse, unknown, ThrowOnError>({
        url: '/workspace/team/{teamId}',
        ...options
    });
};

export const removeLabelFromTeam = <ThrowOnError extends boolean = false>(options: Options<RemoveLabelFromTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveLabelFromTeamResponse, unknown, ThrowOnError>({
        url: '/workspace/team/{teamId}/label/{labelId}',
        ...options
    });
};

export const deleteUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/user',
        ...options
    });
};