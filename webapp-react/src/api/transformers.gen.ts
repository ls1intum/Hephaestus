// This file is auto-generated by @hey-api/openapi-ts

import type { GetLeaderboardResponse, GetUserProfileResponse, GetThreadsResponse, GetGroupedThreadsResponse, GetThreadResponse, GetActivityByUserResponse } from './types.gen';

const pullRequestInfoSchemaResponseTransformer = (data: any) => {
    if (data.mergedAt) {
        data.mergedAt = new Date(data.mergedAt);
    }
    if (data.closedAt) {
        data.closedAt = new Date(data.closedAt);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

const leaderboardEntrySchemaResponseTransformer = (data: any) => {
    data.reviewedPullRequests = data.reviewedPullRequests.map((item: any) => {
        return pullRequestInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getLeaderboardResponseTransformer = async (data: any): Promise<GetLeaderboardResponse> => {
    data = data.map((item: any) => {
        return leaderboardEntrySchemaResponseTransformer(item);
    });
    return data;
};

const pullRequestReviewInfoSchemaResponseTransformer = (data: any) => {
    if (data.submittedAt) {
        data.submittedAt = new Date(data.submittedAt);
    }
    return data;
};

const userProfileSchemaResponseTransformer = (data: any) => {
    data.firstContribution = new Date(data.firstContribution);
    if (data.reviewActivity) {
        data.reviewActivity = data.reviewActivity.map((item: any) => {
            return pullRequestReviewInfoSchemaResponseTransformer(item);
        });
    }
    if (data.openPullRequests) {
        data.openPullRequests = data.openPullRequests.map((item: any) => {
            return pullRequestInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUserProfileResponseTransformer = async (data: any): Promise<GetUserProfileResponse> => {
    data = userProfileSchemaResponseTransformer(data);
    return data;
};

const chatThreadSummarySchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getThreadsResponseTransformer = async (data: any): Promise<GetThreadsResponse> => {
    data = data.map((item: any) => {
        return chatThreadSummarySchemaResponseTransformer(item);
    });
    return data;
};

const chatThreadGroupSchemaResponseTransformer = (data: any) => {
    data.threads = data.threads.map((item: any) => {
        return chatThreadSummarySchemaResponseTransformer(item);
    });
    return data;
};

export const getGroupedThreadsResponseTransformer = async (data: any): Promise<GetGroupedThreadsResponse> => {
    data = data.map((item: any) => {
        return chatThreadGroupSchemaResponseTransformer(item);
    });
    return data;
};

const chatThreadDetailSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

export const getThreadResponseTransformer = async (data: any): Promise<GetThreadResponse> => {
    data = chatThreadDetailSchemaResponseTransformer(data);
    return data;
};

const pullRequestWithBadPracticesSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

const activitySchemaResponseTransformer = (data: any) => {
    data.pullRequests = data.pullRequests.map((item: any) => {
        return pullRequestWithBadPracticesSchemaResponseTransformer(item);
    });
    return data;
};

export const getActivityByUserResponseTransformer = async (data: any): Promise<GetActivityByUserResponse> => {
    data = activitySchemaResponseTransformer(data);
    return data;
};